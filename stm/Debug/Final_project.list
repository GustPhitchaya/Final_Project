
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005740  08005740  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000078  080057c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080057c0  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116b0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a5  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001744a  00000000  00000000  00035600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111e1  00000000  00000000  0004ca4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092193  00000000  00000000  0005dc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efdbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  000efe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054ec 	.word	0x080054ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080054ec 	.word	0x080054ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DEV_Set_I2CAddress>:
unsigned char i;
	unsigned short  Gesture_Data;
UWORD IIC_Addr_t = IIC_Addr;

void DEV_Set_I2CAddress(UBYTE add_)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	IIC_Addr_t = add_;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <DEV_Set_I2CAddress+0x20>)
 8000588:	801a      	strh	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <DEV_I2C_WriteByte>:
/******************************************************************************
function:
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af04      	add	r7, sp, #16
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	UBYTE Buf[1] = {0};
 80005ac:	2300      	movs	r3, #0
 80005ae:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <DEV_I2C_WriteByte+0x40>)
 80005b6:	8819      	ldrh	r1, [r3, #0]
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2310      	movs	r3, #16
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <DEV_I2C_WriteByte+0x44>)
 80005ce:	f001 fc9f 	bl	8001f10 <HAL_I2C_Mem_Write>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	200000b8 	.word	0x200000b8

080005e4 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	UBYTE Buf[1]={add_};
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <DEV_I2C_ReadByte+0x38>)
 80005f4:	8819      	ldrh	r1, [r3, #0]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	2310      	movs	r3, #16
 80005fc:	9302      	str	r3, [sp, #8]
 80005fe:	2301      	movs	r3, #1
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <DEV_I2C_ReadByte+0x3c>)
 800060c:	f001 fd7a 	bl	8002104 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000610:	7b3b      	ldrb	r3, [r7, #12]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	200000b8 	.word	0x200000b8

08000624 <DEV_I2C_ReadWord>:

UWORD DEV_I2C_ReadWord(UBYTE add_)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af04      	add	r7, sp, #16
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    UBYTE Buf[2]={0, 0};
 800062e:	2300      	movs	r3, #0
 8000630:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <DEV_I2C_ReadWord+0x44>)
 8000634:	8819      	ldrh	r1, [r3, #0]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	b29a      	uxth	r2, r3
 800063a:	2310      	movs	r3, #16
 800063c:	9302      	str	r3, [sp, #8]
 800063e:	2302      	movs	r3, #2
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <DEV_I2C_ReadWord+0x48>)
 800064c:	f001 fd5a 	bl	8002104 <HAL_I2C_Mem_Read>
    return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000650:	7b7b      	ldrb	r3, [r7, #13]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	200000b8 	.word	0x200000b8

08000670 <PAJ7620U2_init>:


unsigned char PAJ7620U2_init()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	unsigned char i,State;
	DEV_Set_I2CAddress(PAJ7620U2_I2C_ADDRESS);
 8000676:	20e6      	movs	r0, #230	; 0xe6
 8000678:	f7ff ff7e 	bl	8000578 <DEV_Set_I2CAddress>
	DEV_Delay_ms(5);
 800067c:	2005      	movs	r0, #5
 800067e:	f000 fffd 	bl	800167c <HAL_Delay>
	State = DEV_I2C_ReadByte(0x00);												//Read State
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ffae 	bl	80005e4 <DEV_I2C_ReadByte>
 8000688:	4603      	mov	r3, r0
 800068a:	71bb      	strb	r3, [r7, #6]
	if (State != 0x20)
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b20      	cmp	r3, #32
 8000690:	d001      	beq.n	8000696 <PAJ7620U2_init+0x26>
		return 0;																						//Wake up failed
 8000692:	2300      	movs	r3, #0
 8000694:	e01a      	b.n	80006cc <PAJ7620U2_init+0x5c>
	DEV_I2C_WriteByte(PAJ_BANK_SELECT, 0);								//Select Bank 0
 8000696:	2100      	movs	r1, #0
 8000698:	20ef      	movs	r0, #239	; 0xef
 800069a:	f7ff ff7f 	bl	800059c <DEV_I2C_WriteByte>
	for (i=0;i< Init_Array;i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e00f      	b.n	80006c4 <PAJ7620U2_init+0x54>
	{
		 DEV_I2C_WriteByte(Init_Register_Array[i][0], Init_Register_Array[i][1]);//Power up initialize
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <PAJ7620U2_init+0x64>)
 80006a8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4909      	ldr	r1, [pc, #36]	; (80006d4 <PAJ7620U2_init+0x64>)
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	440b      	add	r3, r1
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4610      	mov	r0, r2
 80006ba:	f7ff ff6f 	bl	800059c <DEV_I2C_WriteByte>
	for (i=0;i< Init_Array;i++)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	3301      	adds	r3, #1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b32      	cmp	r3, #50	; 0x32
 80006c8:	d9ec      	bls.n	80006a4 <PAJ7620U2_init+0x34>
	}
	return 1;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	080055e4 	.word	0x080055e4

080006d8 <HAL_TIM_PeriodElapsedCallback>:

int state=0;
int counter=0;
char sentbuffer[7];
char recievebuffer[3];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	 if(htim==&htim10){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d105      	bne.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		 counter++;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006f0:	6013      	str	r3, [r2, #0]
		  	    }else{
		  			resetstate();
		  	    }
		  	 }
	  }
}
 80006f2:	e032      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x82>
	  }else if(htim==&htim11){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a1d      	ldr	r2, [pc, #116]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d12e      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x82>
		  	 if(state==1){
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d12a      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x82>
		  		if(counter<=60){
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b3c      	cmp	r3, #60	; 0x3c
 800070a:	dc08      	bgt.n	800071e <HAL_TIM_PeriodElapsedCallback+0x46>
		  			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800070c:	2140      	movs	r1, #64	; 0x40
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000710:	f001 fa9f 	bl	8001c52 <HAL_GPIO_TogglePin>
		  			htim11.Instance->CNT=0;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800071c:	e01d      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x82>
		  	    }else if (counter<=105){
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b69      	cmp	r3, #105	; 0x69
 8000724:	dc09      	bgt.n	800073a <HAL_TIM_PeriodElapsedCallback+0x62>
		  	    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	4812      	ldr	r0, [pc, #72]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800072a:	f001 fa92 	bl	8001c52 <HAL_GPIO_TogglePin>
		  	    	htim11.Instance->CNT=6670;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f641 220e 	movw	r2, #6670	; 0x1a0e
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000738:	e00f      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x82>
		  	    }else if(counter<=120){
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b78      	cmp	r3, #120	; 0x78
 8000740:	dc09      	bgt.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x7e>
		  	    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000742:	2140      	movs	r1, #64	; 0x40
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000746:	f001 fa84 	bl	8001c52 <HAL_GPIO_TogglePin>
		  	    	htim11.Instance->CNT=8000;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000754:	e001      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x82>
		  			resetstate();
 8000756:	f000 f80f 	bl	8000778 <resetstate>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000010c 	.word	0x2000010c
 8000768:	200000a8 	.word	0x200000a8
 800076c:	200001c0 	.word	0x200001c0
 8000770:	200000a4 	.word	0x200000a4
 8000774:	40020800 	.word	0x40020800

08000778 <resetstate>:
void resetstate(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <resetstate+0x44>)
 8000784:	f001 fa4c 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <resetstate+0x44>)
 800078e:	f001 fa47 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <resetstate+0x44>)
 8000798:	f001 fa42 	bl	8001c20 <HAL_GPIO_WritePin>
	memset(value,0,sizeof(value));
 800079c:	2210      	movs	r2, #16
 800079e:	2100      	movs	r1, #0
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <resetstate+0x48>)
 80007a2:	f003 fcfd 	bl	80041a0 <memset>
	counter=0;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <resetstate+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	state=0;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <resetstate+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	idx=3;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <resetstate+0x54>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40020800 	.word	0x40020800
 80007c0:	20000094 	.word	0x20000094
 80007c4:	200000a8 	.word	0x200000a8
 80007c8:	200000a4 	.word	0x200000a4
 80007cc:	20000004 	.word	0x20000004

080007d0 <check_password>:
void check_password(){
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af04      	add	r7, sp, #16
	if(state==1){
 80007d6:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <check_password+0x128>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d169      	bne.n	80008b2 <check_password+0xe2>
		sprintf(sentbuffer,"2%d%d%d%d%d\n",idx,value[0],value[1],value[2],value[3]);
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <check_password+0x12c>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <check_password+0x130>)
 80007e4:	681c      	ldr	r4, [r3, #0]
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <check_password+0x130>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4a45      	ldr	r2, [pc, #276]	; (8000900 <check_password+0x130>)
 80007ec:	6892      	ldr	r2, [r2, #8]
 80007ee:	4944      	ldr	r1, [pc, #272]	; (8000900 <check_password+0x130>)
 80007f0:	68c9      	ldr	r1, [r1, #12]
 80007f2:	9102      	str	r1, [sp, #8]
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	4623      	mov	r3, r4
 80007fa:	4602      	mov	r2, r0
 80007fc:	4941      	ldr	r1, [pc, #260]	; (8000904 <check_password+0x134>)
 80007fe:	4842      	ldr	r0, [pc, #264]	; (8000908 <check_password+0x138>)
 8000800:	f003 fd64 	bl	80042cc <siprintf>
		HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	2207      	movs	r2, #7
 8000808:	493f      	ldr	r1, [pc, #252]	; (8000908 <check_password+0x138>)
 800080a:	4840      	ldr	r0, [pc, #256]	; (800090c <check_password+0x13c>)
 800080c:	f003 f933 	bl	8003a76 <HAL_UART_Transmit>
		while(HAL_UART_Receive(&huart1, recievebuffer, sizeof(recievebuffer), HAL_MAX_DELAY)!=HAL_OK){
 8000810:	e012      	b.n	8000838 <check_password+0x68>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	483d      	ldr	r0, [pc, #244]	; (8000910 <check_password+0x140>)
 800081a:	f001 fa01 	bl	8001c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	483b      	ldr	r0, [pc, #236]	; (8000910 <check_password+0x140>)
 8000824:	f001 f9fc 	bl	8001c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2120      	movs	r1, #32
 800082c:	4838      	ldr	r0, [pc, #224]	; (8000910 <check_password+0x140>)
 800082e:	f001 f9f7 	bl	8001c20 <HAL_GPIO_WritePin>
			printf("waiting");
 8000832:	4838      	ldr	r0, [pc, #224]	; (8000914 <check_password+0x144>)
 8000834:	f003 fcbc 	bl	80041b0 <iprintf>
		while(HAL_UART_Receive(&huart1, recievebuffer, sizeof(recievebuffer), HAL_MAX_DELAY)!=HAL_OK){
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	2203      	movs	r2, #3
 800083e:	4936      	ldr	r1, [pc, #216]	; (8000918 <check_password+0x148>)
 8000840:	4832      	ldr	r0, [pc, #200]	; (800090c <check_password+0x13c>)
 8000842:	f003 f9aa 	bl	8003b9a <HAL_UART_Receive>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e2      	bne.n	8000812 <check_password+0x42>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	482f      	ldr	r0, [pc, #188]	; (8000910 <check_password+0x140>)
 8000854:	f001 f9e4 	bl	8001c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	482c      	ldr	r0, [pc, #176]	; (8000910 <check_password+0x140>)
 800085e:	f001 f9df 	bl	8001c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	482a      	ldr	r0, [pc, #168]	; (8000910 <check_password+0x140>)
 8000868:	f001 f9da 	bl	8001c20 <HAL_GPIO_WritePin>
		if(recievebuffer[0]=='1'||recievebuffer[1]=='1'||recievebuffer[2]=='1'){
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <check_password+0x148>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b31      	cmp	r3, #49	; 0x31
 8000872:	d007      	beq.n	8000884 <check_password+0xb4>
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <check_password+0x148>)
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	2b31      	cmp	r3, #49	; 0x31
 800087a:	d003      	beq.n	8000884 <check_password+0xb4>
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <check_password+0x148>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	2b31      	cmp	r3, #49	; 0x31
 8000882:	d108      	bne.n	8000896 <check_password+0xc6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2120      	movs	r1, #32
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <check_password+0x140>)
 800088a:	f001 f9c9 	bl	8001c20 <HAL_GPIO_WritePin>
			state=2;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <check_password+0x128>)
 8000890:	2202      	movs	r2, #2
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e001      	b.n	800089a <check_password+0xca>
		}else{
			resetstate();
 8000896:	f7ff ff6f 	bl	8000778 <resetstate>
		}
		memset(value,0,sizeof(value));
 800089a:	2210      	movs	r2, #16
 800089c:	2100      	movs	r1, #0
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <check_password+0x130>)
 80008a0:	f003 fc7e 	bl	80041a0 <memset>
		counter=0;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <check_password+0x14c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
		idx=3;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <check_password+0x12c>)
 80008ac:	2203      	movs	r2, #3
 80008ae:	601a      	str	r2, [r3, #0]
		sprintf(sentbuffer,"3%d%d%d%d%d\n",idx,value[0],value[1],value[2],value[3]);
		HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
		resetstate();
	}

}
 80008b0:	e01e      	b.n	80008f0 <check_password+0x120>
	}else if(state==2){
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <check_password+0x128>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d11a      	bne.n	80008f0 <check_password+0x120>
		sprintf(sentbuffer,"3%d%d%d%d%d\n",idx,value[0],value[1],value[2],value[3]);
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <check_password+0x12c>)
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <check_password+0x130>)
 80008c0:	681c      	ldr	r4, [r3, #0]
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <check_password+0x130>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <check_password+0x130>)
 80008c8:	6892      	ldr	r2, [r2, #8]
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <check_password+0x130>)
 80008cc:	68c9      	ldr	r1, [r1, #12]
 80008ce:	9102      	str	r1, [sp, #8]
 80008d0:	9201      	str	r2, [sp, #4]
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4623      	mov	r3, r4
 80008d6:	4602      	mov	r2, r0
 80008d8:	4911      	ldr	r1, [pc, #68]	; (8000920 <check_password+0x150>)
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <check_password+0x138>)
 80008dc:	f003 fcf6 	bl	80042cc <siprintf>
		HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	2207      	movs	r2, #7
 80008e4:	4908      	ldr	r1, [pc, #32]	; (8000908 <check_password+0x138>)
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <check_password+0x13c>)
 80008e8:	f003 f8c5 	bl	8003a76 <HAL_UART_Transmit>
		resetstate();
 80008ec:	f7ff ff44 	bl	8000778 <resetstate>
}
 80008f0:	bf00      	nop
 80008f2:	3704      	adds	r7, #4
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	20000004 	.word	0x20000004
 8000900:	20000094 	.word	0x20000094
 8000904:	08005504 	.word	0x08005504
 8000908:	2000025c 	.word	0x2000025c
 800090c:	2000017c 	.word	0x2000017c
 8000910:	40020800 	.word	0x40020800
 8000914:	08005514 	.word	0x08005514
 8000918:	20000168 	.word	0x20000168
 800091c:	200000a8 	.word	0x200000a8
 8000920:	0800551c 	.word	0x0800551c

08000924 <updatevalue>:
void updatevalue(){
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b085      	sub	sp, #20
 8000928:	af04      	add	r7, sp, #16
	Gesture_Data = DEV_I2C_ReadWord(PAJ_INT_FLAG1);
 800092a:	2043      	movs	r0, #67	; 0x43
 800092c:	f7ff fe7a 	bl	8000624 <DEV_I2C_ReadWord>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4b88      	ldr	r3, [pc, #544]	; (8000b58 <updatevalue+0x234>)
 8000936:	801a      	strh	r2, [r3, #0]
	if (Gesture_Data){
 8000938:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <updatevalue+0x234>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 8106 	beq.w	8000b4e <updatevalue+0x22a>
		switch (Gesture_Data){
 8000942:	4b85      	ldr	r3, [pc, #532]	; (8000b58 <updatevalue+0x234>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094a:	f000 80c9 	beq.w	8000ae0 <updatevalue+0x1bc>
 800094e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000952:	f300 80ca 	bgt.w	8000aea <updatevalue+0x1c6>
 8000956:	2b80      	cmp	r3, #128	; 0x80
 8000958:	f000 80bb 	beq.w	8000ad2 <updatevalue+0x1ae>
 800095c:	2b80      	cmp	r3, #128	; 0x80
 800095e:	f300 80c4 	bgt.w	8000aea <updatevalue+0x1c6>
 8000962:	2b20      	cmp	r3, #32
 8000964:	dc4a      	bgt.n	80009fc <updatevalue+0xd8>
 8000966:	2b00      	cmp	r3, #0
 8000968:	f340 80bf 	ble.w	8000aea <updatevalue+0x1c6>
 800096c:	3b01      	subs	r3, #1
 800096e:	2b1f      	cmp	r3, #31
 8000970:	f200 80bb 	bhi.w	8000aea <updatevalue+0x1c6>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <updatevalue+0x58>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	08000a03 	.word	0x08000a03
 8000980:	08000a39 	.word	0x08000a39
 8000984:	08000aeb 	.word	0x08000aeb
 8000988:	08000a71 	.word	0x08000a71
 800098c:	08000aeb 	.word	0x08000aeb
 8000990:	08000aeb 	.word	0x08000aeb
 8000994:	08000aeb 	.word	0x08000aeb
 8000998:	08000a93 	.word	0x08000a93
 800099c:	08000aeb 	.word	0x08000aeb
 80009a0:	08000aeb 	.word	0x08000aeb
 80009a4:	08000aeb 	.word	0x08000aeb
 80009a8:	08000aeb 	.word	0x08000aeb
 80009ac:	08000aeb 	.word	0x08000aeb
 80009b0:	08000aeb 	.word	0x08000aeb
 80009b4:	08000aeb 	.word	0x08000aeb
 80009b8:	08000ab5 	.word	0x08000ab5
 80009bc:	08000aeb 	.word	0x08000aeb
 80009c0:	08000aeb 	.word	0x08000aeb
 80009c4:	08000aeb 	.word	0x08000aeb
 80009c8:	08000aeb 	.word	0x08000aeb
 80009cc:	08000aeb 	.word	0x08000aeb
 80009d0:	08000aeb 	.word	0x08000aeb
 80009d4:	08000aeb 	.word	0x08000aeb
 80009d8:	08000aeb 	.word	0x08000aeb
 80009dc:	08000aeb 	.word	0x08000aeb
 80009e0:	08000aeb 	.word	0x08000aeb
 80009e4:	08000aeb 	.word	0x08000aeb
 80009e8:	08000aeb 	.word	0x08000aeb
 80009ec:	08000aeb 	.word	0x08000aeb
 80009f0:	08000aeb 	.word	0x08000aeb
 80009f4:	08000aeb 	.word	0x08000aeb
 80009f8:	08000abf 	.word	0x08000abf
 80009fc:	2b40      	cmp	r3, #64	; 0x40
 80009fe:	d063      	beq.n	8000ac8 <updatevalue+0x1a4>
			case PAJ_COUNT_CLOCKWISE:
				sprintf(gesturearr,"AntiClockwise\r\n");
				check_password();
				break;
			case PAJ_WAVE:							sprintf(gesturearr,"Wave\r\n"); 			break;
			default: break;
 8000a00:	e073      	b.n	8000aea <updatevalue+0x1c6>
				sprintf(gesturearr,"Up\r\n");
 8000a02:	4956      	ldr	r1, [pc, #344]	; (8000b5c <updatevalue+0x238>)
 8000a04:	4856      	ldr	r0, [pc, #344]	; (8000b60 <updatevalue+0x23c>)
 8000a06:	f003 fc61 	bl	80042cc <siprintf>
				value[idx]=(value[idx]+1)%10;
 8000a0a:	4b56      	ldr	r3, [pc, #344]	; (8000b64 <updatevalue+0x240>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a56      	ldr	r2, [pc, #344]	; (8000b68 <updatevalue+0x244>)
 8000a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a14:	1c59      	adds	r1, r3, #1
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <updatevalue+0x240>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <updatevalue+0x248>)
 8000a1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a20:	109a      	asrs	r2, r3, #2
 8000a22:	17cb      	asrs	r3, r1, #31
 8000a24:	1ad2      	subs	r2, r2, r3
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	1aca      	subs	r2, r1, r3
 8000a30:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <updatevalue+0x244>)
 8000a32:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
				break;
 8000a36:	e059      	b.n	8000aec <updatevalue+0x1c8>
				sprintf(gesturearr,"Down\r\n");
 8000a38:	494d      	ldr	r1, [pc, #308]	; (8000b70 <updatevalue+0x24c>)
 8000a3a:	4849      	ldr	r0, [pc, #292]	; (8000b60 <updatevalue+0x23c>)
 8000a3c:	f003 fc46 	bl	80042cc <siprintf>
				value[idx]=(value[idx]+10-1)%10;
 8000a40:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <updatevalue+0x240>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a48      	ldr	r2, [pc, #288]	; (8000b68 <updatevalue+0x244>)
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	f103 0109 	add.w	r1, r3, #9
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <updatevalue+0x240>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <updatevalue+0x248>)
 8000a54:	fb83 2301 	smull	r2, r3, r3, r1
 8000a58:	109a      	asrs	r2, r3, #2
 8000a5a:	17cb      	asrs	r3, r1, #31
 8000a5c:	1ad2      	subs	r2, r2, r3
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	1aca      	subs	r2, r1, r3
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <updatevalue+0x244>)
 8000a6a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
				break;
 8000a6e:	e03d      	b.n	8000aec <updatevalue+0x1c8>
				sprintf(gesturearr,"Left\r\n");
 8000a70:	4940      	ldr	r1, [pc, #256]	; (8000b74 <updatevalue+0x250>)
 8000a72:	483b      	ldr	r0, [pc, #236]	; (8000b60 <updatevalue+0x23c>)
 8000a74:	f003 fc2a 	bl	80042cc <siprintf>
				idx=(idx+4-1)%4;
 8000a78:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <updatevalue+0x240>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3303      	adds	r3, #3
 8000a7e:	425a      	negs	r2, r3
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	f002 0203 	and.w	r2, r2, #3
 8000a88:	bf58      	it	pl
 8000a8a:	4253      	negpl	r3, r2
 8000a8c:	4a35      	ldr	r2, [pc, #212]	; (8000b64 <updatevalue+0x240>)
 8000a8e:	6013      	str	r3, [r2, #0]
				break;
 8000a90:	e02c      	b.n	8000aec <updatevalue+0x1c8>
				sprintf(gesturearr,"Right\r\n");
 8000a92:	4939      	ldr	r1, [pc, #228]	; (8000b78 <updatevalue+0x254>)
 8000a94:	4832      	ldr	r0, [pc, #200]	; (8000b60 <updatevalue+0x23c>)
 8000a96:	f003 fc19 	bl	80042cc <siprintf>
				idx=(idx+1)%4;
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <updatevalue+0x240>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	425a      	negs	r2, r3
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	f002 0203 	and.w	r2, r2, #3
 8000aaa:	bf58      	it	pl
 8000aac:	4253      	negpl	r3, r2
 8000aae:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <updatevalue+0x240>)
 8000ab0:	6013      	str	r3, [r2, #0]
				break;
 8000ab2:	e01b      	b.n	8000aec <updatevalue+0x1c8>
			case PAJ_FORWARD:						sprintf(gesturearr,"Forward\r\n");			break;
 8000ab4:	4931      	ldr	r1, [pc, #196]	; (8000b7c <updatevalue+0x258>)
 8000ab6:	482a      	ldr	r0, [pc, #168]	; (8000b60 <updatevalue+0x23c>)
 8000ab8:	f003 fc08 	bl	80042cc <siprintf>
 8000abc:	e016      	b.n	8000aec <updatevalue+0x1c8>
			case PAJ_BACKWARD:						sprintf(gesturearr,"Backward\r\n"); 		break;
 8000abe:	4930      	ldr	r1, [pc, #192]	; (8000b80 <updatevalue+0x25c>)
 8000ac0:	4827      	ldr	r0, [pc, #156]	; (8000b60 <updatevalue+0x23c>)
 8000ac2:	f003 fc03 	bl	80042cc <siprintf>
 8000ac6:	e011      	b.n	8000aec <updatevalue+0x1c8>
			case PAJ_CLOCKWISE:						sprintf(gesturearr,"Clockwise\r\n"); 		break;
 8000ac8:	492e      	ldr	r1, [pc, #184]	; (8000b84 <updatevalue+0x260>)
 8000aca:	4825      	ldr	r0, [pc, #148]	; (8000b60 <updatevalue+0x23c>)
 8000acc:	f003 fbfe 	bl	80042cc <siprintf>
 8000ad0:	e00c      	b.n	8000aec <updatevalue+0x1c8>
				sprintf(gesturearr,"AntiClockwise\r\n");
 8000ad2:	492d      	ldr	r1, [pc, #180]	; (8000b88 <updatevalue+0x264>)
 8000ad4:	4822      	ldr	r0, [pc, #136]	; (8000b60 <updatevalue+0x23c>)
 8000ad6:	f003 fbf9 	bl	80042cc <siprintf>
				check_password();
 8000ada:	f7ff fe79 	bl	80007d0 <check_password>
				break;
 8000ade:	e005      	b.n	8000aec <updatevalue+0x1c8>
			case PAJ_WAVE:							sprintf(gesturearr,"Wave\r\n"); 			break;
 8000ae0:	492a      	ldr	r1, [pc, #168]	; (8000b8c <updatevalue+0x268>)
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <updatevalue+0x23c>)
 8000ae4:	f003 fbf2 	bl	80042cc <siprintf>
 8000ae8:	e000      	b.n	8000aec <updatevalue+0x1c8>
			default: break;
 8000aea:	bf00      	nop
		}
		HAL_UART_Transmit(&huart2, gesturearr, sizeof(gesturearr), 50);
 8000aec:	2332      	movs	r3, #50	; 0x32
 8000aee:	2210      	movs	r2, #16
 8000af0:	491b      	ldr	r1, [pc, #108]	; (8000b60 <updatevalue+0x23c>)
 8000af2:	4827      	ldr	r0, [pc, #156]	; (8000b90 <updatevalue+0x26c>)
 8000af4:	f002 ffbf 	bl	8003a76 <HAL_UART_Transmit>
		sprintf(sentbuffer,"1%d%d%d%d%d\n",idx,value[0],value[1],value[2],value[3]);
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <updatevalue+0x240>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <updatevalue+0x244>)
 8000afe:	681c      	ldr	r4, [r3, #0]
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <updatevalue+0x244>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <updatevalue+0x244>)
 8000b06:	6892      	ldr	r2, [r2, #8]
 8000b08:	4917      	ldr	r1, [pc, #92]	; (8000b68 <updatevalue+0x244>)
 8000b0a:	68c9      	ldr	r1, [r1, #12]
 8000b0c:	9102      	str	r1, [sp, #8]
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	4623      	mov	r3, r4
 8000b14:	4602      	mov	r2, r0
 8000b16:	491f      	ldr	r1, [pc, #124]	; (8000b94 <updatevalue+0x270>)
 8000b18:	481f      	ldr	r0, [pc, #124]	; (8000b98 <updatevalue+0x274>)
 8000b1a:	f003 fbd7 	bl	80042cc <siprintf>
		HAL_UART_Transmit(&huart2, sentbuffer, sizeof(sentbuffer), 100);
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2207      	movs	r2, #7
 8000b22:	491d      	ldr	r1, [pc, #116]	; (8000b98 <updatevalue+0x274>)
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <updatevalue+0x26c>)
 8000b26:	f002 ffa6 	bl	8003a76 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 8000b2a:	2364      	movs	r3, #100	; 0x64
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	491a      	ldr	r1, [pc, #104]	; (8000b98 <updatevalue+0x274>)
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <updatevalue+0x278>)
 8000b32:	f002 ffa0 	bl	8003a76 <HAL_UART_Transmit>
		memset(gesturearr,0,15);
 8000b36:	220f      	movs	r2, #15
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <updatevalue+0x23c>)
 8000b3c:	f003 fb30 	bl	80041a0 <memset>
		Gesture_Data=0;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <updatevalue+0x234>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	801a      	strh	r2, [r3, #0]
		DEV_Delay_ms(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b4a:	f000 fd97 	bl	800167c <HAL_Delay>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3704      	adds	r7, #4
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000164 	.word	0x20000164
 8000b5c:	0800552c 	.word	0x0800552c
 8000b60:	20000154 	.word	0x20000154
 8000b64:	20000004 	.word	0x20000004
 8000b68:	20000094 	.word	0x20000094
 8000b6c:	66666667 	.word	0x66666667
 8000b70:	08005534 	.word	0x08005534
 8000b74:	0800553c 	.word	0x0800553c
 8000b78:	08005544 	.word	0x08005544
 8000b7c:	0800554c 	.word	0x0800554c
 8000b80:	08005558 	.word	0x08005558
 8000b84:	08005564 	.word	0x08005564
 8000b88:	08005570 	.word	0x08005570
 8000b8c:	08005580 	.word	0x08005580
 8000b90:	20000218 	.word	0x20000218
 8000b94:	08005588 	.word	0x08005588
 8000b98:	2000025c 	.word	0x2000025c
 8000b9c:	2000017c 	.word	0x2000017c

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 fcf8 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f8ea 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f000 fa1a 	bl	8000fe4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb0:	f000 f9ee 	bl	8000f90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bb4:	f000 f94c 	bl	8000e50 <MX_I2C1_Init>
  MX_TIM10_Init();
 8000bb8:	f000 f978 	bl	8000eac <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000bbc:	f000 f9be 	bl	8000f3c <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000bc0:	f000 f998 	bl	8000ef4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000bc4:	485d      	ldr	r0, [pc, #372]	; (8000d3c <main+0x19c>)
 8000bc6:	f002 fce3 	bl	8003590 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000bca:	485d      	ldr	r0, [pc, #372]	; (8000d40 <main+0x1a0>)
 8000bcc:	f002 fce0 	bl	8003590 <HAL_TIM_Base_Start_IT>
	if(!PAJ7620U2_init())
 8000bd0:	f7ff fd4e 	bl	8000670 <PAJ7620U2_init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d104      	bne.n	8000be4 <main+0x44>
	{	printf("\nGesture Sensor Error\r\n");
 8000bda:	485a      	ldr	r0, [pc, #360]	; (8000d44 <main+0x1a4>)
 8000bdc:	f003 fb6e 	bl	80042bc <puts>
		return 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e0a8      	b.n	8000d36 <main+0x196>
	}
		printf("\nGesture Sensor OK\r\n");
 8000be4:	4858      	ldr	r0, [pc, #352]	; (8000d48 <main+0x1a8>)
 8000be6:	f003 fb69 	bl	80042bc <puts>
	DEV_I2C_WriteByte(PAJ_BANK_SELECT, 0);																	//Select Bank 0
 8000bea:	2100      	movs	r1, #0
 8000bec:	20ef      	movs	r0, #239	; 0xef
 8000bee:	f7ff fcd5 	bl	800059c <DEV_I2C_WriteByte>
	for (i = 0; i < Gesture_Array_SIZE; i++)
 8000bf2:	4b56      	ldr	r3, [pc, #344]	; (8000d4c <main+0x1ac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e015      	b.n	8000c26 <main+0x86>
	{
		DEV_I2C_WriteByte(Init_Gesture_Array[i][0], Init_Gesture_Array[i][1]);//Gesture register initializes
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <main+0x1ac>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <main+0x1b0>)
 8000c02:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8000c06:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <main+0x1ac>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4951      	ldr	r1, [pc, #324]	; (8000d50 <main+0x1b0>)
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	785b      	ldrb	r3, [r3, #1]
 8000c12:	4619      	mov	r1, r3
 8000c14:	4610      	mov	r0, r2
 8000c16:	f7ff fcc1 	bl	800059c <DEV_I2C_WriteByte>
	for (i = 0; i < Gesture_Array_SIZE; i++)
 8000c1a:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <main+0x1ac>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <main+0x1ac>)
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <main+0x1ac>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b1d      	cmp	r3, #29
 8000c2c:	d9e5      	bls.n	8000bfa <main+0x5a>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	4847      	ldr	r0, [pc, #284]	; (8000d54 <main+0x1b4>)
 8000c36:	f000 fff3 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	4845      	ldr	r0, [pc, #276]	; (8000d54 <main+0x1b4>)
 8000c40:	f000 ffee 	bl	8001c20 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state==0){
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <main+0x1b8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d151      	bne.n	8000cf0 <main+0x150>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	4840      	ldr	r0, [pc, #256]	; (8000d54 <main+0x1b4>)
 8000c54:	f000 ffe4 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	; 0x40
 8000c5c:	483d      	ldr	r0, [pc, #244]	; (8000d54 <main+0x1b4>)
 8000c5e:	f000 ffdf 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2120      	movs	r1, #32
 8000c66:	483b      	ldr	r0, [pc, #236]	; (8000d54 <main+0x1b4>)
 8000c68:	f000 ffda 	bl	8001c20 <HAL_GPIO_WritePin>
		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)== GPIO_PIN_SET){
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	4838      	ldr	r0, [pc, #224]	; (8000d54 <main+0x1b4>)
 8000c72:	f000 ffbd 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d120      	bne.n	8000cbe <main+0x11e>
			 sprintf(statearr,"ok\r\n");
 8000c7c:	4937      	ldr	r1, [pc, #220]	; (8000d5c <main+0x1bc>)
 8000c7e:	4838      	ldr	r0, [pc, #224]	; (8000d60 <main+0x1c0>)
 8000c80:	f003 fb24 	bl	80042cc <siprintf>
			 sprintf(sentbuffer,"130000\n");
 8000c84:	4937      	ldr	r1, [pc, #220]	; (8000d64 <main+0x1c4>)
 8000c86:	4838      	ldr	r0, [pc, #224]	; (8000d68 <main+0x1c8>)
 8000c88:	f003 fb20 	bl	80042cc <siprintf>
			 HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 8000c8c:	2364      	movs	r3, #100	; 0x64
 8000c8e:	2207      	movs	r2, #7
 8000c90:	4935      	ldr	r1, [pc, #212]	; (8000d68 <main+0x1c8>)
 8000c92:	4836      	ldr	r0, [pc, #216]	; (8000d6c <main+0x1cc>)
 8000c94:	f002 feef 	bl	8003a76 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, statearr, sizeof(statearr), 50);
 8000c98:	2332      	movs	r3, #50	; 0x32
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	4930      	ldr	r1, [pc, #192]	; (8000d60 <main+0x1c0>)
 8000c9e:	4834      	ldr	r0, [pc, #208]	; (8000d70 <main+0x1d0>)
 8000ca0:	f002 fee9 	bl	8003a76 <HAL_UART_Transmit>
			 //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	482a      	ldr	r0, [pc, #168]	; (8000d54 <main+0x1b4>)
 8000cac:	f000 ffb8 	bl	8001c20 <HAL_GPIO_WritePin>
			 state=1;
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <main+0x1b8>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
			 counter=0;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <main+0x1d4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e013      	b.n	8000ce6 <main+0x146>
		 }else{
			 sprintf(statearr,"off\r\n");
 8000cbe:	492e      	ldr	r1, [pc, #184]	; (8000d78 <main+0x1d8>)
 8000cc0:	4827      	ldr	r0, [pc, #156]	; (8000d60 <main+0x1c0>)
 8000cc2:	f003 fb03 	bl	80042cc <siprintf>
			 sprintf(sentbuffer,"430000\n");
 8000cc6:	492d      	ldr	r1, [pc, #180]	; (8000d7c <main+0x1dc>)
 8000cc8:	4827      	ldr	r0, [pc, #156]	; (8000d68 <main+0x1c8>)
 8000cca:	f003 faff 	bl	80042cc <siprintf>
			 HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	4925      	ldr	r1, [pc, #148]	; (8000d68 <main+0x1c8>)
 8000cd4:	4825      	ldr	r0, [pc, #148]	; (8000d6c <main+0x1cc>)
 8000cd6:	f002 fece 	bl	8003a76 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, statearr, sizeof(statearr), 50);
 8000cda:	2332      	movs	r3, #50	; 0x32
 8000cdc:	220f      	movs	r2, #15
 8000cde:	4920      	ldr	r1, [pc, #128]	; (8000d60 <main+0x1c0>)
 8000ce0:	4823      	ldr	r0, [pc, #140]	; (8000d70 <main+0x1d0>)
 8000ce2:	f002 fec8 	bl	8003a76 <HAL_UART_Transmit>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		 }
		  HAL_Delay(500);
 8000ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cea:	f000 fcc7 	bl	800167c <HAL_Delay>
 8000cee:	e7a9      	b.n	8000c44 <main+0xa4>
	  }else if(state==1){
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <main+0x1b8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d102      	bne.n	8000cfe <main+0x15e>
		  	 updatevalue();
 8000cf8:	f7ff fe14 	bl	8000924 <updatevalue>
 8000cfc:	e7a2      	b.n	8000c44 <main+0xa4>
	  }else if (state==2){
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <main+0x1b8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d19e      	bne.n	8000c44 <main+0xa4>
			if(counter<=120){
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <main+0x1d4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b78      	cmp	r3, #120	; 0x78
 8000d0c:	dc07      	bgt.n	8000d1e <main+0x17e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2120      	movs	r1, #32
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <main+0x1b4>)
 8000d14:	f000 ff84 	bl	8001c20 <HAL_GPIO_WritePin>
				updatevalue();
 8000d18:	f7ff fe04 	bl	8000924 <updatevalue>
 8000d1c:	e792      	b.n	8000c44 <main+0xa4>
			}else{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <main+0x1b4>)
 8000d24:	f000 ff7c 	bl	8001c20 <HAL_GPIO_WritePin>
				state=0;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <main+0x1b8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
				counter=0;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <main+0x1d4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
	  if(state==0){
 8000d34:	e786      	b.n	8000c44 <main+0xa4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000010c 	.word	0x2000010c
 8000d40:	200001c0 	.word	0x200001c0
 8000d44:	08005598 	.word	0x08005598
 8000d48:	080055b0 	.word	0x080055b0
 8000d4c:	2000016b 	.word	0x2000016b
 8000d50:	0800564c 	.word	0x0800564c
 8000d54:	40020800 	.word	0x40020800
 8000d58:	200000a4 	.word	0x200000a4
 8000d5c:	080055c4 	.word	0x080055c4
 8000d60:	2000016c 	.word	0x2000016c
 8000d64:	080055cc 	.word	0x080055cc
 8000d68:	2000025c 	.word	0x2000025c
 8000d6c:	2000017c 	.word	0x2000017c
 8000d70:	20000218 	.word	0x20000218
 8000d74:	200000a8 	.word	0x200000a8
 8000d78:	080055d4 	.word	0x080055d4
 8000d7c:	080055dc 	.word	0x080055dc

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	2230      	movs	r2, #48	; 0x30
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fa06 	bl	80041a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <SystemClock_Config+0xc8>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <SystemClock_Config+0xc8>)
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <SystemClock_Config+0xc8>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <SystemClock_Config+0xcc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <SystemClock_Config+0xcc>)
 8000dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <SystemClock_Config+0xcc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de4:	2310      	movs	r3, #16
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000df0:	2308      	movs	r3, #8
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000df4:	2332      	movs	r3, #50	; 0x32
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 feff 	bl	8002c08 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e10:	f000 f96c 	bl	80010ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 f961 	bl	80030f8 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e3c:	f000 f956 	bl	80010ec <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <MX_I2C1_Init+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_I2C1_Init+0x58>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_I2C1_Init+0x50>)
 8000e8e:	f000 fefb 	bl	8001c88 <HAL_I2C_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e98:	f000 f928 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000b8 	.word	0x200000b8
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	000186a0 	.word	0x000186a0

08000eac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_TIM10_Init+0x40>)
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <MX_TIM10_Init+0x44>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50000-1;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_TIM10_Init+0x40>)
 8000eb8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ebc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_TIM10_Init+0x40>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_TIM10_Init+0x40>)
 8000ec6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_TIM10_Init+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_TIM10_Init+0x40>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_TIM10_Init+0x40>)
 8000eda:	f002 fb09 	bl	80034f0 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000ee4:	f000 f902 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000010c 	.word	0x2000010c
 8000ef0:	40014400 	.word	0x40014400

08000ef4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_TIM11_Init+0x44>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 5000-1;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000f00:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f04:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000f0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f12:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_TIM11_Init+0x40>)
 8000f22:	f002 fae5 	bl	80034f0 <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000f2c:	f000 f8de 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200001c0 	.word	0x200001c0
 8000f38:	40014800 	.word	0x40014800

08000f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f002 fd32 	bl	80039dc <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f8b5 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000017c 	.word	0x2000017c
 8000f8c:	40011000 	.word	0x40011000

08000f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_USART2_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f002 fd08 	bl	80039dc <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f88b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000218 	.word	0x20000218
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a37      	ldr	r2, [pc, #220]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_GPIO_Init+0xfc>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <MX_GPIO_Init+0xfc>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <MX_GPIO_Init+0xfc>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_GPIO_Init+0xfc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	481d      	ldr	r0, [pc, #116]	; (80010e4 <MX_GPIO_Init+0x100>)
 8001070:	f000 fdd6 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <MX_GPIO_Init+0x104>)
 800107c:	f000 fdd0 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001086:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_GPIO_Init+0x104>)
 8001098:	f000 fc26 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109c:	2320      	movs	r3, #32
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_GPIO_Init+0x100>)
 80010b4:	f000 fc18 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80010b8:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x104>)
 80010d2:	f000 fc09 	bl	80018e8 <HAL_GPIO_Init>

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020800 	.word	0x40020800

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001136:	2007      	movs	r0, #7
 8001138:	f000 fb94 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_I2C_MspInit+0x84>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12b      	bne.n	80011c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001186:	23c0      	movs	r3, #192	; 0xc0
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118a:	2312      	movs	r3, #18
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001196:	2304      	movs	r3, #4
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <HAL_I2C_MspInit+0x8c>)
 80011a2:	f000 fba1 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40005400 	.word	0x40005400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_TIM_Base_MspInit+0x80>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d116      	bne.n	8001218 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_TIM_Base_MspInit+0x84>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_TIM_Base_MspInit+0x84>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_TIM_Base_MspInit+0x84>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2019      	movs	r0, #25
 800120c:	f000 fb35 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001210:	2019      	movs	r0, #25
 8001212:	f000 fb4e 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001216:	e01a      	b.n	800124e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_TIM_Base_MspInit+0x88>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d115      	bne.n	800124e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_TIM_Base_MspInit+0x84>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_TIM_Base_MspInit+0x84>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_TIM_Base_MspInit+0x84>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201a      	movs	r0, #26
 8001244:	f000 fb19 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001248:	201a      	movs	r0, #26
 800124a:	f000 fb32 	bl	80018b2 <HAL_NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40014400 	.word	0x40014400
 800125c:	40023800 	.word	0x40023800
 8001260:	40014800 	.word	0x40014800

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a32      	ldr	r2, [pc, #200]	; (800134c <HAL_UART_MspInit+0xe8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12d      	bne.n	80012e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_UART_MspInit+0xec>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a29      	ldr	r2, [pc, #164]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d0:	2307      	movs	r3, #7
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_UART_MspInit+0xf0>)
 80012dc:	f000 fb04 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e0:	e030      	b.n	8001344 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <HAL_UART_MspInit+0xf4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d12b      	bne.n	8001344 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a16      	ldr	r2, [pc, #88]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_UART_MspInit+0xec>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_UART_MspInit+0xec>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_UART_MspInit+0xec>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_UART_MspInit+0xec>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001324:	230c      	movs	r3, #12
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001334:	2307      	movs	r3, #7
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_UART_MspInit+0xf0>)
 8001340:	f000 fad2 	bl	80018e8 <HAL_GPIO_Init>
}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011000 	.word	0x40011000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40004400 	.word	0x40004400

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f948 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013b6:	f002 f94d 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000010c 	.word	0x2000010c

080013c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80013ca:	f002 f943 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001c0 	.word	0x200001c0

080013d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e00a      	b.n	8001400 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ea:	f3af 8000 	nop.w
 80013ee:	4601      	mov	r1, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf0      	blt.n	80013ea <_read+0x12>
	}

return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e009      	b.n	8001438 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf1      	blt.n	8001424 <_write+0x12>
	}
	return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_close>:

int _close(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001472:	605a      	str	r2, [r3, #4]
	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_isatty>:

int _isatty(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	return 1;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f002 fe32 	bl	800414c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20020000 	.word	0x20020000
 8001514:	00000400 	.word	0x00000400
 8001518:	200000ac 	.word	0x200000ac
 800151c:	20000278 	.word	0x20000278

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800156e:	f7ff ffd7 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f002 fdf1 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fb13 	bl	8000ba0 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001588:	08005748 	.word	0x08005748
  ldr r2, =_sbss
 800158c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001590:	20000278 	.word	0x20000278

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f94f 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fd94 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f967 	bl	80018ce <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f92f 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000008 	.word	0x20000008
 8001634:	20000010 	.word	0x20000010
 8001638:	2000000c 	.word	0x2000000c

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000010 	.word	0x20000010
 8001660:	20000264 	.word	0x20000264

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000264 	.word	0x20000264

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000010 	.word	0x20000010

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e159      	b.n	8001bb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8148 	bne.w	8001bb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a2 	beq.w	8001bb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a49      	ldr	r2, [pc, #292]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x202>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a48      	ldr	r2, [pc, #288]	; (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x1fe>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <HAL_GPIO_Init+0x2fc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x1f6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a45      	ldr	r2, [pc, #276]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x1f2>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ada:	2307      	movs	r3, #7
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x204>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4935      	ldr	r1, [pc, #212]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2e:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b58:	4a24      	ldr	r2, [pc, #144]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_GPIO_Init+0x304>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f aea2 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	400b      	ands	r3, r1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e12b      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fa4a 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cec:	f001 fbd8 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a81      	ldr	r2, [pc, #516]	; (8001efc <HAL_I2C_Init+0x274>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d807      	bhi.n	8001d0c <HAL_I2C_Init+0x84>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_I2C_Init+0x278>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e006      	b.n	8001d1a <HAL_I2C_Init+0x92>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a7d      	ldr	r2, [pc, #500]	; (8001f04 <HAL_I2C_Init+0x27c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0e7      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <HAL_I2C_Init+0x280>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d802      	bhi.n	8001d5c <HAL_I2C_Init+0xd4>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	e009      	b.n	8001d70 <HAL_I2C_Init+0xe8>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_I2C_Init+0x284>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	3301      	adds	r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	495c      	ldr	r1, [pc, #368]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d819      	bhi.n	8001dc4 <HAL_I2C_Init+0x13c>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001da4:	400b      	ands	r3, r1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_I2C_Init+0x138>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	e051      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e04f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_I2C_Init+0x168>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e012      	b.n	8001e16 <HAL_I2C_Init+0x18e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x196>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e022      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <HAL_I2C_Init+0x1bc>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e58      	subs	r0, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6911      	ldr	r1, [r2, #16]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	001e847f 	.word	0x001e847f
 8001f04:	003d08ff 	.word	0x003d08ff
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	460b      	mov	r3, r1
 8001f24:	813b      	strh	r3, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f2a:	f7ff fb9b 	bl	8001664 <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	f040 80d9 	bne.w	80020f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2319      	movs	r3, #25
 8001f44:	2201      	movs	r2, #1
 8001f46:	496d      	ldr	r1, [pc, #436]	; (80020fc <HAL_I2C_Mem_Write+0x1ec>)
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fc7f 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0cc      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Mem_Write+0x56>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0c5      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d007      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2221      	movs	r2, #33	; 0x21
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2240      	movs	r2, #64	; 0x40
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a4d      	ldr	r2, [pc, #308]	; (8002100 <HAL_I2C_Mem_Write+0x1f0>)
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fce:	88f8      	ldrh	r0, [r7, #6]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fab6 	bl	8002550 <I2C_RequestMemoryWrite>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d052      	beq.n	8002090 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e081      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fd00 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b04      	cmp	r3, #4
 8002004:	d107      	bne.n	8002016 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_I2C_Mem_Write+0x180>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1aa      	bne.n	8001fee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fcec 	bl	8002a7a <I2C_WaitOnBTFFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d107      	bne.n	80020c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e016      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	00100002 	.word	0x00100002
 8002100:	ffff0000 	.word	0xffff0000

08002104 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4603      	mov	r3, r0
 8002114:	817b      	strh	r3, [r7, #10]
 8002116:	460b      	mov	r3, r1
 8002118:	813b      	strh	r3, [r7, #8]
 800211a:	4613      	mov	r3, r2
 800211c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800211e:	f7ff faa1 	bl	8001664 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	f040 8208 	bne.w	8002542 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2319      	movs	r3, #25
 8002138:	2201      	movs	r2, #1
 800213a:	497b      	ldr	r1, [pc, #492]	; (8002328 <HAL_I2C_Mem_Read+0x224>)
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fb85 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
 800214a:	e1fb      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_I2C_Mem_Read+0x56>
 8002156:	2302      	movs	r3, #2
 8002158:	e1f4      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d007      	beq.n	8002180 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2222      	movs	r2, #34	; 0x22
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a5b      	ldr	r2, [pc, #364]	; (800232c <HAL_I2C_Mem_Read+0x228>)
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021c2:	88f8      	ldrh	r0, [r7, #6]
 80021c4:	893a      	ldrh	r2, [r7, #8]
 80021c6:	8979      	ldrh	r1, [r7, #10]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4603      	mov	r3, r0
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa52 	bl	800267c <I2C_RequestMemoryRead>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1b0      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	623b      	str	r3, [r7, #32]
 80021fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e184      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b01      	cmp	r3, #1
 8002218:	d11b      	bne.n	8002252 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e164      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	2b02      	cmp	r3, #2
 8002258:	d11b      	bne.n	8002292 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002268:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	e144      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022a8:	e138      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	f200 80f1 	bhi.w	8002496 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d123      	bne.n	8002304 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fc1b 	bl	8002afc <I2C_WaitOnRXNEFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e139      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002302:	e10b      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	2b02      	cmp	r3, #2
 800230a:	d14e      	bne.n	80023aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002312:	2200      	movs	r2, #0
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <HAL_I2C_Mem_Read+0x22c>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fa98 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e10e      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
 8002326:	bf00      	nop
 8002328:	00100002 	.word	0x00100002
 800232c:	ffff0000 	.word	0xffff0000
 8002330:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023a8:	e0b8      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	2200      	movs	r2, #0
 80023b2:	4966      	ldr	r1, [pc, #408]	; (800254c <HAL_I2C_Mem_Read+0x448>)
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fa49 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0bf      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	2200      	movs	r2, #0
 800240e:	494f      	ldr	r1, [pc, #316]	; (800254c <HAL_I2C_Mem_Read+0x448>)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa1b 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e091      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002494:	e042      	b.n	800251c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fb2e 	bl	8002afc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e04c      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d118      	bne.n	800251c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f aec2 	bne.w	80022aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	00010004 	.word	0x00010004

08002550 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	817b      	strh	r3, [r7, #10]
 8002562:	460b      	mov	r3, r1
 8002564:	813b      	strh	r3, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2200      	movs	r2, #0
 8002582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f960 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a0:	d103      	bne.n	80025aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e05f      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	492d      	ldr	r1, [pc, #180]	; (8002678 <I2C_RequestMemoryWrite+0x128>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f998 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e04c      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fa02 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e02b      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261c:	893b      	ldrh	r3, [r7, #8]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e021      	b.n	800266c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f9dc 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d107      	bne.n	800265e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e005      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	00010002 	.word	0x00010002

0800267c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	4608      	mov	r0, r1
 8002686:	4611      	mov	r1, r2
 8002688:	461a      	mov	r2, r3
 800268a:	4603      	mov	r3, r0
 800268c:	817b      	strh	r3, [r7, #10]
 800268e:	460b      	mov	r3, r1
 8002690:	813b      	strh	r3, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2200      	movs	r2, #0
 80026be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f8c2 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026dc:	d103      	bne.n	80026e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0aa      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	4952      	ldr	r1, [pc, #328]	; (8002848 <I2C_RequestMemoryRead+0x1cc>)
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f8fa 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e097      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f964 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b04      	cmp	r3, #4
 800273c:	d107      	bne.n	800274e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e076      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002758:	893b      	ldrh	r3, [r7, #8]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	611a      	str	r2, [r3, #16]
 8002762:	e021      	b.n	80027a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	b29b      	uxth	r3, r3
 800276a:	b2da      	uxtb	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f93e 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b04      	cmp	r3, #4
 8002788:	d107      	bne.n	800279a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e050      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800279e:	893b      	ldrh	r3, [r7, #8]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	6a39      	ldr	r1, [r7, #32]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f923 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d107      	bne.n	80027d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e035      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f82b 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d103      	bne.n	8002814 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e013      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	6a3a      	ldr	r2, [r7, #32]
 800282c:	4906      	ldr	r1, [pc, #24]	; (8002848 <I2C_RequestMemoryRead+0x1cc>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f863 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00010002 	.word	0x00010002

0800284c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	e025      	b.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d021      	beq.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7fe fefd 	bl	8001664 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d116      	bne.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e023      	b.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10d      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	e00c      	b.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d0b6      	beq.n	800285e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002908:	e051      	b.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d123      	bne.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002932:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e046      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d021      	beq.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe fe7b 	bl	8001664 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e020      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10c      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e00b      	b.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d18d      	bne.n	800290a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a04:	e02d      	b.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f8ce 	bl	8002ba8 <I2C_IsAcknowledgeFailed>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e02d      	b.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d021      	beq.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe fe21 	bl	8001664 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e007      	b.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d1ca      	bne.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a86:	e02d      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f88d 	bl	8002ba8 <I2C_IsAcknowledgeFailed>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e02d      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d021      	beq.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fde0 	bl	8001664 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d1ca      	bne.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b08:	e042      	b.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d119      	bne.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0210 	mvn.w	r2, #16
 8002b20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e029      	b.n	8002ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4c:	f7fe fd8a 	bl	8001664 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d302      	bcc.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d1b5      	bne.n	8002b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d11b      	bne.n	8002bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e264      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d075      	beq.n	8002d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c26:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d112      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b9d      	ldr	r3, [pc, #628]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4a:	d10b      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	4b99      	ldr	r3, [pc, #612]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x108>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d157      	bne.n	8002d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e23f      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x74>
 8002c6e:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a90      	ldr	r2, [pc, #576]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xb0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x98>
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a8a      	ldr	r2, [pc, #552]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a87      	ldr	r2, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xb0>
 8002ca0:	4b84      	ldr	r3, [pc, #528]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a83      	ldr	r2, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a80      	ldr	r2, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fcd0 	bl	8001664 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fccc 	bl	8001664 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e204      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xc0>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fcbc 	bl	8001664 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fcb8 	bl	8001664 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1f0      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xe8>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x152>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1c4      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4952      	ldr	r1, [pc, #328]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <HAL_RCC_OscConfig+0x2b0>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fc71 	bl	8001664 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fc6d 	bl	8001664 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1a5      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4940      	ldr	r1, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_OscConfig+0x2b0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fc50 	bl	8001664 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fc4c 	bl	8001664 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e184      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d030      	beq.n	8002e54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x2b4>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fc30 	bl	8001664 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fc2c 	bl	8001664 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e164      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x200>
 8002e26:	e015      	b.n	8002e54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x2b4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fc19 	bl	8001664 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fc15 	bl	8001664 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e14d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a0 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d121      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fbdb 	bl	8001664 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2ce>
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470000 	.word	0x42470000
 8002ebc:	42470e80 	.word	0x42470e80
 8002ec0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec4:	f7fe fbce 	bl	8001664 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e106      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x4e4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2f0>
 8002eea:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a80      	ldr	r2, [pc, #512]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x312>
 8002f00:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a7a      	ldr	r2, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x32a>
 8002f1a:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a74      	ldr	r2, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a71      	ldr	r2, [pc, #452]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fb93 	bl	8001664 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fb8f 	bl	8001664 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0c5      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x33a>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe fb7d 	bl	8001664 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fb79 	bl	8001664 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0af      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a55      	ldr	r2, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 809b 	beq.w	80030e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d05c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d141      	bne.n	8003044 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x4ec>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fb4d 	bl	8001664 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fb49 	bl	8001664 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e081      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x4ec>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fb22 	bl	8001664 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fb1e 	bl	8001664 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e056      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x41c>
 8003042:	e04e      	b.n	80030e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fb0b 	bl	8001664 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fb07 	bl	8001664 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e03f      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x44a>
 8003070:	e037      	b.n	80030e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e032      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d028      	beq.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d121      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d11a      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40007000 	.word	0x40007000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470060 	.word	0x42470060

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0cc      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d90c      	bls.n	8003134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800316e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d044      	beq.n	8003218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d119      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e067      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fa3c 	bl	8001664 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe fa38 	bl	8001664 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e04f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 020c 	and.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d1eb      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d20c      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4602      	mov	r2, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	490a      	ldr	r1, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	5ccb      	ldrb	r3, [r1, r3]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f99c 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	08005688 	.word	0x08005688
 80032bc:	20000008 	.word	0x20000008
 80032c0:	2000000c 	.word	0x2000000c

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032dc:	4b67      	ldr	r3, [pc, #412]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d00d      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x40>
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	f200 80bd 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x34>
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x3a>
 80032f6:	e0b7      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032fa:	60bb      	str	r3, [r7, #8]
       break;
 80032fc:	e0b7      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032fe:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003300:	60bb      	str	r3, [r7, #8]
      break;
 8003302:	e0b4      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003304:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800330c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800330e:	4b5b      	ldr	r3, [pc, #364]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d04d      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	461a      	mov	r2, r3
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	ea02 0800 	and.w	r8, r2, r0
 8003332:	ea03 0901 	and.w	r9, r3, r1
 8003336:	4640      	mov	r0, r8
 8003338:	4649      	mov	r1, r9
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	014b      	lsls	r3, r1, #5
 8003344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003348:	0142      	lsls	r2, r0, #5
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	ebb0 0008 	subs.w	r0, r0, r8
 8003352:	eb61 0109 	sbc.w	r1, r1, r9
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003364:	0182      	lsls	r2, r0, #6
 8003366:	1a12      	subs	r2, r2, r0
 8003368:	eb63 0301 	sbc.w	r3, r3, r1
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	00d9      	lsls	r1, r3, #3
 8003376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800337a:	00d0      	lsls	r0, r2, #3
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	eb12 0208 	adds.w	r2, r2, r8
 8003384:	eb43 0309 	adc.w	r3, r3, r9
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0259      	lsls	r1, r3, #9
 8003392:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003396:	0250      	lsls	r0, r2, #9
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fc ff6a 	bl	8000280 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e04a      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b31      	ldr	r3, [pc, #196]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	ea02 0400 	and.w	r4, r2, r0
 80033ce:	ea03 0501 	and.w	r5, r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	014b      	lsls	r3, r1, #5
 80033e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e4:	0142      	lsls	r2, r0, #5
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	1b00      	subs	r0, r0, r4
 80033ec:	eb61 0105 	sbc.w	r1, r1, r5
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	018b      	lsls	r3, r1, #6
 80033fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033fe:	0182      	lsls	r2, r0, #6
 8003400:	1a12      	subs	r2, r2, r0
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	00d9      	lsls	r1, r3, #3
 8003410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003414:	00d0      	lsls	r0, r2, #3
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	1912      	adds	r2, r2, r4
 800341c:	eb45 0303 	adc.w	r3, r5, r3
 8003420:	f04f 0000 	mov.w	r0, #0
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	0299      	lsls	r1, r3, #10
 800342a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800342e:	0290      	lsls	r0, r2, #10
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	461a      	mov	r2, r3
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f7fc ff1e 	bl	8000280 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	60bb      	str	r3, [r7, #8]
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800346a:	60bb      	str	r3, [r7, #8]
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	68bb      	ldr	r3, [r7, #8]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000008 	.word	0x20000008

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08005698 	.word	0x08005698

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffdc 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08005698 	.word	0x08005698

080034f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e041      	b.n	8003586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fe5e 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 f9c0 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d001      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e044      	b.n	8003632 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_TIM_Base_Start_IT+0xb0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d018      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x6c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d013      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x6c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1a      	ldr	r2, [pc, #104]	; (8003644 <HAL_TIM_Base_Start_IT+0xb4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x6c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_TIM_Base_Start_IT+0xb8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x6c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_TIM_Base_Start_IT+0xbc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x6c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_TIM_Base_Start_IT+0xc0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d010      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	e007      	b.n	8003630 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40000c00 	.word	0x40000c00
 8003650:	40014000 	.word	0x40014000

08003654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0202 	mvn.w	r2, #2
 8003680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8ee 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8e0 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8f1 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0204 	mvn.w	r2, #4
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8c4 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8b6 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8c7 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f89a 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f88c 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f89d 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b10      	cmp	r3, #16
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0210 	mvn.w	r2, #16
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2208      	movs	r2, #8
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f870 	bl	8003878 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f862 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f873 	bl	800388c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc ff80 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8e2 	bl	80039c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d10e      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d107      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f838 	bl	80038a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d10e      	bne.n	800385c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b20      	cmp	r3, #32
 800384a:	d107      	bne.n	800385c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0220 	mvn.w	r2, #32
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8ac 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a34      	ldr	r2, [pc, #208]	; (8003998 <TIM_Base_SetConfig+0xe4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00f      	beq.n	80038ec <TIM_Base_SetConfig+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d00b      	beq.n	80038ec <TIM_Base_SetConfig+0x38>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a31      	ldr	r2, [pc, #196]	; (800399c <TIM_Base_SetConfig+0xe8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <TIM_Base_SetConfig+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a30      	ldr	r2, [pc, #192]	; (80039a0 <TIM_Base_SetConfig+0xec>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <TIM_Base_SetConfig+0x38>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <TIM_Base_SetConfig+0xf0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d108      	bne.n	80038fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a25      	ldr	r2, [pc, #148]	; (8003998 <TIM_Base_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01b      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d017      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a22      	ldr	r2, [pc, #136]	; (800399c <TIM_Base_SetConfig+0xe8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a21      	ldr	r2, [pc, #132]	; (80039a0 <TIM_Base_SetConfig+0xec>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00f      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <TIM_Base_SetConfig+0xf0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00b      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <TIM_Base_SetConfig+0xf4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <TIM_Base_SetConfig+0xf8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1d      	ldr	r2, [pc, #116]	; (80039b0 <TIM_Base_SetConfig+0xfc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d108      	bne.n	8003950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <TIM_Base_SetConfig+0xe4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	615a      	str	r2, [r3, #20]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e03f      	b.n	8003a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fc2e 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9cb 	bl	8003dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08a      	sub	sp, #40	; 0x28
 8003a7a:	af02      	add	r7, sp, #8
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d17c      	bne.n	8003b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_Transmit+0x2c>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e075      	b.n	8003b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x3e>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e06e      	b.n	8003b92 <HAL_UART_Transmit+0x11c>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2221      	movs	r2, #33	; 0x21
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aca:	f7fd fdcb 	bl	8001664 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae4:	d108      	bne.n	8003af8 <HAL_UART_Transmit+0x82>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e003      	b.n	8003b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b08:	e02a      	b.n	8003b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f8e2 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e036      	b.n	8003b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e007      	b.n	8003b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1cf      	bne.n	8003b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f8b2 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e006      	b.n	8003b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	; 0x28
 8003b9e:	af02      	add	r7, sp, #8
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	f040 808c 	bne.w	8003cd4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_UART_Receive+0x2e>
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e084      	b.n	8003cd6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Receive+0x40>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e07d      	b.n	8003cd6 <HAL_UART_Receive+0x13c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2222      	movs	r2, #34	; 0x22
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd fd35 	bl	8001664 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	88fa      	ldrh	r2, [r7, #6]
 8003c06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c10:	d108      	bne.n	8003c24 <HAL_UART_Receive+0x8a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	e003      	b.n	8003c2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c34:	e043      	b.n	8003cbe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2120      	movs	r1, #32
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f84c 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e042      	b.n	8003cd6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e01f      	b.n	8003cb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d007      	beq.n	8003c8a <HAL_UART_Receive+0xf0>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_UART_Receive+0xfe>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e008      	b.n	8003caa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1b6      	bne.n	8003c36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b090      	sub	sp, #64	; 0x40
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cee:	e050      	b.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d04c      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfe:	f7fd fcb1 	bl	8001664 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d241      	bcs.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d2e:	637a      	str	r2, [r7, #52]	; 0x34
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3314      	adds	r3, #20
 8003d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	613b      	str	r3, [r7, #16]
   return(result);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d62:	623a      	str	r2, [r7, #32]
 8003d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	69f9      	ldr	r1, [r7, #28]
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e5      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e00f      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d09f      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3740      	adds	r7, #64	; 0x40
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc0:	b09f      	sub	sp, #124	; 0x7c
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	68d9      	ldr	r1, [r3, #12]
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	ea40 0301 	orr.w	r3, r0, r1
 8003ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e00:	f021 010c 	bic.w	r1, r1, #12
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	6999      	ldr	r1, [r3, #24]
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	ea40 0301 	orr.w	r3, r0, r1
 8003e24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4bc5      	ldr	r3, [pc, #788]	; (8004140 <UART_SetConfig+0x384>)
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d004      	beq.n	8003e3a <UART_SetConfig+0x7e>
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4bc3      	ldr	r3, [pc, #780]	; (8004144 <UART_SetConfig+0x388>)
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d103      	bne.n	8003e42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e3a:	f7ff fb45 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8003e3e:	6778      	str	r0, [r7, #116]	; 0x74
 8003e40:	e002      	b.n	8003e48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e42:	f7ff fb2d 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003e46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	f040 80b6 	bne.w	8003fc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e56:	461c      	mov	r4, r3
 8003e58:	f04f 0500 	mov.w	r5, #0
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	6439      	str	r1, [r7, #64]	; 0x40
 8003e64:	415b      	adcs	r3, r3
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44
 8003e68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e6c:	1912      	adds	r2, r2, r4
 8003e6e:	eb45 0303 	adc.w	r3, r5, r3
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	00d9      	lsls	r1, r3, #3
 8003e7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e80:	00d0      	lsls	r0, r2, #3
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	1911      	adds	r1, r2, r4
 8003e88:	6639      	str	r1, [r7, #96]	; 0x60
 8003e8a:	416b      	adcs	r3, r5
 8003e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ea4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ea8:	f7fc f9ea 	bl	8000280 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4ba5      	ldr	r3, [pc, #660]	; (8004148 <UART_SetConfig+0x38c>)
 8003eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	011e      	lsls	r6, r3, #4
 8003eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebc:	461c      	mov	r4, r3
 8003ebe:	f04f 0500 	mov.w	r5, #0
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ece:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ed2:	1912      	adds	r2, r2, r4
 8003ed4:	eb45 0303 	adc.w	r3, r5, r3
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	00d9      	lsls	r1, r3, #3
 8003ee2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee6:	00d0      	lsls	r0, r2, #3
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	1911      	adds	r1, r2, r4
 8003eee:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ef0:	416b      	adcs	r3, r5
 8003ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f02:	415b      	adcs	r3, r3
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f0e:	f7fc f9b7 	bl	8000280 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4b8c      	ldr	r3, [pc, #560]	; (8004148 <UART_SetConfig+0x38c>)
 8003f18:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	2164      	movs	r1, #100	; 0x64
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	3332      	adds	r3, #50	; 0x32
 8003f2a:	4a87      	ldr	r2, [pc, #540]	; (8004148 <UART_SetConfig+0x38c>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f38:	441e      	add	r6, r3
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	1894      	adds	r4, r2, r2
 8003f48:	623c      	str	r4, [r7, #32]
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f52:	1812      	adds	r2, r2, r0
 8003f54:	eb41 0303 	adc.w	r3, r1, r3
 8003f58:	f04f 0400 	mov.w	r4, #0
 8003f5c:	f04f 0500 	mov.w	r5, #0
 8003f60:	00dd      	lsls	r5, r3, #3
 8003f62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f66:	00d4      	lsls	r4, r2, #3
 8003f68:	4622      	mov	r2, r4
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	1814      	adds	r4, r2, r0
 8003f6e:	653c      	str	r4, [r7, #80]	; 0x50
 8003f70:	414b      	adcs	r3, r1
 8003f72:	657b      	str	r3, [r7, #84]	; 0x54
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	61b9      	str	r1, [r7, #24]
 8003f82:	415b      	adcs	r3, r3
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f8e:	f7fc f977 	bl	8000280 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <UART_SetConfig+0x38c>)
 8003f98:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2164      	movs	r1, #100	; 0x64
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	3332      	adds	r3, #50	; 0x32
 8003faa:	4a67      	ldr	r2, [pc, #412]	; (8004148 <UART_SetConfig+0x38c>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 0207 	and.w	r2, r3, #7
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4432      	add	r2, r6
 8003fbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fbe:	e0b9      	b.n	8004134 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc2:	461c      	mov	r4, r3
 8003fc4:	f04f 0500 	mov.w	r5, #0
 8003fc8:	4622      	mov	r2, r4
 8003fca:	462b      	mov	r3, r5
 8003fcc:	1891      	adds	r1, r2, r2
 8003fce:	6139      	str	r1, [r7, #16]
 8003fd0:	415b      	adcs	r3, r3
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fd8:	1912      	adds	r2, r2, r4
 8003fda:	eb45 0303 	adc.w	r3, r5, r3
 8003fde:	f04f 0000 	mov.w	r0, #0
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	00d9      	lsls	r1, r3, #3
 8003fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fec:	00d0      	lsls	r0, r2, #3
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	eb12 0804 	adds.w	r8, r2, r4
 8003ff6:	eb43 0905 	adc.w	r9, r3, r5
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f04f 0100 	mov.w	r1, #0
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	008b      	lsls	r3, r1, #2
 800400e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004012:	0082      	lsls	r2, r0, #2
 8004014:	4640      	mov	r0, r8
 8004016:	4649      	mov	r1, r9
 8004018:	f7fc f932 	bl	8000280 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4b49      	ldr	r3, [pc, #292]	; (8004148 <UART_SetConfig+0x38c>)
 8004022:	fba3 2302 	umull	r2, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	011e      	lsls	r6, r3, #4
 800402a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402c:	4618      	mov	r0, r3
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	1894      	adds	r4, r2, r2
 8004038:	60bc      	str	r4, [r7, #8]
 800403a:	415b      	adcs	r3, r3
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004042:	1812      	adds	r2, r2, r0
 8004044:	eb41 0303 	adc.w	r3, r1, r3
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	f04f 0500 	mov.w	r5, #0
 8004050:	00dd      	lsls	r5, r3, #3
 8004052:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004056:	00d4      	lsls	r4, r2, #3
 8004058:	4622      	mov	r2, r4
 800405a:	462b      	mov	r3, r5
 800405c:	1814      	adds	r4, r2, r0
 800405e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004060:	414b      	adcs	r3, r1
 8004062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	008b      	lsls	r3, r1, #2
 8004078:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800407c:	0082      	lsls	r2, r0, #2
 800407e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004082:	f7fc f8fd 	bl	8000280 <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <UART_SetConfig+0x38c>)
 800408c:	fba3 1302 	umull	r1, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	2164      	movs	r1, #100	; 0x64
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	3332      	adds	r3, #50	; 0x32
 800409e:	4a2a      	ldr	r2, [pc, #168]	; (8004148 <UART_SetConfig+0x38c>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040aa:	441e      	add	r6, r3
 80040ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ae:	4618      	mov	r0, r3
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	1894      	adds	r4, r2, r2
 80040ba:	603c      	str	r4, [r7, #0]
 80040bc:	415b      	adcs	r3, r3
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c4:	1812      	adds	r2, r2, r0
 80040c6:	eb41 0303 	adc.w	r3, r1, r3
 80040ca:	f04f 0400 	mov.w	r4, #0
 80040ce:	f04f 0500 	mov.w	r5, #0
 80040d2:	00dd      	lsls	r5, r3, #3
 80040d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040d8:	00d4      	lsls	r4, r2, #3
 80040da:	4622      	mov	r2, r4
 80040dc:	462b      	mov	r3, r5
 80040de:	eb12 0a00 	adds.w	sl, r2, r0
 80040e2:	eb43 0b01 	adc.w	fp, r3, r1
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040fe:	0082      	lsls	r2, r0, #2
 8004100:	4650      	mov	r0, sl
 8004102:	4659      	mov	r1, fp
 8004104:	f7fc f8bc 	bl	8000280 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <UART_SetConfig+0x38c>)
 800410e:	fba3 1302 	umull	r1, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2164      	movs	r1, #100	; 0x64
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	3332      	adds	r3, #50	; 0x32
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <UART_SetConfig+0x38c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4432      	add	r2, r6
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	377c      	adds	r7, #124	; 0x7c
 8004138:	46bd      	mov	sp, r7
 800413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413e:	bf00      	nop
 8004140:	40011000 	.word	0x40011000
 8004144:	40011400 	.word	0x40011400
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <__errno>:
 800414c:	4b01      	ldr	r3, [pc, #4]	; (8004154 <__errno+0x8>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000014 	.word	0x20000014

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4d0d      	ldr	r5, [pc, #52]	; (8004190 <__libc_init_array+0x38>)
 800415c:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <__libc_init_array+0x3c>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	2600      	movs	r6, #0
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	4d0b      	ldr	r5, [pc, #44]	; (8004198 <__libc_init_array+0x40>)
 800416a:	4c0c      	ldr	r4, [pc, #48]	; (800419c <__libc_init_array+0x44>)
 800416c:	f001 f9be 	bl	80054ec <_init>
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	2600      	movs	r6, #0
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08005740 	.word	0x08005740
 8004194:	08005740 	.word	0x08005740
 8004198:	08005740 	.word	0x08005740
 800419c:	08005744 	.word	0x08005744

080041a0 <memset>:
 80041a0:	4402      	add	r2, r0
 80041a2:	4603      	mov	r3, r0
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d100      	bne.n	80041aa <memset+0xa>
 80041a8:	4770      	bx	lr
 80041aa:	f803 1b01 	strb.w	r1, [r3], #1
 80041ae:	e7f9      	b.n	80041a4 <memset+0x4>

080041b0 <iprintf>:
 80041b0:	b40f      	push	{r0, r1, r2, r3}
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <iprintf+0x2c>)
 80041b4:	b513      	push	{r0, r1, r4, lr}
 80041b6:	681c      	ldr	r4, [r3, #0]
 80041b8:	b124      	cbz	r4, 80041c4 <iprintf+0x14>
 80041ba:	69a3      	ldr	r3, [r4, #24]
 80041bc:	b913      	cbnz	r3, 80041c4 <iprintf+0x14>
 80041be:	4620      	mov	r0, r4
 80041c0:	f000 fa7e 	bl	80046c0 <__sinit>
 80041c4:	ab05      	add	r3, sp, #20
 80041c6:	9a04      	ldr	r2, [sp, #16]
 80041c8:	68a1      	ldr	r1, [r4, #8]
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	4620      	mov	r0, r4
 80041ce:	f000 fdab 	bl	8004d28 <_vfiprintf_r>
 80041d2:	b002      	add	sp, #8
 80041d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d8:	b004      	add	sp, #16
 80041da:	4770      	bx	lr
 80041dc:	20000014 	.word	0x20000014

080041e0 <_puts_r>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	460e      	mov	r6, r1
 80041e4:	4605      	mov	r5, r0
 80041e6:	b118      	cbz	r0, 80041f0 <_puts_r+0x10>
 80041e8:	6983      	ldr	r3, [r0, #24]
 80041ea:	b90b      	cbnz	r3, 80041f0 <_puts_r+0x10>
 80041ec:	f000 fa68 	bl	80046c0 <__sinit>
 80041f0:	69ab      	ldr	r3, [r5, #24]
 80041f2:	68ac      	ldr	r4, [r5, #8]
 80041f4:	b913      	cbnz	r3, 80041fc <_puts_r+0x1c>
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fa62 	bl	80046c0 <__sinit>
 80041fc:	4b2c      	ldr	r3, [pc, #176]	; (80042b0 <_puts_r+0xd0>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	d120      	bne.n	8004244 <_puts_r+0x64>
 8004202:	686c      	ldr	r4, [r5, #4]
 8004204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004206:	07db      	lsls	r3, r3, #31
 8004208:	d405      	bmi.n	8004216 <_puts_r+0x36>
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	0598      	lsls	r0, r3, #22
 800420e:	d402      	bmi.n	8004216 <_puts_r+0x36>
 8004210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004212:	f000 faf3 	bl	80047fc <__retarget_lock_acquire_recursive>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	0719      	lsls	r1, r3, #28
 800421a:	d51d      	bpl.n	8004258 <_puts_r+0x78>
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	b1db      	cbz	r3, 8004258 <_puts_r+0x78>
 8004220:	3e01      	subs	r6, #1
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004228:	3b01      	subs	r3, #1
 800422a:	60a3      	str	r3, [r4, #8]
 800422c:	bb39      	cbnz	r1, 800427e <_puts_r+0x9e>
 800422e:	2b00      	cmp	r3, #0
 8004230:	da38      	bge.n	80042a4 <_puts_r+0xc4>
 8004232:	4622      	mov	r2, r4
 8004234:	210a      	movs	r1, #10
 8004236:	4628      	mov	r0, r5
 8004238:	f000 f868 	bl	800430c <__swbuf_r>
 800423c:	3001      	adds	r0, #1
 800423e:	d011      	beq.n	8004264 <_puts_r+0x84>
 8004240:	250a      	movs	r5, #10
 8004242:	e011      	b.n	8004268 <_puts_r+0x88>
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <_puts_r+0xd4>)
 8004246:	429c      	cmp	r4, r3
 8004248:	d101      	bne.n	800424e <_puts_r+0x6e>
 800424a:	68ac      	ldr	r4, [r5, #8]
 800424c:	e7da      	b.n	8004204 <_puts_r+0x24>
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <_puts_r+0xd8>)
 8004250:	429c      	cmp	r4, r3
 8004252:	bf08      	it	eq
 8004254:	68ec      	ldreq	r4, [r5, #12]
 8004256:	e7d5      	b.n	8004204 <_puts_r+0x24>
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f8a8 	bl	80043b0 <__swsetup_r>
 8004260:	2800      	cmp	r0, #0
 8004262:	d0dd      	beq.n	8004220 <_puts_r+0x40>
 8004264:	f04f 35ff 	mov.w	r5, #4294967295
 8004268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800426a:	07da      	lsls	r2, r3, #31
 800426c:	d405      	bmi.n	800427a <_puts_r+0x9a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	059b      	lsls	r3, r3, #22
 8004272:	d402      	bmi.n	800427a <_puts_r+0x9a>
 8004274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004276:	f000 fac2 	bl	80047fe <__retarget_lock_release_recursive>
 800427a:	4628      	mov	r0, r5
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	2b00      	cmp	r3, #0
 8004280:	da04      	bge.n	800428c <_puts_r+0xac>
 8004282:	69a2      	ldr	r2, [r4, #24]
 8004284:	429a      	cmp	r2, r3
 8004286:	dc06      	bgt.n	8004296 <_puts_r+0xb6>
 8004288:	290a      	cmp	r1, #10
 800428a:	d004      	beq.n	8004296 <_puts_r+0xb6>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	7019      	strb	r1, [r3, #0]
 8004294:	e7c5      	b.n	8004222 <_puts_r+0x42>
 8004296:	4622      	mov	r2, r4
 8004298:	4628      	mov	r0, r5
 800429a:	f000 f837 	bl	800430c <__swbuf_r>
 800429e:	3001      	adds	r0, #1
 80042a0:	d1bf      	bne.n	8004222 <_puts_r+0x42>
 80042a2:	e7df      	b.n	8004264 <_puts_r+0x84>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	250a      	movs	r5, #10
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	6022      	str	r2, [r4, #0]
 80042ac:	701d      	strb	r5, [r3, #0]
 80042ae:	e7db      	b.n	8004268 <_puts_r+0x88>
 80042b0:	080056c4 	.word	0x080056c4
 80042b4:	080056e4 	.word	0x080056e4
 80042b8:	080056a4 	.word	0x080056a4

080042bc <puts>:
 80042bc:	4b02      	ldr	r3, [pc, #8]	; (80042c8 <puts+0xc>)
 80042be:	4601      	mov	r1, r0
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f7ff bf8d 	b.w	80041e0 <_puts_r>
 80042c6:	bf00      	nop
 80042c8:	20000014 	.word	0x20000014

080042cc <siprintf>:
 80042cc:	b40e      	push	{r1, r2, r3}
 80042ce:	b500      	push	{lr}
 80042d0:	b09c      	sub	sp, #112	; 0x70
 80042d2:	ab1d      	add	r3, sp, #116	; 0x74
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	9006      	str	r0, [sp, #24]
 80042d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042dc:	4809      	ldr	r0, [pc, #36]	; (8004304 <siprintf+0x38>)
 80042de:	9107      	str	r1, [sp, #28]
 80042e0:	9104      	str	r1, [sp, #16]
 80042e2:	4909      	ldr	r1, [pc, #36]	; (8004308 <siprintf+0x3c>)
 80042e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e8:	9105      	str	r1, [sp, #20]
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	a902      	add	r1, sp, #8
 80042f0:	f000 fbf0 	bl	8004ad4 <_svfiprintf_r>
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	b01c      	add	sp, #112	; 0x70
 80042fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004300:	b003      	add	sp, #12
 8004302:	4770      	bx	lr
 8004304:	20000014 	.word	0x20000014
 8004308:	ffff0208 	.word	0xffff0208

0800430c <__swbuf_r>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	460e      	mov	r6, r1
 8004310:	4614      	mov	r4, r2
 8004312:	4605      	mov	r5, r0
 8004314:	b118      	cbz	r0, 800431e <__swbuf_r+0x12>
 8004316:	6983      	ldr	r3, [r0, #24]
 8004318:	b90b      	cbnz	r3, 800431e <__swbuf_r+0x12>
 800431a:	f000 f9d1 	bl	80046c0 <__sinit>
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <__swbuf_r+0x98>)
 8004320:	429c      	cmp	r4, r3
 8004322:	d12b      	bne.n	800437c <__swbuf_r+0x70>
 8004324:	686c      	ldr	r4, [r5, #4]
 8004326:	69a3      	ldr	r3, [r4, #24]
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	071a      	lsls	r2, r3, #28
 800432e:	d52f      	bpl.n	8004390 <__swbuf_r+0x84>
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	b36b      	cbz	r3, 8004390 <__swbuf_r+0x84>
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	6963      	ldr	r3, [r4, #20]
 800433c:	b2f6      	uxtb	r6, r6
 800433e:	4283      	cmp	r3, r0
 8004340:	4637      	mov	r7, r6
 8004342:	dc04      	bgt.n	800434e <__swbuf_r+0x42>
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f926 	bl	8004598 <_fflush_r>
 800434c:	bb30      	cbnz	r0, 800439c <__swbuf_r+0x90>
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	3b01      	subs	r3, #1
 8004352:	60a3      	str	r3, [r4, #8]
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	6022      	str	r2, [r4, #0]
 800435a:	701e      	strb	r6, [r3, #0]
 800435c:	6963      	ldr	r3, [r4, #20]
 800435e:	3001      	adds	r0, #1
 8004360:	4283      	cmp	r3, r0
 8004362:	d004      	beq.n	800436e <__swbuf_r+0x62>
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	07db      	lsls	r3, r3, #31
 8004368:	d506      	bpl.n	8004378 <__swbuf_r+0x6c>
 800436a:	2e0a      	cmp	r6, #10
 800436c:	d104      	bne.n	8004378 <__swbuf_r+0x6c>
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f911 	bl	8004598 <_fflush_r>
 8004376:	b988      	cbnz	r0, 800439c <__swbuf_r+0x90>
 8004378:	4638      	mov	r0, r7
 800437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <__swbuf_r+0x9c>)
 800437e:	429c      	cmp	r4, r3
 8004380:	d101      	bne.n	8004386 <__swbuf_r+0x7a>
 8004382:	68ac      	ldr	r4, [r5, #8]
 8004384:	e7cf      	b.n	8004326 <__swbuf_r+0x1a>
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <__swbuf_r+0xa0>)
 8004388:	429c      	cmp	r4, r3
 800438a:	bf08      	it	eq
 800438c:	68ec      	ldreq	r4, [r5, #12]
 800438e:	e7ca      	b.n	8004326 <__swbuf_r+0x1a>
 8004390:	4621      	mov	r1, r4
 8004392:	4628      	mov	r0, r5
 8004394:	f000 f80c 	bl	80043b0 <__swsetup_r>
 8004398:	2800      	cmp	r0, #0
 800439a:	d0cb      	beq.n	8004334 <__swbuf_r+0x28>
 800439c:	f04f 37ff 	mov.w	r7, #4294967295
 80043a0:	e7ea      	b.n	8004378 <__swbuf_r+0x6c>
 80043a2:	bf00      	nop
 80043a4:	080056c4 	.word	0x080056c4
 80043a8:	080056e4 	.word	0x080056e4
 80043ac:	080056a4 	.word	0x080056a4

080043b0 <__swsetup_r>:
 80043b0:	4b32      	ldr	r3, [pc, #200]	; (800447c <__swsetup_r+0xcc>)
 80043b2:	b570      	push	{r4, r5, r6, lr}
 80043b4:	681d      	ldr	r5, [r3, #0]
 80043b6:	4606      	mov	r6, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	b125      	cbz	r5, 80043c6 <__swsetup_r+0x16>
 80043bc:	69ab      	ldr	r3, [r5, #24]
 80043be:	b913      	cbnz	r3, 80043c6 <__swsetup_r+0x16>
 80043c0:	4628      	mov	r0, r5
 80043c2:	f000 f97d 	bl	80046c0 <__sinit>
 80043c6:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <__swsetup_r+0xd0>)
 80043c8:	429c      	cmp	r4, r3
 80043ca:	d10f      	bne.n	80043ec <__swsetup_r+0x3c>
 80043cc:	686c      	ldr	r4, [r5, #4]
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043d4:	0719      	lsls	r1, r3, #28
 80043d6:	d42c      	bmi.n	8004432 <__swsetup_r+0x82>
 80043d8:	06dd      	lsls	r5, r3, #27
 80043da:	d411      	bmi.n	8004400 <__swsetup_r+0x50>
 80043dc:	2309      	movs	r3, #9
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	e03e      	b.n	800446a <__swsetup_r+0xba>
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <__swsetup_r+0xd4>)
 80043ee:	429c      	cmp	r4, r3
 80043f0:	d101      	bne.n	80043f6 <__swsetup_r+0x46>
 80043f2:	68ac      	ldr	r4, [r5, #8]
 80043f4:	e7eb      	b.n	80043ce <__swsetup_r+0x1e>
 80043f6:	4b24      	ldr	r3, [pc, #144]	; (8004488 <__swsetup_r+0xd8>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	bf08      	it	eq
 80043fc:	68ec      	ldreq	r4, [r5, #12]
 80043fe:	e7e6      	b.n	80043ce <__swsetup_r+0x1e>
 8004400:	0758      	lsls	r0, r3, #29
 8004402:	d512      	bpl.n	800442a <__swsetup_r+0x7a>
 8004404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004406:	b141      	cbz	r1, 800441a <__swsetup_r+0x6a>
 8004408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800440c:	4299      	cmp	r1, r3
 800440e:	d002      	beq.n	8004416 <__swsetup_r+0x66>
 8004410:	4630      	mov	r0, r6
 8004412:	f000 fa59 	bl	80048c8 <_free_r>
 8004416:	2300      	movs	r3, #0
 8004418:	6363      	str	r3, [r4, #52]	; 0x34
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	2300      	movs	r3, #0
 8004424:	6063      	str	r3, [r4, #4]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f043 0308 	orr.w	r3, r3, #8
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	b94b      	cbnz	r3, 800444a <__swsetup_r+0x9a>
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800443c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004440:	d003      	beq.n	800444a <__swsetup_r+0x9a>
 8004442:	4621      	mov	r1, r4
 8004444:	4630      	mov	r0, r6
 8004446:	f000 f9ff 	bl	8004848 <__smakebuf_r>
 800444a:	89a0      	ldrh	r0, [r4, #12]
 800444c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004450:	f010 0301 	ands.w	r3, r0, #1
 8004454:	d00a      	beq.n	800446c <__swsetup_r+0xbc>
 8004456:	2300      	movs	r3, #0
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	6963      	ldr	r3, [r4, #20]
 800445c:	425b      	negs	r3, r3
 800445e:	61a3      	str	r3, [r4, #24]
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	b943      	cbnz	r3, 8004476 <__swsetup_r+0xc6>
 8004464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004468:	d1ba      	bne.n	80043e0 <__swsetup_r+0x30>
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	0781      	lsls	r1, r0, #30
 800446e:	bf58      	it	pl
 8004470:	6963      	ldrpl	r3, [r4, #20]
 8004472:	60a3      	str	r3, [r4, #8]
 8004474:	e7f4      	b.n	8004460 <__swsetup_r+0xb0>
 8004476:	2000      	movs	r0, #0
 8004478:	e7f7      	b.n	800446a <__swsetup_r+0xba>
 800447a:	bf00      	nop
 800447c:	20000014 	.word	0x20000014
 8004480:	080056c4 	.word	0x080056c4
 8004484:	080056e4 	.word	0x080056e4
 8004488:	080056a4 	.word	0x080056a4

0800448c <__sflush_r>:
 800448c:	898a      	ldrh	r2, [r1, #12]
 800448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	4605      	mov	r5, r0
 8004494:	0710      	lsls	r0, r2, #28
 8004496:	460c      	mov	r4, r1
 8004498:	d458      	bmi.n	800454c <__sflush_r+0xc0>
 800449a:	684b      	ldr	r3, [r1, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	dc05      	bgt.n	80044ac <__sflush_r+0x20>
 80044a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dc02      	bgt.n	80044ac <__sflush_r+0x20>
 80044a6:	2000      	movs	r0, #0
 80044a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ae:	2e00      	cmp	r6, #0
 80044b0:	d0f9      	beq.n	80044a6 <__sflush_r+0x1a>
 80044b2:	2300      	movs	r3, #0
 80044b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044b8:	682f      	ldr	r7, [r5, #0]
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	d032      	beq.n	8004524 <__sflush_r+0x98>
 80044be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	075a      	lsls	r2, r3, #29
 80044c4:	d505      	bpl.n	80044d2 <__sflush_r+0x46>
 80044c6:	6863      	ldr	r3, [r4, #4]
 80044c8:	1ac0      	subs	r0, r0, r3
 80044ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044cc:	b10b      	cbz	r3, 80044d2 <__sflush_r+0x46>
 80044ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d0:	1ac0      	subs	r0, r0, r3
 80044d2:	2300      	movs	r3, #0
 80044d4:	4602      	mov	r2, r0
 80044d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044d8:	6a21      	ldr	r1, [r4, #32]
 80044da:	4628      	mov	r0, r5
 80044dc:	47b0      	blx	r6
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	d106      	bne.n	80044f2 <__sflush_r+0x66>
 80044e4:	6829      	ldr	r1, [r5, #0]
 80044e6:	291d      	cmp	r1, #29
 80044e8:	d82c      	bhi.n	8004544 <__sflush_r+0xb8>
 80044ea:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <__sflush_r+0x108>)
 80044ec:	40ca      	lsrs	r2, r1
 80044ee:	07d6      	lsls	r6, r2, #31
 80044f0:	d528      	bpl.n	8004544 <__sflush_r+0xb8>
 80044f2:	2200      	movs	r2, #0
 80044f4:	6062      	str	r2, [r4, #4]
 80044f6:	04d9      	lsls	r1, r3, #19
 80044f8:	6922      	ldr	r2, [r4, #16]
 80044fa:	6022      	str	r2, [r4, #0]
 80044fc:	d504      	bpl.n	8004508 <__sflush_r+0x7c>
 80044fe:	1c42      	adds	r2, r0, #1
 8004500:	d101      	bne.n	8004506 <__sflush_r+0x7a>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	b903      	cbnz	r3, 8004508 <__sflush_r+0x7c>
 8004506:	6560      	str	r0, [r4, #84]	; 0x54
 8004508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800450a:	602f      	str	r7, [r5, #0]
 800450c:	2900      	cmp	r1, #0
 800450e:	d0ca      	beq.n	80044a6 <__sflush_r+0x1a>
 8004510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004514:	4299      	cmp	r1, r3
 8004516:	d002      	beq.n	800451e <__sflush_r+0x92>
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f9d5 	bl	80048c8 <_free_r>
 800451e:	2000      	movs	r0, #0
 8004520:	6360      	str	r0, [r4, #52]	; 0x34
 8004522:	e7c1      	b.n	80044a8 <__sflush_r+0x1c>
 8004524:	6a21      	ldr	r1, [r4, #32]
 8004526:	2301      	movs	r3, #1
 8004528:	4628      	mov	r0, r5
 800452a:	47b0      	blx	r6
 800452c:	1c41      	adds	r1, r0, #1
 800452e:	d1c7      	bne.n	80044c0 <__sflush_r+0x34>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0c4      	beq.n	80044c0 <__sflush_r+0x34>
 8004536:	2b1d      	cmp	r3, #29
 8004538:	d001      	beq.n	800453e <__sflush_r+0xb2>
 800453a:	2b16      	cmp	r3, #22
 800453c:	d101      	bne.n	8004542 <__sflush_r+0xb6>
 800453e:	602f      	str	r7, [r5, #0]
 8004540:	e7b1      	b.n	80044a6 <__sflush_r+0x1a>
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	e7ad      	b.n	80044a8 <__sflush_r+0x1c>
 800454c:	690f      	ldr	r7, [r1, #16]
 800454e:	2f00      	cmp	r7, #0
 8004550:	d0a9      	beq.n	80044a6 <__sflush_r+0x1a>
 8004552:	0793      	lsls	r3, r2, #30
 8004554:	680e      	ldr	r6, [r1, #0]
 8004556:	bf08      	it	eq
 8004558:	694b      	ldreq	r3, [r1, #20]
 800455a:	600f      	str	r7, [r1, #0]
 800455c:	bf18      	it	ne
 800455e:	2300      	movne	r3, #0
 8004560:	eba6 0807 	sub.w	r8, r6, r7
 8004564:	608b      	str	r3, [r1, #8]
 8004566:	f1b8 0f00 	cmp.w	r8, #0
 800456a:	dd9c      	ble.n	80044a6 <__sflush_r+0x1a>
 800456c:	6a21      	ldr	r1, [r4, #32]
 800456e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004570:	4643      	mov	r3, r8
 8004572:	463a      	mov	r2, r7
 8004574:	4628      	mov	r0, r5
 8004576:	47b0      	blx	r6
 8004578:	2800      	cmp	r0, #0
 800457a:	dc06      	bgt.n	800458a <__sflush_r+0xfe>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e78e      	b.n	80044a8 <__sflush_r+0x1c>
 800458a:	4407      	add	r7, r0
 800458c:	eba8 0800 	sub.w	r8, r8, r0
 8004590:	e7e9      	b.n	8004566 <__sflush_r+0xda>
 8004592:	bf00      	nop
 8004594:	20400001 	.word	0x20400001

08004598 <_fflush_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	690b      	ldr	r3, [r1, #16]
 800459c:	4605      	mov	r5, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	b913      	cbnz	r3, 80045a8 <_fflush_r+0x10>
 80045a2:	2500      	movs	r5, #0
 80045a4:	4628      	mov	r0, r5
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	b118      	cbz	r0, 80045b2 <_fflush_r+0x1a>
 80045aa:	6983      	ldr	r3, [r0, #24]
 80045ac:	b90b      	cbnz	r3, 80045b2 <_fflush_r+0x1a>
 80045ae:	f000 f887 	bl	80046c0 <__sinit>
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <_fflush_r+0x6c>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	d11b      	bne.n	80045f0 <_fflush_r+0x58>
 80045b8:	686c      	ldr	r4, [r5, #4]
 80045ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0ef      	beq.n	80045a2 <_fflush_r+0xa>
 80045c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045c4:	07d0      	lsls	r0, r2, #31
 80045c6:	d404      	bmi.n	80045d2 <_fflush_r+0x3a>
 80045c8:	0599      	lsls	r1, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <_fflush_r+0x3a>
 80045cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ce:	f000 f915 	bl	80047fc <__retarget_lock_acquire_recursive>
 80045d2:	4628      	mov	r0, r5
 80045d4:	4621      	mov	r1, r4
 80045d6:	f7ff ff59 	bl	800448c <__sflush_r>
 80045da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045dc:	07da      	lsls	r2, r3, #31
 80045de:	4605      	mov	r5, r0
 80045e0:	d4e0      	bmi.n	80045a4 <_fflush_r+0xc>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	059b      	lsls	r3, r3, #22
 80045e6:	d4dd      	bmi.n	80045a4 <_fflush_r+0xc>
 80045e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ea:	f000 f908 	bl	80047fe <__retarget_lock_release_recursive>
 80045ee:	e7d9      	b.n	80045a4 <_fflush_r+0xc>
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <_fflush_r+0x70>)
 80045f2:	429c      	cmp	r4, r3
 80045f4:	d101      	bne.n	80045fa <_fflush_r+0x62>
 80045f6:	68ac      	ldr	r4, [r5, #8]
 80045f8:	e7df      	b.n	80045ba <_fflush_r+0x22>
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <_fflush_r+0x74>)
 80045fc:	429c      	cmp	r4, r3
 80045fe:	bf08      	it	eq
 8004600:	68ec      	ldreq	r4, [r5, #12]
 8004602:	e7da      	b.n	80045ba <_fflush_r+0x22>
 8004604:	080056c4 	.word	0x080056c4
 8004608:	080056e4 	.word	0x080056e4
 800460c:	080056a4 	.word	0x080056a4

08004610 <std>:
 8004610:	2300      	movs	r3, #0
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
 8004616:	e9c0 3300 	strd	r3, r3, [r0]
 800461a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800461e:	6083      	str	r3, [r0, #8]
 8004620:	8181      	strh	r1, [r0, #12]
 8004622:	6643      	str	r3, [r0, #100]	; 0x64
 8004624:	81c2      	strh	r2, [r0, #14]
 8004626:	6183      	str	r3, [r0, #24]
 8004628:	4619      	mov	r1, r3
 800462a:	2208      	movs	r2, #8
 800462c:	305c      	adds	r0, #92	; 0x5c
 800462e:	f7ff fdb7 	bl	80041a0 <memset>
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <std+0x38>)
 8004634:	6263      	str	r3, [r4, #36]	; 0x24
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <std+0x3c>)
 8004638:	62a3      	str	r3, [r4, #40]	; 0x28
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <std+0x40>)
 800463c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <std+0x44>)
 8004640:	6224      	str	r4, [r4, #32]
 8004642:	6323      	str	r3, [r4, #48]	; 0x30
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	080052d1 	.word	0x080052d1
 800464c:	080052f3 	.word	0x080052f3
 8004650:	0800532b 	.word	0x0800532b
 8004654:	0800534f 	.word	0x0800534f

08004658 <_cleanup_r>:
 8004658:	4901      	ldr	r1, [pc, #4]	; (8004660 <_cleanup_r+0x8>)
 800465a:	f000 b8af 	b.w	80047bc <_fwalk_reent>
 800465e:	bf00      	nop
 8004660:	08004599 	.word	0x08004599

08004664 <__sfmoreglue>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	1e4a      	subs	r2, r1, #1
 8004668:	2568      	movs	r5, #104	; 0x68
 800466a:	4355      	muls	r5, r2
 800466c:	460e      	mov	r6, r1
 800466e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004672:	f000 f979 	bl	8004968 <_malloc_r>
 8004676:	4604      	mov	r4, r0
 8004678:	b140      	cbz	r0, 800468c <__sfmoreglue+0x28>
 800467a:	2100      	movs	r1, #0
 800467c:	e9c0 1600 	strd	r1, r6, [r0]
 8004680:	300c      	adds	r0, #12
 8004682:	60a0      	str	r0, [r4, #8]
 8004684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004688:	f7ff fd8a 	bl	80041a0 <memset>
 800468c:	4620      	mov	r0, r4
 800468e:	bd70      	pop	{r4, r5, r6, pc}

08004690 <__sfp_lock_acquire>:
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <__sfp_lock_acquire+0x8>)
 8004692:	f000 b8b3 	b.w	80047fc <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	20000270 	.word	0x20000270

0800469c <__sfp_lock_release>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__sfp_lock_release+0x8>)
 800469e:	f000 b8ae 	b.w	80047fe <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000270 	.word	0x20000270

080046a8 <__sinit_lock_acquire>:
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <__sinit_lock_acquire+0x8>)
 80046aa:	f000 b8a7 	b.w	80047fc <__retarget_lock_acquire_recursive>
 80046ae:	bf00      	nop
 80046b0:	2000026b 	.word	0x2000026b

080046b4 <__sinit_lock_release>:
 80046b4:	4801      	ldr	r0, [pc, #4]	; (80046bc <__sinit_lock_release+0x8>)
 80046b6:	f000 b8a2 	b.w	80047fe <__retarget_lock_release_recursive>
 80046ba:	bf00      	nop
 80046bc:	2000026b 	.word	0x2000026b

080046c0 <__sinit>:
 80046c0:	b510      	push	{r4, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	f7ff fff0 	bl	80046a8 <__sinit_lock_acquire>
 80046c8:	69a3      	ldr	r3, [r4, #24]
 80046ca:	b11b      	cbz	r3, 80046d4 <__sinit+0x14>
 80046cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d0:	f7ff bff0 	b.w	80046b4 <__sinit_lock_release>
 80046d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046d8:	6523      	str	r3, [r4, #80]	; 0x50
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <__sinit+0x68>)
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <__sinit+0x6c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80046e2:	42a3      	cmp	r3, r4
 80046e4:	bf04      	itt	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	61a3      	streq	r3, [r4, #24]
 80046ea:	4620      	mov	r0, r4
 80046ec:	f000 f820 	bl	8004730 <__sfp>
 80046f0:	6060      	str	r0, [r4, #4]
 80046f2:	4620      	mov	r0, r4
 80046f4:	f000 f81c 	bl	8004730 <__sfp>
 80046f8:	60a0      	str	r0, [r4, #8]
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 f818 	bl	8004730 <__sfp>
 8004700:	2200      	movs	r2, #0
 8004702:	60e0      	str	r0, [r4, #12]
 8004704:	2104      	movs	r1, #4
 8004706:	6860      	ldr	r0, [r4, #4]
 8004708:	f7ff ff82 	bl	8004610 <std>
 800470c:	68a0      	ldr	r0, [r4, #8]
 800470e:	2201      	movs	r2, #1
 8004710:	2109      	movs	r1, #9
 8004712:	f7ff ff7d 	bl	8004610 <std>
 8004716:	68e0      	ldr	r0, [r4, #12]
 8004718:	2202      	movs	r2, #2
 800471a:	2112      	movs	r1, #18
 800471c:	f7ff ff78 	bl	8004610 <std>
 8004720:	2301      	movs	r3, #1
 8004722:	61a3      	str	r3, [r4, #24]
 8004724:	e7d2      	b.n	80046cc <__sinit+0xc>
 8004726:	bf00      	nop
 8004728:	080056a0 	.word	0x080056a0
 800472c:	08004659 	.word	0x08004659

08004730 <__sfp>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	4607      	mov	r7, r0
 8004734:	f7ff ffac 	bl	8004690 <__sfp_lock_acquire>
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <__sfp+0x84>)
 800473a:	681e      	ldr	r6, [r3, #0]
 800473c:	69b3      	ldr	r3, [r6, #24]
 800473e:	b913      	cbnz	r3, 8004746 <__sfp+0x16>
 8004740:	4630      	mov	r0, r6
 8004742:	f7ff ffbd 	bl	80046c0 <__sinit>
 8004746:	3648      	adds	r6, #72	; 0x48
 8004748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800474c:	3b01      	subs	r3, #1
 800474e:	d503      	bpl.n	8004758 <__sfp+0x28>
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	b30b      	cbz	r3, 8004798 <__sfp+0x68>
 8004754:	6836      	ldr	r6, [r6, #0]
 8004756:	e7f7      	b.n	8004748 <__sfp+0x18>
 8004758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800475c:	b9d5      	cbnz	r5, 8004794 <__sfp+0x64>
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <__sfp+0x88>)
 8004760:	60e3      	str	r3, [r4, #12]
 8004762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004766:	6665      	str	r5, [r4, #100]	; 0x64
 8004768:	f000 f847 	bl	80047fa <__retarget_lock_init_recursive>
 800476c:	f7ff ff96 	bl	800469c <__sfp_lock_release>
 8004770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004778:	6025      	str	r5, [r4, #0]
 800477a:	61a5      	str	r5, [r4, #24]
 800477c:	2208      	movs	r2, #8
 800477e:	4629      	mov	r1, r5
 8004780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004784:	f7ff fd0c 	bl	80041a0 <memset>
 8004788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800478c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004790:	4620      	mov	r0, r4
 8004792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004794:	3468      	adds	r4, #104	; 0x68
 8004796:	e7d9      	b.n	800474c <__sfp+0x1c>
 8004798:	2104      	movs	r1, #4
 800479a:	4638      	mov	r0, r7
 800479c:	f7ff ff62 	bl	8004664 <__sfmoreglue>
 80047a0:	4604      	mov	r4, r0
 80047a2:	6030      	str	r0, [r6, #0]
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d1d5      	bne.n	8004754 <__sfp+0x24>
 80047a8:	f7ff ff78 	bl	800469c <__sfp_lock_release>
 80047ac:	230c      	movs	r3, #12
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	e7ee      	b.n	8004790 <__sfp+0x60>
 80047b2:	bf00      	nop
 80047b4:	080056a0 	.word	0x080056a0
 80047b8:	ffff0001 	.word	0xffff0001

080047bc <_fwalk_reent>:
 80047bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c0:	4606      	mov	r6, r0
 80047c2:	4688      	mov	r8, r1
 80047c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047c8:	2700      	movs	r7, #0
 80047ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047ce:	f1b9 0901 	subs.w	r9, r9, #1
 80047d2:	d505      	bpl.n	80047e0 <_fwalk_reent+0x24>
 80047d4:	6824      	ldr	r4, [r4, #0]
 80047d6:	2c00      	cmp	r4, #0
 80047d8:	d1f7      	bne.n	80047ca <_fwalk_reent+0xe>
 80047da:	4638      	mov	r0, r7
 80047dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e0:	89ab      	ldrh	r3, [r5, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d907      	bls.n	80047f6 <_fwalk_reent+0x3a>
 80047e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ea:	3301      	adds	r3, #1
 80047ec:	d003      	beq.n	80047f6 <_fwalk_reent+0x3a>
 80047ee:	4629      	mov	r1, r5
 80047f0:	4630      	mov	r0, r6
 80047f2:	47c0      	blx	r8
 80047f4:	4307      	orrs	r7, r0
 80047f6:	3568      	adds	r5, #104	; 0x68
 80047f8:	e7e9      	b.n	80047ce <_fwalk_reent+0x12>

080047fa <__retarget_lock_init_recursive>:
 80047fa:	4770      	bx	lr

080047fc <__retarget_lock_acquire_recursive>:
 80047fc:	4770      	bx	lr

080047fe <__retarget_lock_release_recursive>:
 80047fe:	4770      	bx	lr

08004800 <__swhatbuf_r>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	460e      	mov	r6, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	2900      	cmp	r1, #0
 800480a:	b096      	sub	sp, #88	; 0x58
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	da07      	bge.n	8004822 <__swhatbuf_r+0x22>
 8004812:	2300      	movs	r3, #0
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	89b3      	ldrh	r3, [r6, #12]
 8004818:	061a      	lsls	r2, r3, #24
 800481a:	d410      	bmi.n	800483e <__swhatbuf_r+0x3e>
 800481c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004820:	e00e      	b.n	8004840 <__swhatbuf_r+0x40>
 8004822:	466a      	mov	r2, sp
 8004824:	f000 fdba 	bl	800539c <_fstat_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	dbf2      	blt.n	8004812 <__swhatbuf_r+0x12>
 800482c:	9a01      	ldr	r2, [sp, #4]
 800482e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004836:	425a      	negs	r2, r3
 8004838:	415a      	adcs	r2, r3
 800483a:	602a      	str	r2, [r5, #0]
 800483c:	e7ee      	b.n	800481c <__swhatbuf_r+0x1c>
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	2000      	movs	r0, #0
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	b016      	add	sp, #88	; 0x58
 8004846:	bd70      	pop	{r4, r5, r6, pc}

08004848 <__smakebuf_r>:
 8004848:	898b      	ldrh	r3, [r1, #12]
 800484a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800484c:	079d      	lsls	r5, r3, #30
 800484e:	4606      	mov	r6, r0
 8004850:	460c      	mov	r4, r1
 8004852:	d507      	bpl.n	8004864 <__smakebuf_r+0x1c>
 8004854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	6123      	str	r3, [r4, #16]
 800485c:	2301      	movs	r3, #1
 800485e:	6163      	str	r3, [r4, #20]
 8004860:	b002      	add	sp, #8
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	ab01      	add	r3, sp, #4
 8004866:	466a      	mov	r2, sp
 8004868:	f7ff ffca 	bl	8004800 <__swhatbuf_r>
 800486c:	9900      	ldr	r1, [sp, #0]
 800486e:	4605      	mov	r5, r0
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f879 	bl	8004968 <_malloc_r>
 8004876:	b948      	cbnz	r0, 800488c <__smakebuf_r+0x44>
 8004878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487c:	059a      	lsls	r2, r3, #22
 800487e:	d4ef      	bmi.n	8004860 <__smakebuf_r+0x18>
 8004880:	f023 0303 	bic.w	r3, r3, #3
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	e7e3      	b.n	8004854 <__smakebuf_r+0xc>
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <__smakebuf_r+0x7c>)
 800488e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	6020      	str	r0, [r4, #0]
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	9b00      	ldr	r3, [sp, #0]
 800489c:	6163      	str	r3, [r4, #20]
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	6120      	str	r0, [r4, #16]
 80048a2:	b15b      	cbz	r3, 80048bc <__smakebuf_r+0x74>
 80048a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 fd89 	bl	80053c0 <_isatty_r>
 80048ae:	b128      	cbz	r0, 80048bc <__smakebuf_r+0x74>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	89a0      	ldrh	r0, [r4, #12]
 80048be:	4305      	orrs	r5, r0
 80048c0:	81a5      	strh	r5, [r4, #12]
 80048c2:	e7cd      	b.n	8004860 <__smakebuf_r+0x18>
 80048c4:	08004659 	.word	0x08004659

080048c8 <_free_r>:
 80048c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d048      	beq.n	8004960 <_free_r+0x98>
 80048ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d2:	9001      	str	r0, [sp, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f1a1 0404 	sub.w	r4, r1, #4
 80048da:	bfb8      	it	lt
 80048dc:	18e4      	addlt	r4, r4, r3
 80048de:	f000 fdb9 	bl	8005454 <__malloc_lock>
 80048e2:	4a20      	ldr	r2, [pc, #128]	; (8004964 <_free_r+0x9c>)
 80048e4:	9801      	ldr	r0, [sp, #4]
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	4615      	mov	r5, r2
 80048ea:	b933      	cbnz	r3, 80048fa <_free_r+0x32>
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6014      	str	r4, [r2, #0]
 80048f0:	b003      	add	sp, #12
 80048f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f6:	f000 bdb3 	b.w	8005460 <__malloc_unlock>
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d90b      	bls.n	8004916 <_free_r+0x4e>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	1862      	adds	r2, r4, r1
 8004902:	4293      	cmp	r3, r2
 8004904:	bf04      	itt	eq
 8004906:	681a      	ldreq	r2, [r3, #0]
 8004908:	685b      	ldreq	r3, [r3, #4]
 800490a:	6063      	str	r3, [r4, #4]
 800490c:	bf04      	itt	eq
 800490e:	1852      	addeq	r2, r2, r1
 8004910:	6022      	streq	r2, [r4, #0]
 8004912:	602c      	str	r4, [r5, #0]
 8004914:	e7ec      	b.n	80048f0 <_free_r+0x28>
 8004916:	461a      	mov	r2, r3
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	b10b      	cbz	r3, 8004920 <_free_r+0x58>
 800491c:	42a3      	cmp	r3, r4
 800491e:	d9fa      	bls.n	8004916 <_free_r+0x4e>
 8004920:	6811      	ldr	r1, [r2, #0]
 8004922:	1855      	adds	r5, r2, r1
 8004924:	42a5      	cmp	r5, r4
 8004926:	d10b      	bne.n	8004940 <_free_r+0x78>
 8004928:	6824      	ldr	r4, [r4, #0]
 800492a:	4421      	add	r1, r4
 800492c:	1854      	adds	r4, r2, r1
 800492e:	42a3      	cmp	r3, r4
 8004930:	6011      	str	r1, [r2, #0]
 8004932:	d1dd      	bne.n	80048f0 <_free_r+0x28>
 8004934:	681c      	ldr	r4, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	6053      	str	r3, [r2, #4]
 800493a:	4421      	add	r1, r4
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	e7d7      	b.n	80048f0 <_free_r+0x28>
 8004940:	d902      	bls.n	8004948 <_free_r+0x80>
 8004942:	230c      	movs	r3, #12
 8004944:	6003      	str	r3, [r0, #0]
 8004946:	e7d3      	b.n	80048f0 <_free_r+0x28>
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	1961      	adds	r1, r4, r5
 800494c:	428b      	cmp	r3, r1
 800494e:	bf04      	itt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	6063      	str	r3, [r4, #4]
 8004956:	bf04      	itt	eq
 8004958:	1949      	addeq	r1, r1, r5
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	6054      	str	r4, [r2, #4]
 800495e:	e7c7      	b.n	80048f0 <_free_r+0x28>
 8004960:	b003      	add	sp, #12
 8004962:	bd30      	pop	{r4, r5, pc}
 8004964:	200000b0 	.word	0x200000b0

08004968 <_malloc_r>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	1ccd      	adds	r5, r1, #3
 800496c:	f025 0503 	bic.w	r5, r5, #3
 8004970:	3508      	adds	r5, #8
 8004972:	2d0c      	cmp	r5, #12
 8004974:	bf38      	it	cc
 8004976:	250c      	movcc	r5, #12
 8004978:	2d00      	cmp	r5, #0
 800497a:	4606      	mov	r6, r0
 800497c:	db01      	blt.n	8004982 <_malloc_r+0x1a>
 800497e:	42a9      	cmp	r1, r5
 8004980:	d903      	bls.n	800498a <_malloc_r+0x22>
 8004982:	230c      	movs	r3, #12
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	2000      	movs	r0, #0
 8004988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800498a:	f000 fd63 	bl	8005454 <__malloc_lock>
 800498e:	4921      	ldr	r1, [pc, #132]	; (8004a14 <_malloc_r+0xac>)
 8004990:	680a      	ldr	r2, [r1, #0]
 8004992:	4614      	mov	r4, r2
 8004994:	b99c      	cbnz	r4, 80049be <_malloc_r+0x56>
 8004996:	4f20      	ldr	r7, [pc, #128]	; (8004a18 <_malloc_r+0xb0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b923      	cbnz	r3, 80049a6 <_malloc_r+0x3e>
 800499c:	4621      	mov	r1, r4
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 fc86 	bl	80052b0 <_sbrk_r>
 80049a4:	6038      	str	r0, [r7, #0]
 80049a6:	4629      	mov	r1, r5
 80049a8:	4630      	mov	r0, r6
 80049aa:	f000 fc81 	bl	80052b0 <_sbrk_r>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	d123      	bne.n	80049fa <_malloc_r+0x92>
 80049b2:	230c      	movs	r3, #12
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 fd52 	bl	8005460 <__malloc_unlock>
 80049bc:	e7e3      	b.n	8004986 <_malloc_r+0x1e>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	1b5b      	subs	r3, r3, r5
 80049c2:	d417      	bmi.n	80049f4 <_malloc_r+0x8c>
 80049c4:	2b0b      	cmp	r3, #11
 80049c6:	d903      	bls.n	80049d0 <_malloc_r+0x68>
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	441c      	add	r4, r3
 80049cc:	6025      	str	r5, [r4, #0]
 80049ce:	e004      	b.n	80049da <_malloc_r+0x72>
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	42a2      	cmp	r2, r4
 80049d4:	bf0c      	ite	eq
 80049d6:	600b      	streq	r3, [r1, #0]
 80049d8:	6053      	strne	r3, [r2, #4]
 80049da:	4630      	mov	r0, r6
 80049dc:	f000 fd40 	bl	8005460 <__malloc_unlock>
 80049e0:	f104 000b 	add.w	r0, r4, #11
 80049e4:	1d23      	adds	r3, r4, #4
 80049e6:	f020 0007 	bic.w	r0, r0, #7
 80049ea:	1ac2      	subs	r2, r0, r3
 80049ec:	d0cc      	beq.n	8004988 <_malloc_r+0x20>
 80049ee:	1a1b      	subs	r3, r3, r0
 80049f0:	50a3      	str	r3, [r4, r2]
 80049f2:	e7c9      	b.n	8004988 <_malloc_r+0x20>
 80049f4:	4622      	mov	r2, r4
 80049f6:	6864      	ldr	r4, [r4, #4]
 80049f8:	e7cc      	b.n	8004994 <_malloc_r+0x2c>
 80049fa:	1cc4      	adds	r4, r0, #3
 80049fc:	f024 0403 	bic.w	r4, r4, #3
 8004a00:	42a0      	cmp	r0, r4
 8004a02:	d0e3      	beq.n	80049cc <_malloc_r+0x64>
 8004a04:	1a21      	subs	r1, r4, r0
 8004a06:	4630      	mov	r0, r6
 8004a08:	f000 fc52 	bl	80052b0 <_sbrk_r>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d1dd      	bne.n	80049cc <_malloc_r+0x64>
 8004a10:	e7cf      	b.n	80049b2 <_malloc_r+0x4a>
 8004a12:	bf00      	nop
 8004a14:	200000b0 	.word	0x200000b0
 8004a18:	200000b4 	.word	0x200000b4

08004a1c <__ssputs_r>:
 8004a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	688e      	ldr	r6, [r1, #8]
 8004a22:	429e      	cmp	r6, r3
 8004a24:	4682      	mov	sl, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	4690      	mov	r8, r2
 8004a2a:	461f      	mov	r7, r3
 8004a2c:	d838      	bhi.n	8004aa0 <__ssputs_r+0x84>
 8004a2e:	898a      	ldrh	r2, [r1, #12]
 8004a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a34:	d032      	beq.n	8004a9c <__ssputs_r+0x80>
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	6909      	ldr	r1, [r1, #16]
 8004a3a:	eba5 0901 	sub.w	r9, r5, r1
 8004a3e:	6965      	ldr	r5, [r4, #20]
 8004a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a48:	3301      	adds	r3, #1
 8004a4a:	444b      	add	r3, r9
 8004a4c:	106d      	asrs	r5, r5, #1
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	bf38      	it	cc
 8004a52:	461d      	movcc	r5, r3
 8004a54:	0553      	lsls	r3, r2, #21
 8004a56:	d531      	bpl.n	8004abc <__ssputs_r+0xa0>
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f7ff ff85 	bl	8004968 <_malloc_r>
 8004a5e:	4606      	mov	r6, r0
 8004a60:	b950      	cbnz	r0, 8004a78 <__ssputs_r+0x5c>
 8004a62:	230c      	movs	r3, #12
 8004a64:	f8ca 3000 	str.w	r3, [sl]
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a78:	6921      	ldr	r1, [r4, #16]
 8004a7a:	464a      	mov	r2, r9
 8004a7c:	f000 fcc2 	bl	8005404 <memcpy>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	6126      	str	r6, [r4, #16]
 8004a8e:	6165      	str	r5, [r4, #20]
 8004a90:	444e      	add	r6, r9
 8004a92:	eba5 0509 	sub.w	r5, r5, r9
 8004a96:	6026      	str	r6, [r4, #0]
 8004a98:	60a5      	str	r5, [r4, #8]
 8004a9a:	463e      	mov	r6, r7
 8004a9c:	42be      	cmp	r6, r7
 8004a9e:	d900      	bls.n	8004aa2 <__ssputs_r+0x86>
 8004aa0:	463e      	mov	r6, r7
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	f000 fcba 	bl	8005420 <memmove>
 8004aac:	68a3      	ldr	r3, [r4, #8]
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	1b9b      	subs	r3, r3, r6
 8004ab2:	4432      	add	r2, r6
 8004ab4:	60a3      	str	r3, [r4, #8]
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7db      	b.n	8004a74 <__ssputs_r+0x58>
 8004abc:	462a      	mov	r2, r5
 8004abe:	f000 fcd5 	bl	800546c <_realloc_r>
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d1e1      	bne.n	8004a8c <__ssputs_r+0x70>
 8004ac8:	6921      	ldr	r1, [r4, #16]
 8004aca:	4650      	mov	r0, sl
 8004acc:	f7ff fefc 	bl	80048c8 <_free_r>
 8004ad0:	e7c7      	b.n	8004a62 <__ssputs_r+0x46>
	...

08004ad4 <_svfiprintf_r>:
 8004ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad8:	4698      	mov	r8, r3
 8004ada:	898b      	ldrh	r3, [r1, #12]
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	b09d      	sub	sp, #116	; 0x74
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	d50e      	bpl.n	8004b06 <_svfiprintf_r+0x32>
 8004ae8:	690b      	ldr	r3, [r1, #16]
 8004aea:	b963      	cbnz	r3, 8004b06 <_svfiprintf_r+0x32>
 8004aec:	2140      	movs	r1, #64	; 0x40
 8004aee:	f7ff ff3b 	bl	8004968 <_malloc_r>
 8004af2:	6028      	str	r0, [r5, #0]
 8004af4:	6128      	str	r0, [r5, #16]
 8004af6:	b920      	cbnz	r0, 8004b02 <_svfiprintf_r+0x2e>
 8004af8:	230c      	movs	r3, #12
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	e0d1      	b.n	8004ca6 <_svfiprintf_r+0x1d2>
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	616b      	str	r3, [r5, #20]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b14:	2330      	movs	r3, #48	; 0x30
 8004b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004cc0 <_svfiprintf_r+0x1ec>
 8004b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b1e:	f04f 0901 	mov.w	r9, #1
 8004b22:	4623      	mov	r3, r4
 8004b24:	469a      	mov	sl, r3
 8004b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b2a:	b10a      	cbz	r2, 8004b30 <_svfiprintf_r+0x5c>
 8004b2c:	2a25      	cmp	r2, #37	; 0x25
 8004b2e:	d1f9      	bne.n	8004b24 <_svfiprintf_r+0x50>
 8004b30:	ebba 0b04 	subs.w	fp, sl, r4
 8004b34:	d00b      	beq.n	8004b4e <_svfiprintf_r+0x7a>
 8004b36:	465b      	mov	r3, fp
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	f7ff ff6d 	bl	8004a1c <__ssputs_r>
 8004b42:	3001      	adds	r0, #1
 8004b44:	f000 80aa 	beq.w	8004c9c <_svfiprintf_r+0x1c8>
 8004b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b4a:	445a      	add	r2, fp
 8004b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80a2 	beq.w	8004c9c <_svfiprintf_r+0x1c8>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b62:	f10a 0a01 	add.w	sl, sl, #1
 8004b66:	9304      	str	r3, [sp, #16]
 8004b68:	9307      	str	r3, [sp, #28]
 8004b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b70:	4654      	mov	r4, sl
 8004b72:	2205      	movs	r2, #5
 8004b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b78:	4851      	ldr	r0, [pc, #324]	; (8004cc0 <_svfiprintf_r+0x1ec>)
 8004b7a:	f7fb fb31 	bl	80001e0 <memchr>
 8004b7e:	9a04      	ldr	r2, [sp, #16]
 8004b80:	b9d8      	cbnz	r0, 8004bba <_svfiprintf_r+0xe6>
 8004b82:	06d0      	lsls	r0, r2, #27
 8004b84:	bf44      	itt	mi
 8004b86:	2320      	movmi	r3, #32
 8004b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b8c:	0711      	lsls	r1, r2, #28
 8004b8e:	bf44      	itt	mi
 8004b90:	232b      	movmi	r3, #43	; 0x2b
 8004b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b96:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9c:	d015      	beq.n	8004bca <_svfiprintf_r+0xf6>
 8004b9e:	9a07      	ldr	r2, [sp, #28]
 8004ba0:	4654      	mov	r4, sl
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f04f 0c0a 	mov.w	ip, #10
 8004ba8:	4621      	mov	r1, r4
 8004baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bae:	3b30      	subs	r3, #48	; 0x30
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d94e      	bls.n	8004c52 <_svfiprintf_r+0x17e>
 8004bb4:	b1b0      	cbz	r0, 8004be4 <_svfiprintf_r+0x110>
 8004bb6:	9207      	str	r2, [sp, #28]
 8004bb8:	e014      	b.n	8004be4 <_svfiprintf_r+0x110>
 8004bba:	eba0 0308 	sub.w	r3, r0, r8
 8004bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	9304      	str	r3, [sp, #16]
 8004bc6:	46a2      	mov	sl, r4
 8004bc8:	e7d2      	b.n	8004b70 <_svfiprintf_r+0x9c>
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	1d19      	adds	r1, r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	9103      	str	r1, [sp, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfbb      	ittet	lt
 8004bd6:	425b      	neglt	r3, r3
 8004bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bdc:	9307      	strge	r3, [sp, #28]
 8004bde:	9307      	strlt	r3, [sp, #28]
 8004be0:	bfb8      	it	lt
 8004be2:	9204      	strlt	r2, [sp, #16]
 8004be4:	7823      	ldrb	r3, [r4, #0]
 8004be6:	2b2e      	cmp	r3, #46	; 0x2e
 8004be8:	d10c      	bne.n	8004c04 <_svfiprintf_r+0x130>
 8004bea:	7863      	ldrb	r3, [r4, #1]
 8004bec:	2b2a      	cmp	r3, #42	; 0x2a
 8004bee:	d135      	bne.n	8004c5c <_svfiprintf_r+0x188>
 8004bf0:	9b03      	ldr	r3, [sp, #12]
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	9203      	str	r2, [sp, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bfb8      	it	lt
 8004bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c00:	3402      	adds	r4, #2
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cd0 <_svfiprintf_r+0x1fc>
 8004c08:	7821      	ldrb	r1, [r4, #0]
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	4650      	mov	r0, sl
 8004c0e:	f7fb fae7 	bl	80001e0 <memchr>
 8004c12:	b140      	cbz	r0, 8004c26 <_svfiprintf_r+0x152>
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	eba0 000a 	sub.w	r0, r0, sl
 8004c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	4303      	orrs	r3, r0
 8004c22:	3401      	adds	r4, #1
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c2a:	4826      	ldr	r0, [pc, #152]	; (8004cc4 <_svfiprintf_r+0x1f0>)
 8004c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c30:	2206      	movs	r2, #6
 8004c32:	f7fb fad5 	bl	80001e0 <memchr>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d038      	beq.n	8004cac <_svfiprintf_r+0x1d8>
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <_svfiprintf_r+0x1f4>)
 8004c3c:	bb1b      	cbnz	r3, 8004c86 <_svfiprintf_r+0x1b2>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	3307      	adds	r3, #7
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	3308      	adds	r3, #8
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4c:	4433      	add	r3, r6
 8004c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c50:	e767      	b.n	8004b22 <_svfiprintf_r+0x4e>
 8004c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c56:	460c      	mov	r4, r1
 8004c58:	2001      	movs	r0, #1
 8004c5a:	e7a5      	b.n	8004ba8 <_svfiprintf_r+0xd4>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	3401      	adds	r4, #1
 8004c60:	9305      	str	r3, [sp, #20]
 8004c62:	4619      	mov	r1, r3
 8004c64:	f04f 0c0a 	mov.w	ip, #10
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c6e:	3a30      	subs	r2, #48	; 0x30
 8004c70:	2a09      	cmp	r2, #9
 8004c72:	d903      	bls.n	8004c7c <_svfiprintf_r+0x1a8>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0c5      	beq.n	8004c04 <_svfiprintf_r+0x130>
 8004c78:	9105      	str	r1, [sp, #20]
 8004c7a:	e7c3      	b.n	8004c04 <_svfiprintf_r+0x130>
 8004c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c80:	4604      	mov	r4, r0
 8004c82:	2301      	movs	r3, #1
 8004c84:	e7f0      	b.n	8004c68 <_svfiprintf_r+0x194>
 8004c86:	ab03      	add	r3, sp, #12
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <_svfiprintf_r+0x1f8>)
 8004c8e:	a904      	add	r1, sp, #16
 8004c90:	4638      	mov	r0, r7
 8004c92:	f3af 8000 	nop.w
 8004c96:	1c42      	adds	r2, r0, #1
 8004c98:	4606      	mov	r6, r0
 8004c9a:	d1d6      	bne.n	8004c4a <_svfiprintf_r+0x176>
 8004c9c:	89ab      	ldrh	r3, [r5, #12]
 8004c9e:	065b      	lsls	r3, r3, #25
 8004ca0:	f53f af2c 	bmi.w	8004afc <_svfiprintf_r+0x28>
 8004ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ca6:	b01d      	add	sp, #116	; 0x74
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	462a      	mov	r2, r5
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <_svfiprintf_r+0x1f8>)
 8004cb4:	a904      	add	r1, sp, #16
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f000 f9d4 	bl	8005064 <_printf_i>
 8004cbc:	e7eb      	b.n	8004c96 <_svfiprintf_r+0x1c2>
 8004cbe:	bf00      	nop
 8004cc0:	08005704 	.word	0x08005704
 8004cc4:	0800570e 	.word	0x0800570e
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	08004a1d 	.word	0x08004a1d
 8004cd0:	0800570a 	.word	0x0800570a

08004cd4 <__sfputc_r>:
 8004cd4:	6893      	ldr	r3, [r2, #8]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	b410      	push	{r4}
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	da08      	bge.n	8004cf2 <__sfputc_r+0x1e>
 8004ce0:	6994      	ldr	r4, [r2, #24]
 8004ce2:	42a3      	cmp	r3, r4
 8004ce4:	db01      	blt.n	8004cea <__sfputc_r+0x16>
 8004ce6:	290a      	cmp	r1, #10
 8004ce8:	d103      	bne.n	8004cf2 <__sfputc_r+0x1e>
 8004cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cee:	f7ff bb0d 	b.w	800430c <__swbuf_r>
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	1c58      	adds	r0, r3, #1
 8004cf6:	6010      	str	r0, [r2, #0]
 8004cf8:	7019      	strb	r1, [r3, #0]
 8004cfa:	4608      	mov	r0, r1
 8004cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <__sfputs_r>:
 8004d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	4614      	mov	r4, r2
 8004d0a:	18d5      	adds	r5, r2, r3
 8004d0c:	42ac      	cmp	r4, r5
 8004d0e:	d101      	bne.n	8004d14 <__sfputs_r+0x12>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e007      	b.n	8004d24 <__sfputs_r+0x22>
 8004d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d18:	463a      	mov	r2, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f7ff ffda 	bl	8004cd4 <__sfputc_r>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d1f3      	bne.n	8004d0c <__sfputs_r+0xa>
 8004d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d28 <_vfiprintf_r>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	b09d      	sub	sp, #116	; 0x74
 8004d30:	4614      	mov	r4, r2
 8004d32:	4698      	mov	r8, r3
 8004d34:	4606      	mov	r6, r0
 8004d36:	b118      	cbz	r0, 8004d40 <_vfiprintf_r+0x18>
 8004d38:	6983      	ldr	r3, [r0, #24]
 8004d3a:	b90b      	cbnz	r3, 8004d40 <_vfiprintf_r+0x18>
 8004d3c:	f7ff fcc0 	bl	80046c0 <__sinit>
 8004d40:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <_vfiprintf_r+0x240>)
 8004d42:	429d      	cmp	r5, r3
 8004d44:	d11b      	bne.n	8004d7e <_vfiprintf_r+0x56>
 8004d46:	6875      	ldr	r5, [r6, #4]
 8004d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d4a:	07d9      	lsls	r1, r3, #31
 8004d4c:	d405      	bmi.n	8004d5a <_vfiprintf_r+0x32>
 8004d4e:	89ab      	ldrh	r3, [r5, #12]
 8004d50:	059a      	lsls	r2, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_vfiprintf_r+0x32>
 8004d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d56:	f7ff fd51 	bl	80047fc <__retarget_lock_acquire_recursive>
 8004d5a:	89ab      	ldrh	r3, [r5, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	d501      	bpl.n	8004d64 <_vfiprintf_r+0x3c>
 8004d60:	692b      	ldr	r3, [r5, #16]
 8004d62:	b9eb      	cbnz	r3, 8004da0 <_vfiprintf_r+0x78>
 8004d64:	4629      	mov	r1, r5
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7ff fb22 	bl	80043b0 <__swsetup_r>
 8004d6c:	b1c0      	cbz	r0, 8004da0 <_vfiprintf_r+0x78>
 8004d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d70:	07dc      	lsls	r4, r3, #31
 8004d72:	d50e      	bpl.n	8004d92 <_vfiprintf_r+0x6a>
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	b01d      	add	sp, #116	; 0x74
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <_vfiprintf_r+0x244>)
 8004d80:	429d      	cmp	r5, r3
 8004d82:	d101      	bne.n	8004d88 <_vfiprintf_r+0x60>
 8004d84:	68b5      	ldr	r5, [r6, #8]
 8004d86:	e7df      	b.n	8004d48 <_vfiprintf_r+0x20>
 8004d88:	4b79      	ldr	r3, [pc, #484]	; (8004f70 <_vfiprintf_r+0x248>)
 8004d8a:	429d      	cmp	r5, r3
 8004d8c:	bf08      	it	eq
 8004d8e:	68f5      	ldreq	r5, [r6, #12]
 8004d90:	e7da      	b.n	8004d48 <_vfiprintf_r+0x20>
 8004d92:	89ab      	ldrh	r3, [r5, #12]
 8004d94:	0598      	lsls	r0, r3, #22
 8004d96:	d4ed      	bmi.n	8004d74 <_vfiprintf_r+0x4c>
 8004d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d9a:	f7ff fd30 	bl	80047fe <__retarget_lock_release_recursive>
 8004d9e:	e7e9      	b.n	8004d74 <_vfiprintf_r+0x4c>
 8004da0:	2300      	movs	r3, #0
 8004da2:	9309      	str	r3, [sp, #36]	; 0x24
 8004da4:	2320      	movs	r3, #32
 8004da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dae:	2330      	movs	r3, #48	; 0x30
 8004db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f74 <_vfiprintf_r+0x24c>
 8004db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db8:	f04f 0901 	mov.w	r9, #1
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	469a      	mov	sl, r3
 8004dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc4:	b10a      	cbz	r2, 8004dca <_vfiprintf_r+0xa2>
 8004dc6:	2a25      	cmp	r2, #37	; 0x25
 8004dc8:	d1f9      	bne.n	8004dbe <_vfiprintf_r+0x96>
 8004dca:	ebba 0b04 	subs.w	fp, sl, r4
 8004dce:	d00b      	beq.n	8004de8 <_vfiprintf_r+0xc0>
 8004dd0:	465b      	mov	r3, fp
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f7ff ff93 	bl	8004d02 <__sfputs_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f000 80aa 	beq.w	8004f36 <_vfiprintf_r+0x20e>
 8004de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de4:	445a      	add	r2, fp
 8004de6:	9209      	str	r2, [sp, #36]	; 0x24
 8004de8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a2 	beq.w	8004f36 <_vfiprintf_r+0x20e>
 8004df2:	2300      	movs	r3, #0
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfc:	f10a 0a01 	add.w	sl, sl, #1
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	9307      	str	r3, [sp, #28]
 8004e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e08:	931a      	str	r3, [sp, #104]	; 0x68
 8004e0a:	4654      	mov	r4, sl
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e12:	4858      	ldr	r0, [pc, #352]	; (8004f74 <_vfiprintf_r+0x24c>)
 8004e14:	f7fb f9e4 	bl	80001e0 <memchr>
 8004e18:	9a04      	ldr	r2, [sp, #16]
 8004e1a:	b9d8      	cbnz	r0, 8004e54 <_vfiprintf_r+0x12c>
 8004e1c:	06d1      	lsls	r1, r2, #27
 8004e1e:	bf44      	itt	mi
 8004e20:	2320      	movmi	r3, #32
 8004e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e26:	0713      	lsls	r3, r2, #28
 8004e28:	bf44      	itt	mi
 8004e2a:	232b      	movmi	r3, #43	; 0x2b
 8004e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e30:	f89a 3000 	ldrb.w	r3, [sl]
 8004e34:	2b2a      	cmp	r3, #42	; 0x2a
 8004e36:	d015      	beq.n	8004e64 <_vfiprintf_r+0x13c>
 8004e38:	9a07      	ldr	r2, [sp, #28]
 8004e3a:	4654      	mov	r4, sl
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f04f 0c0a 	mov.w	ip, #10
 8004e42:	4621      	mov	r1, r4
 8004e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e48:	3b30      	subs	r3, #48	; 0x30
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d94e      	bls.n	8004eec <_vfiprintf_r+0x1c4>
 8004e4e:	b1b0      	cbz	r0, 8004e7e <_vfiprintf_r+0x156>
 8004e50:	9207      	str	r2, [sp, #28]
 8004e52:	e014      	b.n	8004e7e <_vfiprintf_r+0x156>
 8004e54:	eba0 0308 	sub.w	r3, r0, r8
 8004e58:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	46a2      	mov	sl, r4
 8004e62:	e7d2      	b.n	8004e0a <_vfiprintf_r+0xe2>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	1d19      	adds	r1, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	9103      	str	r1, [sp, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bfbb      	ittet	lt
 8004e70:	425b      	neglt	r3, r3
 8004e72:	f042 0202 	orrlt.w	r2, r2, #2
 8004e76:	9307      	strge	r3, [sp, #28]
 8004e78:	9307      	strlt	r3, [sp, #28]
 8004e7a:	bfb8      	it	lt
 8004e7c:	9204      	strlt	r2, [sp, #16]
 8004e7e:	7823      	ldrb	r3, [r4, #0]
 8004e80:	2b2e      	cmp	r3, #46	; 0x2e
 8004e82:	d10c      	bne.n	8004e9e <_vfiprintf_r+0x176>
 8004e84:	7863      	ldrb	r3, [r4, #1]
 8004e86:	2b2a      	cmp	r3, #42	; 0x2a
 8004e88:	d135      	bne.n	8004ef6 <_vfiprintf_r+0x1ce>
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	1d1a      	adds	r2, r3, #4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	9203      	str	r2, [sp, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfb8      	it	lt
 8004e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e9a:	3402      	adds	r4, #2
 8004e9c:	9305      	str	r3, [sp, #20]
 8004e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f84 <_vfiprintf_r+0x25c>
 8004ea2:	7821      	ldrb	r1, [r4, #0]
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	4650      	mov	r0, sl
 8004ea8:	f7fb f99a 	bl	80001e0 <memchr>
 8004eac:	b140      	cbz	r0, 8004ec0 <_vfiprintf_r+0x198>
 8004eae:	2340      	movs	r3, #64	; 0x40
 8004eb0:	eba0 000a 	sub.w	r0, r0, sl
 8004eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8004eb8:	9b04      	ldr	r3, [sp, #16]
 8004eba:	4303      	orrs	r3, r0
 8004ebc:	3401      	adds	r4, #1
 8004ebe:	9304      	str	r3, [sp, #16]
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	482c      	ldr	r0, [pc, #176]	; (8004f78 <_vfiprintf_r+0x250>)
 8004ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eca:	2206      	movs	r2, #6
 8004ecc:	f7fb f988 	bl	80001e0 <memchr>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d03f      	beq.n	8004f54 <_vfiprintf_r+0x22c>
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <_vfiprintf_r+0x254>)
 8004ed6:	bb1b      	cbnz	r3, 8004f20 <_vfiprintf_r+0x1f8>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	3307      	adds	r3, #7
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	443b      	add	r3, r7
 8004ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eea:	e767      	b.n	8004dbc <_vfiprintf_r+0x94>
 8004eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	e7a5      	b.n	8004e42 <_vfiprintf_r+0x11a>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	3401      	adds	r4, #1
 8004efa:	9305      	str	r3, [sp, #20]
 8004efc:	4619      	mov	r1, r3
 8004efe:	f04f 0c0a 	mov.w	ip, #10
 8004f02:	4620      	mov	r0, r4
 8004f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f08:	3a30      	subs	r2, #48	; 0x30
 8004f0a:	2a09      	cmp	r2, #9
 8004f0c:	d903      	bls.n	8004f16 <_vfiprintf_r+0x1ee>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0c5      	beq.n	8004e9e <_vfiprintf_r+0x176>
 8004f12:	9105      	str	r1, [sp, #20]
 8004f14:	e7c3      	b.n	8004e9e <_vfiprintf_r+0x176>
 8004f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e7f0      	b.n	8004f02 <_vfiprintf_r+0x1da>
 8004f20:	ab03      	add	r3, sp, #12
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	462a      	mov	r2, r5
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <_vfiprintf_r+0x258>)
 8004f28:	a904      	add	r1, sp, #16
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f3af 8000 	nop.w
 8004f30:	4607      	mov	r7, r0
 8004f32:	1c78      	adds	r0, r7, #1
 8004f34:	d1d6      	bne.n	8004ee4 <_vfiprintf_r+0x1bc>
 8004f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f38:	07d9      	lsls	r1, r3, #31
 8004f3a:	d405      	bmi.n	8004f48 <_vfiprintf_r+0x220>
 8004f3c:	89ab      	ldrh	r3, [r5, #12]
 8004f3e:	059a      	lsls	r2, r3, #22
 8004f40:	d402      	bmi.n	8004f48 <_vfiprintf_r+0x220>
 8004f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f44:	f7ff fc5b 	bl	80047fe <__retarget_lock_release_recursive>
 8004f48:	89ab      	ldrh	r3, [r5, #12]
 8004f4a:	065b      	lsls	r3, r3, #25
 8004f4c:	f53f af12 	bmi.w	8004d74 <_vfiprintf_r+0x4c>
 8004f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f52:	e711      	b.n	8004d78 <_vfiprintf_r+0x50>
 8004f54:	ab03      	add	r3, sp, #12
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	462a      	mov	r2, r5
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <_vfiprintf_r+0x258>)
 8004f5c:	a904      	add	r1, sp, #16
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 f880 	bl	8005064 <_printf_i>
 8004f64:	e7e4      	b.n	8004f30 <_vfiprintf_r+0x208>
 8004f66:	bf00      	nop
 8004f68:	080056c4 	.word	0x080056c4
 8004f6c:	080056e4 	.word	0x080056e4
 8004f70:	080056a4 	.word	0x080056a4
 8004f74:	08005704 	.word	0x08005704
 8004f78:	0800570e 	.word	0x0800570e
 8004f7c:	00000000 	.word	0x00000000
 8004f80:	08004d03 	.word	0x08004d03
 8004f84:	0800570a 	.word	0x0800570a

08004f88 <_printf_common>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	4699      	mov	r9, r3
 8004f90:	688a      	ldr	r2, [r1, #8]
 8004f92:	690b      	ldr	r3, [r1, #16]
 8004f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bfb8      	it	lt
 8004f9c:	4613      	movlt	r3, r2
 8004f9e:	6033      	str	r3, [r6, #0]
 8004fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	b10a      	cbz	r2, 8004fae <_printf_common+0x26>
 8004faa:	3301      	adds	r3, #1
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	0699      	lsls	r1, r3, #26
 8004fb2:	bf42      	ittt	mi
 8004fb4:	6833      	ldrmi	r3, [r6, #0]
 8004fb6:	3302      	addmi	r3, #2
 8004fb8:	6033      	strmi	r3, [r6, #0]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	f015 0506 	ands.w	r5, r5, #6
 8004fc0:	d106      	bne.n	8004fd0 <_printf_common+0x48>
 8004fc2:	f104 0a19 	add.w	sl, r4, #25
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	6832      	ldr	r2, [r6, #0]
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dc26      	bgt.n	800501e <_printf_common+0x96>
 8004fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd4:	1e13      	subs	r3, r2, #0
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	0692      	lsls	r2, r2, #26
 8004fde:	d42b      	bmi.n	8005038 <_printf_common+0xb0>
 8004fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d01e      	beq.n	800502c <_printf_common+0xa4>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	68e5      	ldr	r5, [r4, #12]
 8004ff2:	6832      	ldr	r2, [r6, #0]
 8004ff4:	f003 0306 	and.w	r3, r3, #6
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	bf08      	it	eq
 8004ffc:	1aad      	subeq	r5, r5, r2
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	6922      	ldr	r2, [r4, #16]
 8005002:	bf0c      	ite	eq
 8005004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005008:	2500      	movne	r5, #0
 800500a:	4293      	cmp	r3, r2
 800500c:	bfc4      	itt	gt
 800500e:	1a9b      	subgt	r3, r3, r2
 8005010:	18ed      	addgt	r5, r5, r3
 8005012:	2600      	movs	r6, #0
 8005014:	341a      	adds	r4, #26
 8005016:	42b5      	cmp	r5, r6
 8005018:	d11a      	bne.n	8005050 <_printf_common+0xc8>
 800501a:	2000      	movs	r0, #0
 800501c:	e008      	b.n	8005030 <_printf_common+0xa8>
 800501e:	2301      	movs	r3, #1
 8005020:	4652      	mov	r2, sl
 8005022:	4649      	mov	r1, r9
 8005024:	4638      	mov	r0, r7
 8005026:	47c0      	blx	r8
 8005028:	3001      	adds	r0, #1
 800502a:	d103      	bne.n	8005034 <_printf_common+0xac>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005034:	3501      	adds	r5, #1
 8005036:	e7c6      	b.n	8004fc6 <_printf_common+0x3e>
 8005038:	18e1      	adds	r1, r4, r3
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	2030      	movs	r0, #48	; 0x30
 800503e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005042:	4422      	add	r2, r4
 8005044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800504c:	3302      	adds	r3, #2
 800504e:	e7c7      	b.n	8004fe0 <_printf_common+0x58>
 8005050:	2301      	movs	r3, #1
 8005052:	4622      	mov	r2, r4
 8005054:	4649      	mov	r1, r9
 8005056:	4638      	mov	r0, r7
 8005058:	47c0      	blx	r8
 800505a:	3001      	adds	r0, #1
 800505c:	d0e6      	beq.n	800502c <_printf_common+0xa4>
 800505e:	3601      	adds	r6, #1
 8005060:	e7d9      	b.n	8005016 <_printf_common+0x8e>
	...

08005064 <_printf_i>:
 8005064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	460c      	mov	r4, r1
 800506a:	4691      	mov	r9, r2
 800506c:	7e27      	ldrb	r7, [r4, #24]
 800506e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005070:	2f78      	cmp	r7, #120	; 0x78
 8005072:	4680      	mov	r8, r0
 8005074:	469a      	mov	sl, r3
 8005076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507a:	d807      	bhi.n	800508c <_printf_i+0x28>
 800507c:	2f62      	cmp	r7, #98	; 0x62
 800507e:	d80a      	bhi.n	8005096 <_printf_i+0x32>
 8005080:	2f00      	cmp	r7, #0
 8005082:	f000 80d8 	beq.w	8005236 <_printf_i+0x1d2>
 8005086:	2f58      	cmp	r7, #88	; 0x58
 8005088:	f000 80a3 	beq.w	80051d2 <_printf_i+0x16e>
 800508c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005094:	e03a      	b.n	800510c <_printf_i+0xa8>
 8005096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800509a:	2b15      	cmp	r3, #21
 800509c:	d8f6      	bhi.n	800508c <_printf_i+0x28>
 800509e:	a001      	add	r0, pc, #4	; (adr r0, 80050a4 <_printf_i+0x40>)
 80050a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	08005111 	.word	0x08005111
 80050ac:	0800508d 	.word	0x0800508d
 80050b0:	0800508d 	.word	0x0800508d
 80050b4:	0800508d 	.word	0x0800508d
 80050b8:	0800508d 	.word	0x0800508d
 80050bc:	08005111 	.word	0x08005111
 80050c0:	0800508d 	.word	0x0800508d
 80050c4:	0800508d 	.word	0x0800508d
 80050c8:	0800508d 	.word	0x0800508d
 80050cc:	0800508d 	.word	0x0800508d
 80050d0:	0800521d 	.word	0x0800521d
 80050d4:	08005141 	.word	0x08005141
 80050d8:	080051ff 	.word	0x080051ff
 80050dc:	0800508d 	.word	0x0800508d
 80050e0:	0800508d 	.word	0x0800508d
 80050e4:	0800523f 	.word	0x0800523f
 80050e8:	0800508d 	.word	0x0800508d
 80050ec:	08005141 	.word	0x08005141
 80050f0:	0800508d 	.word	0x0800508d
 80050f4:	0800508d 	.word	0x0800508d
 80050f8:	08005207 	.word	0x08005207
 80050fc:	680b      	ldr	r3, [r1, #0]
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	600a      	str	r2, [r1, #0]
 8005104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800510c:	2301      	movs	r3, #1
 800510e:	e0a3      	b.n	8005258 <_printf_i+0x1f4>
 8005110:	6825      	ldr	r5, [r4, #0]
 8005112:	6808      	ldr	r0, [r1, #0]
 8005114:	062e      	lsls	r6, r5, #24
 8005116:	f100 0304 	add.w	r3, r0, #4
 800511a:	d50a      	bpl.n	8005132 <_printf_i+0xce>
 800511c:	6805      	ldr	r5, [r0, #0]
 800511e:	600b      	str	r3, [r1, #0]
 8005120:	2d00      	cmp	r5, #0
 8005122:	da03      	bge.n	800512c <_printf_i+0xc8>
 8005124:	232d      	movs	r3, #45	; 0x2d
 8005126:	426d      	negs	r5, r5
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	485e      	ldr	r0, [pc, #376]	; (80052a8 <_printf_i+0x244>)
 800512e:	230a      	movs	r3, #10
 8005130:	e019      	b.n	8005166 <_printf_i+0x102>
 8005132:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005136:	6805      	ldr	r5, [r0, #0]
 8005138:	600b      	str	r3, [r1, #0]
 800513a:	bf18      	it	ne
 800513c:	b22d      	sxthne	r5, r5
 800513e:	e7ef      	b.n	8005120 <_printf_i+0xbc>
 8005140:	680b      	ldr	r3, [r1, #0]
 8005142:	6825      	ldr	r5, [r4, #0]
 8005144:	1d18      	adds	r0, r3, #4
 8005146:	6008      	str	r0, [r1, #0]
 8005148:	0628      	lsls	r0, r5, #24
 800514a:	d501      	bpl.n	8005150 <_printf_i+0xec>
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	e002      	b.n	8005156 <_printf_i+0xf2>
 8005150:	0669      	lsls	r1, r5, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0xe8>
 8005154:	881d      	ldrh	r5, [r3, #0]
 8005156:	4854      	ldr	r0, [pc, #336]	; (80052a8 <_printf_i+0x244>)
 8005158:	2f6f      	cmp	r7, #111	; 0x6f
 800515a:	bf0c      	ite	eq
 800515c:	2308      	moveq	r3, #8
 800515e:	230a      	movne	r3, #10
 8005160:	2100      	movs	r1, #0
 8005162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005166:	6866      	ldr	r6, [r4, #4]
 8005168:	60a6      	str	r6, [r4, #8]
 800516a:	2e00      	cmp	r6, #0
 800516c:	bfa2      	ittt	ge
 800516e:	6821      	ldrge	r1, [r4, #0]
 8005170:	f021 0104 	bicge.w	r1, r1, #4
 8005174:	6021      	strge	r1, [r4, #0]
 8005176:	b90d      	cbnz	r5, 800517c <_printf_i+0x118>
 8005178:	2e00      	cmp	r6, #0
 800517a:	d04d      	beq.n	8005218 <_printf_i+0x1b4>
 800517c:	4616      	mov	r6, r2
 800517e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005182:	fb03 5711 	mls	r7, r3, r1, r5
 8005186:	5dc7      	ldrb	r7, [r0, r7]
 8005188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800518c:	462f      	mov	r7, r5
 800518e:	42bb      	cmp	r3, r7
 8005190:	460d      	mov	r5, r1
 8005192:	d9f4      	bls.n	800517e <_printf_i+0x11a>
 8005194:	2b08      	cmp	r3, #8
 8005196:	d10b      	bne.n	80051b0 <_printf_i+0x14c>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	07df      	lsls	r7, r3, #31
 800519c:	d508      	bpl.n	80051b0 <_printf_i+0x14c>
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	6861      	ldr	r1, [r4, #4]
 80051a2:	4299      	cmp	r1, r3
 80051a4:	bfde      	ittt	le
 80051a6:	2330      	movle	r3, #48	; 0x30
 80051a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051b0:	1b92      	subs	r2, r2, r6
 80051b2:	6122      	str	r2, [r4, #16]
 80051b4:	f8cd a000 	str.w	sl, [sp]
 80051b8:	464b      	mov	r3, r9
 80051ba:	aa03      	add	r2, sp, #12
 80051bc:	4621      	mov	r1, r4
 80051be:	4640      	mov	r0, r8
 80051c0:	f7ff fee2 	bl	8004f88 <_printf_common>
 80051c4:	3001      	adds	r0, #1
 80051c6:	d14c      	bne.n	8005262 <_printf_i+0x1fe>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	b004      	add	sp, #16
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	4835      	ldr	r0, [pc, #212]	; (80052a8 <_printf_i+0x244>)
 80051d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	680e      	ldr	r6, [r1, #0]
 80051dc:	061f      	lsls	r7, r3, #24
 80051de:	f856 5b04 	ldr.w	r5, [r6], #4
 80051e2:	600e      	str	r6, [r1, #0]
 80051e4:	d514      	bpl.n	8005210 <_printf_i+0x1ac>
 80051e6:	07d9      	lsls	r1, r3, #31
 80051e8:	bf44      	itt	mi
 80051ea:	f043 0320 	orrmi.w	r3, r3, #32
 80051ee:	6023      	strmi	r3, [r4, #0]
 80051f0:	b91d      	cbnz	r5, 80051fa <_printf_i+0x196>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	f023 0320 	bic.w	r3, r3, #32
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	2310      	movs	r3, #16
 80051fc:	e7b0      	b.n	8005160 <_printf_i+0xfc>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f043 0320 	orr.w	r3, r3, #32
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	2378      	movs	r3, #120	; 0x78
 8005208:	4828      	ldr	r0, [pc, #160]	; (80052ac <_printf_i+0x248>)
 800520a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800520e:	e7e3      	b.n	80051d8 <_printf_i+0x174>
 8005210:	065e      	lsls	r6, r3, #25
 8005212:	bf48      	it	mi
 8005214:	b2ad      	uxthmi	r5, r5
 8005216:	e7e6      	b.n	80051e6 <_printf_i+0x182>
 8005218:	4616      	mov	r6, r2
 800521a:	e7bb      	b.n	8005194 <_printf_i+0x130>
 800521c:	680b      	ldr	r3, [r1, #0]
 800521e:	6826      	ldr	r6, [r4, #0]
 8005220:	6960      	ldr	r0, [r4, #20]
 8005222:	1d1d      	adds	r5, r3, #4
 8005224:	600d      	str	r5, [r1, #0]
 8005226:	0635      	lsls	r5, r6, #24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	d501      	bpl.n	8005230 <_printf_i+0x1cc>
 800522c:	6018      	str	r0, [r3, #0]
 800522e:	e002      	b.n	8005236 <_printf_i+0x1d2>
 8005230:	0671      	lsls	r1, r6, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0x1c8>
 8005234:	8018      	strh	r0, [r3, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	4616      	mov	r6, r2
 800523c:	e7ba      	b.n	80051b4 <_printf_i+0x150>
 800523e:	680b      	ldr	r3, [r1, #0]
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	600a      	str	r2, [r1, #0]
 8005244:	681e      	ldr	r6, [r3, #0]
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	2100      	movs	r1, #0
 800524a:	4630      	mov	r0, r6
 800524c:	f7fa ffc8 	bl	80001e0 <memchr>
 8005250:	b108      	cbz	r0, 8005256 <_printf_i+0x1f2>
 8005252:	1b80      	subs	r0, r0, r6
 8005254:	6060      	str	r0, [r4, #4]
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	2300      	movs	r3, #0
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	e7a8      	b.n	80051b4 <_printf_i+0x150>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	4632      	mov	r2, r6
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	47d0      	blx	sl
 800526c:	3001      	adds	r0, #1
 800526e:	d0ab      	beq.n	80051c8 <_printf_i+0x164>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	079b      	lsls	r3, r3, #30
 8005274:	d413      	bmi.n	800529e <_printf_i+0x23a>
 8005276:	68e0      	ldr	r0, [r4, #12]
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	4298      	cmp	r0, r3
 800527c:	bfb8      	it	lt
 800527e:	4618      	movlt	r0, r3
 8005280:	e7a4      	b.n	80051cc <_printf_i+0x168>
 8005282:	2301      	movs	r3, #1
 8005284:	4632      	mov	r2, r6
 8005286:	4649      	mov	r1, r9
 8005288:	4640      	mov	r0, r8
 800528a:	47d0      	blx	sl
 800528c:	3001      	adds	r0, #1
 800528e:	d09b      	beq.n	80051c8 <_printf_i+0x164>
 8005290:	3501      	adds	r5, #1
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	1a5b      	subs	r3, r3, r1
 8005298:	42ab      	cmp	r3, r5
 800529a:	dcf2      	bgt.n	8005282 <_printf_i+0x21e>
 800529c:	e7eb      	b.n	8005276 <_printf_i+0x212>
 800529e:	2500      	movs	r5, #0
 80052a0:	f104 0619 	add.w	r6, r4, #25
 80052a4:	e7f5      	b.n	8005292 <_printf_i+0x22e>
 80052a6:	bf00      	nop
 80052a8:	08005715 	.word	0x08005715
 80052ac:	08005726 	.word	0x08005726

080052b0 <_sbrk_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d06      	ldr	r5, [pc, #24]	; (80052cc <_sbrk_r+0x1c>)
 80052b4:	2300      	movs	r3, #0
 80052b6:	4604      	mov	r4, r0
 80052b8:	4608      	mov	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fc f8fa 	bl	80014b4 <_sbrk>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_sbrk_r+0x1a>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_sbrk_r+0x1a>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	20000274 	.word	0x20000274

080052d0 <__sread>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	460c      	mov	r4, r1
 80052d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d8:	f000 f8ee 	bl	80054b8 <_read_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	bfab      	itete	ge
 80052e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052e2:	89a3      	ldrhlt	r3, [r4, #12]
 80052e4:	181b      	addge	r3, r3, r0
 80052e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ea:	bfac      	ite	ge
 80052ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ee:	81a3      	strhlt	r3, [r4, #12]
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <__swrite>:
 80052f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f6:	461f      	mov	r7, r3
 80052f8:	898b      	ldrh	r3, [r1, #12]
 80052fa:	05db      	lsls	r3, r3, #23
 80052fc:	4605      	mov	r5, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	4616      	mov	r6, r2
 8005302:	d505      	bpl.n	8005310 <__swrite+0x1e>
 8005304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005308:	2302      	movs	r3, #2
 800530a:	2200      	movs	r2, #0
 800530c:	f000 f868 	bl	80053e0 <_lseek_r>
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800531a:	81a3      	strh	r3, [r4, #12]
 800531c:	4632      	mov	r2, r6
 800531e:	463b      	mov	r3, r7
 8005320:	4628      	mov	r0, r5
 8005322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005326:	f000 b817 	b.w	8005358 <_write_r>

0800532a <__sseek>:
 800532a:	b510      	push	{r4, lr}
 800532c:	460c      	mov	r4, r1
 800532e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005332:	f000 f855 	bl	80053e0 <_lseek_r>
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	bf15      	itete	ne
 800533c:	6560      	strne	r0, [r4, #84]	; 0x54
 800533e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005346:	81a3      	strheq	r3, [r4, #12]
 8005348:	bf18      	it	ne
 800534a:	81a3      	strhne	r3, [r4, #12]
 800534c:	bd10      	pop	{r4, pc}

0800534e <__sclose>:
 800534e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005352:	f000 b813 	b.w	800537c <_close_r>
	...

08005358 <_write_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d07      	ldr	r5, [pc, #28]	; (8005378 <_write_r+0x20>)
 800535c:	4604      	mov	r4, r0
 800535e:	4608      	mov	r0, r1
 8005360:	4611      	mov	r1, r2
 8005362:	2200      	movs	r2, #0
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	f7fc f853 	bl	8001412 <_write>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_write_r+0x1e>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_write_r+0x1e>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000274 	.word	0x20000274

0800537c <_close_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d06      	ldr	r5, [pc, #24]	; (8005398 <_close_r+0x1c>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	f7fc f85f 	bl	800144a <_close>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_close_r+0x1a>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_close_r+0x1a>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20000274 	.word	0x20000274

0800539c <_fstat_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4d07      	ldr	r5, [pc, #28]	; (80053bc <_fstat_r+0x20>)
 80053a0:	2300      	movs	r3, #0
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	f7fc f85a 	bl	8001462 <_fstat>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	d102      	bne.n	80053b8 <_fstat_r+0x1c>
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	b103      	cbz	r3, 80053b8 <_fstat_r+0x1c>
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
 80053ba:	bf00      	nop
 80053bc:	20000274 	.word	0x20000274

080053c0 <_isatty_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d06      	ldr	r5, [pc, #24]	; (80053dc <_isatty_r+0x1c>)
 80053c4:	2300      	movs	r3, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fc f859 	bl	8001482 <_isatty>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_isatty_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_isatty_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	20000274 	.word	0x20000274

080053e0 <_lseek_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	; (8005400 <_lseek_r+0x20>)
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fc f852 	bl	8001498 <_lseek>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_lseek_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_lseek_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000274 	.word	0x20000274

08005404 <memcpy>:
 8005404:	440a      	add	r2, r1
 8005406:	4291      	cmp	r1, r2
 8005408:	f100 33ff 	add.w	r3, r0, #4294967295
 800540c:	d100      	bne.n	8005410 <memcpy+0xc>
 800540e:	4770      	bx	lr
 8005410:	b510      	push	{r4, lr}
 8005412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800541a:	4291      	cmp	r1, r2
 800541c:	d1f9      	bne.n	8005412 <memcpy+0xe>
 800541e:	bd10      	pop	{r4, pc}

08005420 <memmove>:
 8005420:	4288      	cmp	r0, r1
 8005422:	b510      	push	{r4, lr}
 8005424:	eb01 0402 	add.w	r4, r1, r2
 8005428:	d902      	bls.n	8005430 <memmove+0x10>
 800542a:	4284      	cmp	r4, r0
 800542c:	4623      	mov	r3, r4
 800542e:	d807      	bhi.n	8005440 <memmove+0x20>
 8005430:	1e43      	subs	r3, r0, #1
 8005432:	42a1      	cmp	r1, r4
 8005434:	d008      	beq.n	8005448 <memmove+0x28>
 8005436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800543a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800543e:	e7f8      	b.n	8005432 <memmove+0x12>
 8005440:	4402      	add	r2, r0
 8005442:	4601      	mov	r1, r0
 8005444:	428a      	cmp	r2, r1
 8005446:	d100      	bne.n	800544a <memmove+0x2a>
 8005448:	bd10      	pop	{r4, pc}
 800544a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800544e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005452:	e7f7      	b.n	8005444 <memmove+0x24>

08005454 <__malloc_lock>:
 8005454:	4801      	ldr	r0, [pc, #4]	; (800545c <__malloc_lock+0x8>)
 8005456:	f7ff b9d1 	b.w	80047fc <__retarget_lock_acquire_recursive>
 800545a:	bf00      	nop
 800545c:	2000026c 	.word	0x2000026c

08005460 <__malloc_unlock>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__malloc_unlock+0x8>)
 8005462:	f7ff b9cc 	b.w	80047fe <__retarget_lock_release_recursive>
 8005466:	bf00      	nop
 8005468:	2000026c 	.word	0x2000026c

0800546c <_realloc_r>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	4607      	mov	r7, r0
 8005470:	4614      	mov	r4, r2
 8005472:	460e      	mov	r6, r1
 8005474:	b921      	cbnz	r1, 8005480 <_realloc_r+0x14>
 8005476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800547a:	4611      	mov	r1, r2
 800547c:	f7ff ba74 	b.w	8004968 <_malloc_r>
 8005480:	b922      	cbnz	r2, 800548c <_realloc_r+0x20>
 8005482:	f7ff fa21 	bl	80048c8 <_free_r>
 8005486:	4625      	mov	r5, r4
 8005488:	4628      	mov	r0, r5
 800548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800548c:	f000 f826 	bl	80054dc <_malloc_usable_size_r>
 8005490:	42a0      	cmp	r0, r4
 8005492:	d20f      	bcs.n	80054b4 <_realloc_r+0x48>
 8005494:	4621      	mov	r1, r4
 8005496:	4638      	mov	r0, r7
 8005498:	f7ff fa66 	bl	8004968 <_malloc_r>
 800549c:	4605      	mov	r5, r0
 800549e:	2800      	cmp	r0, #0
 80054a0:	d0f2      	beq.n	8005488 <_realloc_r+0x1c>
 80054a2:	4631      	mov	r1, r6
 80054a4:	4622      	mov	r2, r4
 80054a6:	f7ff ffad 	bl	8005404 <memcpy>
 80054aa:	4631      	mov	r1, r6
 80054ac:	4638      	mov	r0, r7
 80054ae:	f7ff fa0b 	bl	80048c8 <_free_r>
 80054b2:	e7e9      	b.n	8005488 <_realloc_r+0x1c>
 80054b4:	4635      	mov	r5, r6
 80054b6:	e7e7      	b.n	8005488 <_realloc_r+0x1c>

080054b8 <_read_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4d07      	ldr	r5, [pc, #28]	; (80054d8 <_read_r+0x20>)
 80054bc:	4604      	mov	r4, r0
 80054be:	4608      	mov	r0, r1
 80054c0:	4611      	mov	r1, r2
 80054c2:	2200      	movs	r2, #0
 80054c4:	602a      	str	r2, [r5, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f7fb ff86 	bl	80013d8 <_read>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d102      	bne.n	80054d6 <_read_r+0x1e>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	b103      	cbz	r3, 80054d6 <_read_r+0x1e>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	20000274 	.word	0x20000274

080054dc <_malloc_usable_size_r>:
 80054dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e0:	1f18      	subs	r0, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfbc      	itt	lt
 80054e6:	580b      	ldrlt	r3, [r1, r0]
 80054e8:	18c0      	addlt	r0, r0, r3
 80054ea:	4770      	bx	lr

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
