
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055dc  080055dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080055e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000078  0800565c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800565c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001166e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207b  00000000  00000000  00031716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  000346e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001744a  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001117a  00000000  00000000  0004c9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092193  00000000  00000000  0005db74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efd07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b14  00000000  00000000  000efd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053b0 	.word	0x080053b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080053b0 	.word	0x080053b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DEV_Set_I2CAddress>:
unsigned char i;
	unsigned short  Gesture_Data;
UWORD IIC_Addr_t = IIC_Addr;

void DEV_Set_I2CAddress(UBYTE add_)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	IIC_Addr_t = add_;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <DEV_Set_I2CAddress+0x20>)
 8000588:	801a      	strh	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <DEV_I2C_WriteByte>:
/******************************************************************************
function:
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af04      	add	r7, sp, #16
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	UBYTE Buf[1] = {0};
 80005ac:	2300      	movs	r3, #0
 80005ae:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <DEV_I2C_WriteByte+0x40>)
 80005b6:	8819      	ldrh	r1, [r3, #0]
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2310      	movs	r3, #16
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <DEV_I2C_WriteByte+0x44>)
 80005ce:	f001 fc01 	bl	8001dd4 <HAL_I2C_Mem_Write>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	200000b8 	.word	0x200000b8

080005e4 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	UBYTE Buf[1]={add_};
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <DEV_I2C_ReadByte+0x38>)
 80005f4:	8819      	ldrh	r1, [r3, #0]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	2310      	movs	r3, #16
 80005fc:	9302      	str	r3, [sp, #8]
 80005fe:	2301      	movs	r3, #1
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <DEV_I2C_ReadByte+0x3c>)
 800060c:	f001 fcdc 	bl	8001fc8 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000610:	7b3b      	ldrb	r3, [r7, #12]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	200000b8 	.word	0x200000b8

08000624 <DEV_I2C_ReadWord>:

UWORD DEV_I2C_ReadWord(UBYTE add_)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af04      	add	r7, sp, #16
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    UBYTE Buf[2]={0, 0};
 800062e:	2300      	movs	r3, #0
 8000630:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <DEV_I2C_ReadWord+0x44>)
 8000634:	8819      	ldrh	r1, [r3, #0]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	b29a      	uxth	r2, r3
 800063a:	2310      	movs	r3, #16
 800063c:	9302      	str	r3, [sp, #8]
 800063e:	2302      	movs	r3, #2
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <DEV_I2C_ReadWord+0x48>)
 800064c:	f001 fcbc 	bl	8001fc8 <HAL_I2C_Mem_Read>
    return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000650:	7b7b      	ldrb	r3, [r7, #13]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	7b3b      	ldrb	r3, [r7, #12]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	200000b8 	.word	0x200000b8

08000670 <PAJ7620U2_init>:


unsigned char PAJ7620U2_init()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	unsigned char i,State;
	DEV_Set_I2CAddress(PAJ7620U2_I2C_ADDRESS);
 8000676:	20e6      	movs	r0, #230	; 0xe6
 8000678:	f7ff ff7e 	bl	8000578 <DEV_Set_I2CAddress>
	DEV_Delay_ms(5);
 800067c:	2005      	movs	r0, #5
 800067e:	f000 ff79 	bl	8001574 <HAL_Delay>
	State = DEV_I2C_ReadByte(0x00);												//Read State
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ffae 	bl	80005e4 <DEV_I2C_ReadByte>
 8000688:	4603      	mov	r3, r0
 800068a:	71bb      	strb	r3, [r7, #6]
	if (State != 0x20)
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b20      	cmp	r3, #32
 8000690:	d001      	beq.n	8000696 <PAJ7620U2_init+0x26>
		return 0;																						//Wake up failed
 8000692:	2300      	movs	r3, #0
 8000694:	e01a      	b.n	80006cc <PAJ7620U2_init+0x5c>
	DEV_I2C_WriteByte(PAJ_BANK_SELECT, 0);								//Select Bank 0
 8000696:	2100      	movs	r1, #0
 8000698:	20ef      	movs	r0, #239	; 0xef
 800069a:	f7ff ff7f 	bl	800059c <DEV_I2C_WriteByte>
	for (i=0;i< Init_Array;i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e00f      	b.n	80006c4 <PAJ7620U2_init+0x54>
	{
		 DEV_I2C_WriteByte(Init_Register_Array[i][0], Init_Register_Array[i][1]);//Power up initialize
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <PAJ7620U2_init+0x64>)
 80006a8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4909      	ldr	r1, [pc, #36]	; (80006d4 <PAJ7620U2_init+0x64>)
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	440b      	add	r3, r1
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4610      	mov	r0, r2
 80006ba:	f7ff ff6f 	bl	800059c <DEV_I2C_WriteByte>
	for (i=0;i< Init_Array;i++)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	3301      	adds	r3, #1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b32      	cmp	r3, #50	; 0x32
 80006c8:	d9ec      	bls.n	80006a4 <PAJ7620U2_init+0x34>
	}
	return 1;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08005480 	.word	0x08005480

080006d8 <HAL_TIM_PeriodElapsedCallback>:

int state=0;
int counter=0;
char sentbuffer[6];
char recievebuffer[3];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	 if(htim==&htim10){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d104      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		 counter++;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006f0:	6013      	str	r3, [r2, #0]
	  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	2000010c 	.word	0x2000010c
 8000704:	200000a8 	.word	0x200000a8

08000708 <check_password>:
void resettimer(){
	counter=0;
	memset(value,0,sizeof(value));
}
void check_password(){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af02      	add	r7, sp, #8

	sprintf(sentbuffer,"1%d%d%d%d\n",value[0],value[1],value[2],value[3]);
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <check_password+0xc4>)
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <check_password+0xc4>)
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <check_password+0xc4>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <check_password+0xc4>)
 800071c:	68d2      	ldr	r2, [r2, #12]
 800071e:	9201      	str	r2, [sp, #4]
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	492a      	ldr	r1, [pc, #168]	; (80007d0 <check_password+0xc8>)
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <check_password+0xcc>)
 800072a:	f003 fd31 	bl	8004190 <siprintf>
	HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	2206      	movs	r2, #6
 8000732:	4928      	ldr	r1, [pc, #160]	; (80007d4 <check_password+0xcc>)
 8000734:	4828      	ldr	r0, [pc, #160]	; (80007d8 <check_password+0xd0>)
 8000736:	f003 f900 	bl	800393a <HAL_UART_Transmit>
	while(HAL_UART_Receive(&huart1, recievebuffer, sizeof(recievebuffer), HAL_MAX_DELAY)!=HAL_OK){
 800073a:	e012      	b.n	8000762 <check_password+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <check_password+0xd4>)
 8000744:	f001 f9e8 	bl	8001b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2140      	movs	r1, #64	; 0x40
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <check_password+0xd4>)
 800074e:	f001 f9e3 	bl	8001b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2120      	movs	r1, #32
 8000756:	4821      	ldr	r0, [pc, #132]	; (80007dc <check_password+0xd4>)
 8000758:	f001 f9de 	bl	8001b18 <HAL_GPIO_WritePin>
		printf("waiting");
 800075c:	4820      	ldr	r0, [pc, #128]	; (80007e0 <check_password+0xd8>)
 800075e:	f003 fc89 	bl	8004074 <iprintf>
	while(HAL_UART_Receive(&huart1, recievebuffer, sizeof(recievebuffer), HAL_MAX_DELAY)!=HAL_OK){
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2203      	movs	r2, #3
 8000768:	491e      	ldr	r1, [pc, #120]	; (80007e4 <check_password+0xdc>)
 800076a:	481b      	ldr	r0, [pc, #108]	; (80007d8 <check_password+0xd0>)
 800076c:	f003 f977 	bl	8003a5e <HAL_UART_Receive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1e2      	bne.n	800073c <check_password+0x34>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <check_password+0xd4>)
 800077e:	f001 f9cb 	bl	8001b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	4815      	ldr	r0, [pc, #84]	; (80007dc <check_password+0xd4>)
 8000788:	f001 f9c6 	bl	8001b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <check_password+0xd4>)
 8000792:	f001 f9c1 	bl	8001b18 <HAL_GPIO_WritePin>
	if(recievebuffer[0]=='1'){
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <check_password+0xdc>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b31      	cmp	r3, #49	; 0x31
 800079c:	d108      	bne.n	80007b0 <check_password+0xa8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2120      	movs	r1, #32
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <check_password+0xe0>)
 80007a4:	f001 f9b8 	bl	8001b18 <HAL_GPIO_WritePin>
		state=2;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <check_password+0xe4>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	e007      	b.n	80007c0 <check_password+0xb8>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <check_password+0xe0>)
 80007b6:	f001 f9af 	bl	8001b18 <HAL_GPIO_WritePin>
		state=0;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <check_password+0xe4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	}
	counter=0;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <check_password+0xe8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]

}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000094 	.word	0x20000094
 80007d0:	080053c8 	.word	0x080053c8
 80007d4:	2000025c 	.word	0x2000025c
 80007d8:	2000017c 	.word	0x2000017c
 80007dc:	40020800 	.word	0x40020800
 80007e0:	080053d4 	.word	0x080053d4
 80007e4:	20000168 	.word	0x20000168
 80007e8:	40020000 	.word	0x40020000
 80007ec:	200000a4 	.word	0x200000a4
 80007f0:	200000a8 	.word	0x200000a8

080007f4 <updatevalue>:
void updatevalue(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af02      	add	r7, sp, #8
	Gesture_Data = DEV_I2C_ReadWord(PAJ_INT_FLAG1);
 80007fa:	2043      	movs	r0, #67	; 0x43
 80007fc:	f7ff ff12 	bl	8000624 <DEV_I2C_ReadWord>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <updatevalue+0x214>)
 8000806:	801a      	strh	r2, [r3, #0]
		if (Gesture_Data)
 8000808:	4b7f      	ldr	r3, [pc, #508]	; (8000a08 <updatevalue+0x214>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	f000 80f8 	beq.w	8000a02 <updatevalue+0x20e>
		{
			switch (Gesture_Data)
 8000812:	4b7d      	ldr	r3, [pc, #500]	; (8000a08 <updatevalue+0x214>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800081a:	f000 80c9 	beq.w	80009b0 <updatevalue+0x1bc>
 800081e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000822:	f300 80ed 	bgt.w	8000a00 <updatevalue+0x20c>
 8000826:	2b80      	cmp	r3, #128	; 0x80
 8000828:	f000 80bb 	beq.w	80009a2 <updatevalue+0x1ae>
 800082c:	2b80      	cmp	r3, #128	; 0x80
 800082e:	f300 80e7 	bgt.w	8000a00 <updatevalue+0x20c>
 8000832:	2b20      	cmp	r3, #32
 8000834:	dc4a      	bgt.n	80008cc <updatevalue+0xd8>
 8000836:	2b00      	cmp	r3, #0
 8000838:	f340 80e2 	ble.w	8000a00 <updatevalue+0x20c>
 800083c:	3b01      	subs	r3, #1
 800083e:	2b1f      	cmp	r3, #31
 8000840:	f200 80de 	bhi.w	8000a00 <updatevalue+0x20c>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <updatevalue+0x58>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	080008d3 	.word	0x080008d3
 8000850:	08000909 	.word	0x08000909
 8000854:	08000a01 	.word	0x08000a01
 8000858:	08000941 	.word	0x08000941
 800085c:	08000a01 	.word	0x08000a01
 8000860:	08000a01 	.word	0x08000a01
 8000864:	08000a01 	.word	0x08000a01
 8000868:	08000963 	.word	0x08000963
 800086c:	08000a01 	.word	0x08000a01
 8000870:	08000a01 	.word	0x08000a01
 8000874:	08000a01 	.word	0x08000a01
 8000878:	08000a01 	.word	0x08000a01
 800087c:	08000a01 	.word	0x08000a01
 8000880:	08000a01 	.word	0x08000a01
 8000884:	08000a01 	.word	0x08000a01
 8000888:	08000985 	.word	0x08000985
 800088c:	08000a01 	.word	0x08000a01
 8000890:	08000a01 	.word	0x08000a01
 8000894:	08000a01 	.word	0x08000a01
 8000898:	08000a01 	.word	0x08000a01
 800089c:	08000a01 	.word	0x08000a01
 80008a0:	08000a01 	.word	0x08000a01
 80008a4:	08000a01 	.word	0x08000a01
 80008a8:	08000a01 	.word	0x08000a01
 80008ac:	08000a01 	.word	0x08000a01
 80008b0:	08000a01 	.word	0x08000a01
 80008b4:	08000a01 	.word	0x08000a01
 80008b8:	08000a01 	.word	0x08000a01
 80008bc:	08000a01 	.word	0x08000a01
 80008c0:	08000a01 	.word	0x08000a01
 80008c4:	08000a01 	.word	0x08000a01
 80008c8:	0800098f 	.word	0x0800098f
 80008cc:	2b40      	cmp	r3, #64	; 0x40
 80008ce:	d063      	beq.n	8000998 <updatevalue+0x1a4>
				case PAJ_COUNT_CLOCKWISE:
					sprintf(gesturearr,"AntiClockwise\r\n");
					check_password();
					break;
				case PAJ_WAVE:							sprintf(gesturearr,"Wave\r\n"); 			break;
				default: return;
 80008d0:	e096      	b.n	8000a00 <updatevalue+0x20c>
			  			  	sprintf(gesturearr,"Up\r\n");
 80008d2:	494e      	ldr	r1, [pc, #312]	; (8000a0c <updatevalue+0x218>)
 80008d4:	484e      	ldr	r0, [pc, #312]	; (8000a10 <updatevalue+0x21c>)
 80008d6:	f003 fc5b 	bl	8004190 <siprintf>
			  			  	value[idx]=(value[idx]+1)%10;
 80008da:	4b4e      	ldr	r3, [pc, #312]	; (8000a14 <updatevalue+0x220>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <updatevalue+0x224>)
 80008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e4:	1c59      	adds	r1, r3, #1
 80008e6:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <updatevalue+0x220>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <updatevalue+0x228>)
 80008ec:	fb83 2301 	smull	r2, r3, r3, r1
 80008f0:	109a      	asrs	r2, r3, #2
 80008f2:	17cb      	asrs	r3, r1, #31
 80008f4:	1ad2      	subs	r2, r2, r3
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	1aca      	subs	r2, r1, r3
 8000900:	4b45      	ldr	r3, [pc, #276]	; (8000a18 <updatevalue+0x224>)
 8000902:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			  			  	break;
 8000906:	e058      	b.n	80009ba <updatevalue+0x1c6>
							sprintf(gesturearr,"Down\r\n");
 8000908:	4945      	ldr	r1, [pc, #276]	; (8000a20 <updatevalue+0x22c>)
 800090a:	4841      	ldr	r0, [pc, #260]	; (8000a10 <updatevalue+0x21c>)
 800090c:	f003 fc40 	bl	8004190 <siprintf>
							value[idx]=(value[idx]+10-1)%10;
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <updatevalue+0x220>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a40      	ldr	r2, [pc, #256]	; (8000a18 <updatevalue+0x224>)
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	f103 0109 	add.w	r1, r3, #9
 800091e:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <updatevalue+0x220>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <updatevalue+0x228>)
 8000924:	fb83 2301 	smull	r2, r3, r3, r1
 8000928:	109a      	asrs	r2, r3, #2
 800092a:	17cb      	asrs	r3, r1, #31
 800092c:	1ad2      	subs	r2, r2, r3
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	1aca      	subs	r2, r1, r3
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <updatevalue+0x224>)
 800093a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
							break;
 800093e:	e03c      	b.n	80009ba <updatevalue+0x1c6>
							sprintf(gesturearr,"Left\r\n");
 8000940:	4938      	ldr	r1, [pc, #224]	; (8000a24 <updatevalue+0x230>)
 8000942:	4833      	ldr	r0, [pc, #204]	; (8000a10 <updatevalue+0x21c>)
 8000944:	f003 fc24 	bl	8004190 <siprintf>
							idx=(idx+4-1)%4;
 8000948:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <updatevalue+0x220>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3303      	adds	r3, #3
 800094e:	425a      	negs	r2, r3
 8000950:	f003 0303 	and.w	r3, r3, #3
 8000954:	f002 0203 	and.w	r2, r2, #3
 8000958:	bf58      	it	pl
 800095a:	4253      	negpl	r3, r2
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <updatevalue+0x220>)
 800095e:	6013      	str	r3, [r2, #0]
							break;
 8000960:	e02b      	b.n	80009ba <updatevalue+0x1c6>
							sprintf(gesturearr,"Right\r\n");
 8000962:	4931      	ldr	r1, [pc, #196]	; (8000a28 <updatevalue+0x234>)
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <updatevalue+0x21c>)
 8000966:	f003 fc13 	bl	8004190 <siprintf>
							idx=(idx+1)%4;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <updatevalue+0x220>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	425a      	negs	r2, r3
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	f002 0203 	and.w	r2, r2, #3
 800097a:	bf58      	it	pl
 800097c:	4253      	negpl	r3, r2
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <updatevalue+0x220>)
 8000980:	6013      	str	r3, [r2, #0]
							break;
 8000982:	e01a      	b.n	80009ba <updatevalue+0x1c6>
				case PAJ_FORWARD:						sprintf(gesturearr,"Forward\r\n");			break;
 8000984:	4929      	ldr	r1, [pc, #164]	; (8000a2c <updatevalue+0x238>)
 8000986:	4822      	ldr	r0, [pc, #136]	; (8000a10 <updatevalue+0x21c>)
 8000988:	f003 fc02 	bl	8004190 <siprintf>
 800098c:	e015      	b.n	80009ba <updatevalue+0x1c6>
				case PAJ_BACKWARD:						sprintf(gesturearr,"Backward\r\n"); 		break;
 800098e:	4928      	ldr	r1, [pc, #160]	; (8000a30 <updatevalue+0x23c>)
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <updatevalue+0x21c>)
 8000992:	f003 fbfd 	bl	8004190 <siprintf>
 8000996:	e010      	b.n	80009ba <updatevalue+0x1c6>
				case PAJ_CLOCKWISE:						sprintf(gesturearr,"Clockwise\r\n"); 		break;
 8000998:	4926      	ldr	r1, [pc, #152]	; (8000a34 <updatevalue+0x240>)
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <updatevalue+0x21c>)
 800099c:	f003 fbf8 	bl	8004190 <siprintf>
 80009a0:	e00b      	b.n	80009ba <updatevalue+0x1c6>
					sprintf(gesturearr,"AntiClockwise\r\n");
 80009a2:	4925      	ldr	r1, [pc, #148]	; (8000a38 <updatevalue+0x244>)
 80009a4:	481a      	ldr	r0, [pc, #104]	; (8000a10 <updatevalue+0x21c>)
 80009a6:	f003 fbf3 	bl	8004190 <siprintf>
					check_password();
 80009aa:	f7ff fead 	bl	8000708 <check_password>
					break;
 80009ae:	e004      	b.n	80009ba <updatevalue+0x1c6>
				case PAJ_WAVE:							sprintf(gesturearr,"Wave\r\n"); 			break;
 80009b0:	4922      	ldr	r1, [pc, #136]	; (8000a3c <updatevalue+0x248>)
 80009b2:	4817      	ldr	r0, [pc, #92]	; (8000a10 <updatevalue+0x21c>)
 80009b4:	f003 fbec 	bl	8004190 <siprintf>
 80009b8:	bf00      	nop
//				resultvalue+=(digit[i]*value[i]);
//			}
//			sprintf(valuearr,"%04d\r\n",resultvalue);
//			HAL_UART_Transmit(&huart2, gesturearr, sizeof(gesturearr), 50);
//			HAL_UART_Transmit(&huart2, valuearr, sizeof(valuearr), 50);
			sprintf(sentbuffer,"0%d%d%d%d\n",value[0],value[1],value[2],value[3]);
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <updatevalue+0x224>)
 80009bc:	6819      	ldr	r1, [r3, #0]
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <updatevalue+0x224>)
 80009c0:	6858      	ldr	r0, [r3, #4]
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <updatevalue+0x224>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <updatevalue+0x224>)
 80009c8:	68d2      	ldr	r2, [r2, #12]
 80009ca:	9201      	str	r2, [sp, #4]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	491b      	ldr	r1, [pc, #108]	; (8000a40 <updatevalue+0x24c>)
 80009d4:	481b      	ldr	r0, [pc, #108]	; (8000a44 <updatevalue+0x250>)
 80009d6:	f003 fbdb 	bl	8004190 <siprintf>
			HAL_UART_Transmit(&huart1, sentbuffer, sizeof(sentbuffer), 100);
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	2206      	movs	r2, #6
 80009de:	4919      	ldr	r1, [pc, #100]	; (8000a44 <updatevalue+0x250>)
 80009e0:	4819      	ldr	r0, [pc, #100]	; (8000a48 <updatevalue+0x254>)
 80009e2:	f002 ffaa 	bl	800393a <HAL_UART_Transmit>
			memset(gesturearr,0,15);
 80009e6:	220f      	movs	r2, #15
 80009e8:	2100      	movs	r1, #0
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <updatevalue+0x21c>)
 80009ec:	f003 fb3a 	bl	8004064 <memset>
			Gesture_Data=0;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <updatevalue+0x214>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	801a      	strh	r2, [r3, #0]
			DEV_Delay_ms(1000);
 80009f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fa:	f000 fdbb 	bl	8001574 <HAL_Delay>
 80009fe:	e000      	b.n	8000a02 <updatevalue+0x20e>
				default: return;
 8000a00:	bf00      	nop
		}
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000164 	.word	0x20000164
 8000a0c:	080053dc 	.word	0x080053dc
 8000a10:	20000154 	.word	0x20000154
 8000a14:	20000004 	.word	0x20000004
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	66666667 	.word	0x66666667
 8000a20:	080053e4 	.word	0x080053e4
 8000a24:	080053ec 	.word	0x080053ec
 8000a28:	080053f4 	.word	0x080053f4
 8000a2c:	080053fc 	.word	0x080053fc
 8000a30:	08005408 	.word	0x08005408
 8000a34:	08005414 	.word	0x08005414
 8000a38:	08005420 	.word	0x08005420
 8000a3c:	08005430 	.word	0x08005430
 8000a40:	08005438 	.word	0x08005438
 8000a44:	2000025c 	.word	0x2000025c
 8000a48:	2000017c 	.word	0x2000017c

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 fd1e 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f910 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f000 fa40 	bl	8000edc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a5c:	f000 fa14 	bl	8000e88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a60:	f000 f972 	bl	8000d48 <MX_I2C1_Init>
  MX_TIM10_Init();
 8000a64:	f000 f99e 	bl	8000da4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000a68:	f000 f9e4 	bl	8000e34 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000a6c:	f000 f9be 	bl	8000dec <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000a70:	4872      	ldr	r0, [pc, #456]	; (8000c3c <main+0x1f0>)
 8000a72:	f002 fcef 	bl	8003454 <HAL_TIM_Base_Start_IT>
	if(!PAJ7620U2_init())
 8000a76:	f7ff fdfb 	bl	8000670 <PAJ7620U2_init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d104      	bne.n	8000a8a <main+0x3e>
	{	printf("\nGesture Sensor Error\r\n");
 8000a80:	486f      	ldr	r0, [pc, #444]	; (8000c40 <main+0x1f4>)
 8000a82:	f003 fb7d 	bl	8004180 <puts>
		return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e0d5      	b.n	8000c36 <main+0x1ea>
	}
		printf("\nGesture Sensor OK\r\n");
 8000a8a:	486e      	ldr	r0, [pc, #440]	; (8000c44 <main+0x1f8>)
 8000a8c:	f003 fb78 	bl	8004180 <puts>
	DEV_I2C_WriteByte(PAJ_BANK_SELECT, 0);																	//Select Bank 0
 8000a90:	2100      	movs	r1, #0
 8000a92:	20ef      	movs	r0, #239	; 0xef
 8000a94:	f7ff fd82 	bl	800059c <DEV_I2C_WriteByte>
	for (i = 0; i < Gesture_Array_SIZE; i++)
 8000a98:	4b6b      	ldr	r3, [pc, #428]	; (8000c48 <main+0x1fc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e015      	b.n	8000acc <main+0x80>
	{
		DEV_I2C_WriteByte(Init_Gesture_Array[i][0], Init_Gesture_Array[i][1]);//Gesture register initializes
 8000aa0:	4b69      	ldr	r3, [pc, #420]	; (8000c48 <main+0x1fc>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b69      	ldr	r3, [pc, #420]	; (8000c4c <main+0x200>)
 8000aa8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8000aac:	4b66      	ldr	r3, [pc, #408]	; (8000c48 <main+0x1fc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4966      	ldr	r1, [pc, #408]	; (8000c4c <main+0x200>)
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	440b      	add	r3, r1
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4610      	mov	r0, r2
 8000abc:	f7ff fd6e 	bl	800059c <DEV_I2C_WriteByte>
	for (i = 0; i < Gesture_Array_SIZE; i++)
 8000ac0:	4b61      	ldr	r3, [pc, #388]	; (8000c48 <main+0x1fc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b5f      	ldr	r3, [pc, #380]	; (8000c48 <main+0x1fc>)
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	4b5e      	ldr	r3, [pc, #376]	; (8000c48 <main+0x1fc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b1d      	cmp	r3, #29
 8000ad2:	d9e5      	bls.n	8000aa0 <main+0x54>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state==0){
 8000ad4:	4b5e      	ldr	r3, [pc, #376]	; (8000c50 <main+0x204>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d12d      	bne.n	8000b38 <main+0xec>
	  		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)== GPIO_PIN_SET){
 8000adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae0:	485c      	ldr	r0, [pc, #368]	; (8000c54 <main+0x208>)
 8000ae2:	f001 f801 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d115      	bne.n	8000b18 <main+0xcc>
	  		  		 sprintf(statearr,"ok\r\n");
 8000aec:	495a      	ldr	r1, [pc, #360]	; (8000c58 <main+0x20c>)
 8000aee:	485b      	ldr	r0, [pc, #364]	; (8000c5c <main+0x210>)
 8000af0:	f003 fb4e 	bl	8004190 <siprintf>
	  		  		 HAL_UART_Transmit(&huart2, statearr, sizeof(statearr), 50);
 8000af4:	2332      	movs	r3, #50	; 0x32
 8000af6:	220f      	movs	r2, #15
 8000af8:	4958      	ldr	r1, [pc, #352]	; (8000c5c <main+0x210>)
 8000afa:	4859      	ldr	r0, [pc, #356]	; (8000c60 <main+0x214>)
 8000afc:	f002 ff1d 	bl	800393a <HAL_UART_Transmit>
	  		  		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4857      	ldr	r0, [pc, #348]	; (8000c64 <main+0x218>)
 8000b06:	f001 f807 	bl	8001b18 <HAL_GPIO_WritePin>
	  		  		 state=1;
 8000b0a:	4b51      	ldr	r3, [pc, #324]	; (8000c50 <main+0x204>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
	  				 counter=0;
 8000b10:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <main+0x21c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e7dd      	b.n	8000ad4 <main+0x88>
	  		  	 }else{
	  		  		 sprintf(statearr,"off\r\n");
 8000b18:	4954      	ldr	r1, [pc, #336]	; (8000c6c <main+0x220>)
 8000b1a:	4850      	ldr	r0, [pc, #320]	; (8000c5c <main+0x210>)
 8000b1c:	f003 fb38 	bl	8004190 <siprintf>
	  		  		 HAL_UART_Transmit(&huart2, statearr, sizeof(statearr), 50);
 8000b20:	2332      	movs	r3, #50	; 0x32
 8000b22:	220f      	movs	r2, #15
 8000b24:	494d      	ldr	r1, [pc, #308]	; (8000c5c <main+0x210>)
 8000b26:	484e      	ldr	r0, [pc, #312]	; (8000c60 <main+0x214>)
 8000b28:	f002 ff07 	bl	800393a <HAL_UART_Transmit>
	  		  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2120      	movs	r1, #32
 8000b30:	484c      	ldr	r0, [pc, #304]	; (8000c64 <main+0x218>)
 8000b32:	f000 fff1 	bl	8001b18 <HAL_GPIO_WritePin>
 8000b36:	e7cd      	b.n	8000ad4 <main+0x88>
	  		  	 }
	  	  }
	  	  else if(state==1){
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <main+0x204>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d15f      	bne.n	8000c00 <main+0x1b4>
	  		  updatevalue();
 8000b40:	f7ff fe58 	bl	80007f4 <updatevalue>
	  		if(counter<=10){
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <main+0x21c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b0a      	cmp	r3, #10
 8000b4a:	dc10      	bgt.n	8000b6e <main+0x122>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	4840      	ldr	r0, [pc, #256]	; (8000c54 <main+0x208>)
 8000b54:	f000 ffe0 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	483d      	ldr	r0, [pc, #244]	; (8000c54 <main+0x208>)
 8000b5e:	f000 ffdb 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	483b      	ldr	r0, [pc, #236]	; (8000c54 <main+0x208>)
 8000b68:	f000 ffd6 	bl	8001b18 <HAL_GPIO_WritePin>
 8000b6c:	e7b2      	b.n	8000ad4 <main+0x88>
	  	    }else if (counter<=20){
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <main+0x21c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b14      	cmp	r3, #20
 8000b74:	dc10      	bgt.n	8000b98 <main+0x14c>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	4835      	ldr	r0, [pc, #212]	; (8000c54 <main+0x208>)
 8000b7e:	f000 ffcb 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2140      	movs	r1, #64	; 0x40
 8000b86:	4833      	ldr	r0, [pc, #204]	; (8000c54 <main+0x208>)
 8000b88:	f000 ffc6 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	4830      	ldr	r0, [pc, #192]	; (8000c54 <main+0x208>)
 8000b92:	f000 ffc1 	bl	8001b18 <HAL_GPIO_WritePin>
 8000b96:	e79d      	b.n	8000ad4 <main+0x88>
	  		}else if(counter<=30){
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <main+0x21c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b1e      	cmp	r3, #30
 8000b9e:	dc10      	bgt.n	8000bc2 <main+0x176>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	482b      	ldr	r0, [pc, #172]	; (8000c54 <main+0x208>)
 8000ba8:	f000 ffb6 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4828      	ldr	r0, [pc, #160]	; (8000c54 <main+0x208>)
 8000bb2:	f000 ffb1 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4826      	ldr	r0, [pc, #152]	; (8000c54 <main+0x208>)
 8000bbc:	f000 ffac 	bl	8001b18 <HAL_GPIO_WritePin>
 8000bc0:	e788      	b.n	8000ad4 <main+0x88>
	  		}else{
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4822      	ldr	r0, [pc, #136]	; (8000c54 <main+0x208>)
 8000bca:	f000 ffa5 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <main+0x208>)
 8000bd4:	f000 ffa0 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	481d      	ldr	r0, [pc, #116]	; (8000c54 <main+0x208>)
 8000bde:	f000 ff9b 	bl	8001b18 <HAL_GPIO_WritePin>
	  		   memset(value,0,sizeof(value));
 8000be2:	2210      	movs	r2, #16
 8000be4:	2100      	movs	r1, #0
 8000be6:	4822      	ldr	r0, [pc, #136]	; (8000c70 <main+0x224>)
 8000be8:	f003 fa3c 	bl	8004064 <memset>
	  		   counter=0;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <main+0x21c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
	  		   state=0;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <main+0x204>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
	  		   idx=3;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <main+0x228>)
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e769      	b.n	8000ad4 <main+0x88>
	  		}
	  	 }
	  	  else if (state==2){
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <main+0x204>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	f47f af65 	bne.w	8000ad4 <main+0x88>
	  		 	if(counter<=300){
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <main+0x21c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c12:	dc04      	bgt.n	8000c1e <main+0x1d2>
	  		 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2120      	movs	r1, #32
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <main+0x218>)
 8000c1a:	f000 ff7d 	bl	8001b18 <HAL_GPIO_WritePin>
	  		 	}
	  		 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4810      	ldr	r0, [pc, #64]	; (8000c64 <main+0x218>)
 8000c24:	f000 ff78 	bl	8001b18 <HAL_GPIO_WritePin>
	  		 	state=0;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <main+0x204>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
	  		 	counter=0;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <main+0x21c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
	  if(state==0){
 8000c34:	e74e      	b.n	8000ad4 <main+0x88>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000010c 	.word	0x2000010c
 8000c40:	08005444 	.word	0x08005444
 8000c44:	0800545c 	.word	0x0800545c
 8000c48:	2000016b 	.word	0x2000016b
 8000c4c:	080054e8 	.word	0x080054e8
 8000c50:	200000a4 	.word	0x200000a4
 8000c54:	40020800 	.word	0x40020800
 8000c58:	08005470 	.word	0x08005470
 8000c5c:	2000016c 	.word	0x2000016c
 8000c60:	20000218 	.word	0x20000218
 8000c64:	40020000 	.word	0x40020000
 8000c68:	200000a8 	.word	0x200000a8
 8000c6c:	08005478 	.word	0x08005478
 8000c70:	20000094 	.word	0x20000094
 8000c74:	20000004 	.word	0x20000004

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	; 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	; 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 f9ec 	bl	8004064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <SystemClock_Config+0xc8>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <SystemClock_Config+0xc8>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <SystemClock_Config+0xc8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cec:	2332      	movs	r3, #50	; 0x32
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fee5 	bl	8002acc <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d08:	f000 f96c 	bl	8000fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2101      	movs	r1, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 f947 	bl	8002fbc <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d34:	f000 f956 	bl	8000fe4 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_I2C1_Init+0x54>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d54:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_I2C1_Init+0x58>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_I2C1_Init+0x50>)
 8000d86:	f000 fee1 	bl	8001b4c <HAL_I2C_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d90:	f000 f928 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000b8 	.word	0x200000b8
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	000186a0 	.word	0x000186a0

08000da4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <MX_TIM10_Init+0x44>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50000-1;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000db0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000db4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000dbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_TIM10_Init+0x40>)
 8000dd2:	f002 faef 	bl	80033b4 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000ddc:	f000 f902 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000010c 	.word	0x2000010c
 8000de8:	40014400 	.word	0x40014400

08000dec <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <MX_TIM11_Init+0x44>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 50000-1;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000df8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000dfc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 500;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000e06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e0a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_TIM11_Init+0x40>)
 8000e1a:	f002 facb 	bl	80033b4 <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000e24:	f000 f8de 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001c0 	.word	0x200001c0
 8000e30:	40014800 	.word	0x40014800

08000e34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_USART1_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	f002 fd18 	bl	80038a0 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e76:	f000 f8b5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000017c 	.word	0x2000017c
 8000e84:	40011000 	.word	0x40011000

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f002 fcee 	bl	80038a0 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f88b 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000218 	.word	0x20000218
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a37      	ldr	r2, [pc, #220]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0xfc>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2120      	movs	r1, #32
 8000f66:	481d      	ldr	r0, [pc, #116]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f68:	f000 fdd6 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0x104>)
 8000f74:	f000 fdd0 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_GPIO_Init+0x104>)
 8000f90:	f000 fc26 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f94:	2320      	movs	r3, #32
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000fac:	f000 fc18 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000fb0:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_GPIO_Init+0x104>)
 8000fca:	f000 fc09 	bl	80017e0 <HAL_GPIO_Init>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800102e:	2007      	movs	r0, #7
 8001030:	f000 fb94 	bl	800175c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_I2C_MspInit+0x84>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12b      	bne.n	80010ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107e:	23c0      	movs	r3, #192	; 0xc0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001082:	2312      	movs	r3, #18
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_I2C_MspInit+0x8c>)
 800109a:	f000 fba1 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_TIM_Base_MspInit+0x80>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d116      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_TIM_Base_MspInit+0x84>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <HAL_TIM_Base_MspInit+0x84>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_TIM_Base_MspInit+0x84>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2019      	movs	r0, #25
 8001104:	f000 fb35 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001108:	2019      	movs	r0, #25
 800110a:	f000 fb4e 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800110e:	e01a      	b.n	8001146 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_TIM_Base_MspInit+0x88>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d115      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_TIM_Base_MspInit+0x84>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_TIM_Base_MspInit+0x84>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0x84>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201a      	movs	r0, #26
 800113c:	f000 fb19 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001140:	201a      	movs	r0, #26
 8001142:	f000 fb32 	bl	80017aa <HAL_NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40014400 	.word	0x40014400
 8001154:	40023800 	.word	0x40023800
 8001158:	40014800 	.word	0x40014800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_UART_MspInit+0xe8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12d      	bne.n	80011da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_UART_MspInit+0xec>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a30      	ldr	r2, [pc, #192]	; (8001248 <HAL_UART_MspInit+0xec>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_UART_MspInit+0xec>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <HAL_UART_MspInit+0xec>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a29      	ldr	r2, [pc, #164]	; (8001248 <HAL_UART_MspInit+0xec>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_UART_MspInit+0xec>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c8:	2307      	movs	r3, #7
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	481e      	ldr	r0, [pc, #120]	; (800124c <HAL_UART_MspInit+0xf0>)
 80011d4:	f000 fb04 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d8:	e030      	b.n	800123c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_UART_MspInit+0xf4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d12b      	bne.n	800123c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_UART_MspInit+0xec>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_UART_MspInit+0xec>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_UART_MspInit+0xec>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_UART_MspInit+0xec>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_UART_MspInit+0xec>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_UART_MspInit+0xec>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800121c:	230c      	movs	r3, #12
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122c:	2307      	movs	r3, #7
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_UART_MspInit+0xf0>)
 8001238:	f000 fad2 	bl	80017e0 <HAL_GPIO_Init>
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40011000 	.word	0x40011000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000
 8001250:	40004400 	.word	0x40004400

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f948 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ae:	f002 f933 	bl	8003518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000010c 	.word	0x2000010c

080012bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80012c2:	f002 f929 	bl	8003518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001c0 	.word	0x200001c0

080012d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
	}

return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
	}
	return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f002 fe18 	bl	8004010 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	200000ac 	.word	0x200000ac
 8001414:	20000278 	.word	0x20000278

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f002 fdd7 	bl	800401c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff faed 	bl	8000a4c <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001480:	080055e4 	.word	0x080055e4
  ldr r2, =_sbss
 8001484:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001488:	20000278 	.word	0x20000278

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f94f 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fd94 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f967 	bl	80017c6 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f92f 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000008 	.word	0x20000008
 800152c:	20000010 	.word	0x20000010
 8001530:	2000000c 	.word	0x2000000c

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000010 	.word	0x20000010
 8001558:	20000264 	.word	0x20000264

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000264 	.word	0x20000264

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000010 	.word	0x20000010

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff3e 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff8e 	bl	80016b0 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5d 	bl	800165c <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff31 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e159      	b.n	8001ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8148 	bne.w	8001aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a2 	beq.w	8001aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_GPIO_Init+0x2ec>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_GPIO_Init+0x2f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x202>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2f4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1fe>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_GPIO_Init+0x2f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1fa>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_GPIO_Init+0x2fc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1f6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <HAL_GPIO_Init+0x300>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1f2>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019e2:	2300      	movs	r3, #0
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <HAL_GPIO_Init+0x2ec>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a26:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a50:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f67f aea2 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e12b      	b.n	8001db6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fa64 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2224      	movs	r2, #36	; 0x24
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb0:	f001 fbd8 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a81      	ldr	r2, [pc, #516]	; (8001dc0 <HAL_I2C_Init+0x274>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d807      	bhi.n	8001bd0 <HAL_I2C_Init+0x84>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a80      	ldr	r2, [pc, #512]	; (8001dc4 <HAL_I2C_Init+0x278>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf94      	ite	ls
 8001bc8:	2301      	movls	r3, #1
 8001bca:	2300      	movhi	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e006      	b.n	8001bde <HAL_I2C_Init+0x92>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a7d      	ldr	r2, [pc, #500]	; (8001dc8 <HAL_I2C_Init+0x27c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0e7      	b.n	8001db6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a78      	ldr	r2, [pc, #480]	; (8001dcc <HAL_I2C_Init+0x280>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0c9b      	lsrs	r3, r3, #18
 8001bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_I2C_Init+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d802      	bhi.n	8001c20 <HAL_I2C_Init+0xd4>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	e009      	b.n	8001c34 <HAL_I2C_Init+0xe8>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4a69      	ldr	r2, [pc, #420]	; (8001dd0 <HAL_I2C_Init+0x284>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	3301      	adds	r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	495c      	ldr	r1, [pc, #368]	; (8001dc0 <HAL_I2C_Init+0x274>)
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d819      	bhi.n	8001c88 <HAL_I2C_Init+0x13c>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e59      	subs	r1, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c62:	1c59      	adds	r1, r3, #1
 8001c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c68:	400b      	ands	r3, r1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_I2C_Init+0x138>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e59      	subs	r1, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c82:	e051      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e04f      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <HAL_I2C_Init+0x168>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e012      	b.n	8001cda <HAL_I2C_Init+0x18e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e58      	subs	r0, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	0099      	lsls	r1, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x196>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e022      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <HAL_I2C_Init+0x1bc>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e58      	subs	r0, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	0099      	lsls	r1, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	6809      	ldr	r1, [r1, #0]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6911      	ldr	r1, [r2, #16]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	000186a0 	.word	0x000186a0
 8001dc4:	001e847f 	.word	0x001e847f
 8001dc8:	003d08ff 	.word	0x003d08ff
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	10624dd3 	.word	0x10624dd3

08001dd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	817b      	strh	r3, [r7, #10]
 8001de6:	460b      	mov	r3, r1
 8001de8:	813b      	strh	r3, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dee:	f7ff fbb5 	bl	800155c <HAL_GetTick>
 8001df2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	f040 80d9 	bne.w	8001fb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2319      	movs	r3, #25
 8001e08:	2201      	movs	r2, #1
 8001e0a:	496d      	ldr	r1, [pc, #436]	; (8001fc0 <HAL_I2C_Mem_Write+0x1ec>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fc7f 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e0cc      	b.n	8001fb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Mem_Write+0x56>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e0c5      	b.n	8001fb6 <HAL_I2C_Mem_Write+0x1e2>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d007      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2221      	movs	r2, #33	; 0x21
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a4d      	ldr	r2, [pc, #308]	; (8001fc4 <HAL_I2C_Mem_Write+0x1f0>)
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e92:	88f8      	ldrh	r0, [r7, #6]
 8001e94:	893a      	ldrh	r2, [r7, #8]
 8001e96:	8979      	ldrh	r1, [r7, #10]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fab6 	bl	8002414 <I2C_RequestMemoryWrite>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d052      	beq.n	8001f54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e081      	b.n	8001fb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fd00 	bl	80028bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d107      	bne.n	8001eda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06b      	b.n	8001fb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d11b      	bne.n	8001f54 <HAL_I2C_Mem_Write+0x180>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1aa      	bne.n	8001eb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fcec 	bl	800293e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d107      	bne.n	8001f84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e016      	b.n	8001fb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00100002 	.word	0x00100002
 8001fc4:	ffff0000 	.word	0xffff0000

08001fc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	817b      	strh	r3, [r7, #10]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	813b      	strh	r3, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe2:	f7ff fabb 	bl	800155c <HAL_GetTick>
 8001fe6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	f040 8208 	bne.w	8002406 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2319      	movs	r3, #25
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	497b      	ldr	r1, [pc, #492]	; (80021ec <HAL_I2C_Mem_Read+0x224>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fb85 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
 800200e:	e1fb      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_I2C_Mem_Read+0x56>
 800201a:	2302      	movs	r3, #2
 800201c:	e1f4      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d007      	beq.n	8002044 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2222      	movs	r2, #34	; 0x22
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2240      	movs	r2, #64	; 0x40
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_I2C_Mem_Read+0x228>)
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002086:	88f8      	ldrh	r0, [r7, #6]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fa52 	bl	8002540 <I2C_RequestMemoryRead>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1b0      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d113      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e184      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d11b      	bne.n	8002116 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e164      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	2b02      	cmp	r3, #2
 800211c:	d11b      	bne.n	8002156 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	e144      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800216c:	e138      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	2b03      	cmp	r3, #3
 8002174:	f200 80f1 	bhi.w	800235a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	2b01      	cmp	r3, #1
 800217e:	d123      	bne.n	80021c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fc1b 	bl	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e139      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021c6:	e10b      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d14e      	bne.n	800226e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	2200      	movs	r2, #0
 80021d8:	4906      	ldr	r1, [pc, #24]	; (80021f4 <HAL_I2C_Mem_Read+0x22c>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa98 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e10e      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
 80021ea:	bf00      	nop
 80021ec:	00100002 	.word	0x00100002
 80021f0:	ffff0000 	.word	0xffff0000
 80021f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800226c:	e0b8      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	2200      	movs	r2, #0
 8002276:	4966      	ldr	r1, [pc, #408]	; (8002410 <HAL_I2C_Mem_Read+0x448>)
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fa49 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0bf      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	2200      	movs	r2, #0
 80022d2:	494f      	ldr	r1, [pc, #316]	; (8002410 <HAL_I2C_Mem_Read+0x448>)
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fa1b 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e091      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002358:	e042      	b.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fb2e 	bl	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e04c      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d118      	bne.n	80023e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f aec2 	bne.w	800216e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010004 	.word	0x00010004

08002414 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2200      	movs	r2, #0
 8002446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f960 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002464:	d103      	bne.n	800246e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e05f      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	492d      	ldr	r1, [pc, #180]	; (800253c <I2C_RequestMemoryWrite+0x128>)
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f998 	bl	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e04c      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fa02 	bl	80028bc <I2C_WaitOnTXEFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d107      	bne.n	80024d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e02b      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024e0:	893b      	ldrh	r3, [r7, #8]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	e021      	b.n	8002530 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f9dc 	bl	80028bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b04      	cmp	r3, #4
 8002510:	d107      	bne.n	8002522 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e005      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002526:	893b      	ldrh	r3, [r7, #8]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	00010002 	.word	0x00010002

08002540 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002568:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2200      	movs	r2, #0
 8002582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8c2 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a0:	d103      	bne.n	80025aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0aa      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	4952      	ldr	r1, [pc, #328]	; (800270c <I2C_RequestMemoryRead+0x1cc>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f8fa 	bl	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e097      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f964 	bl	80028bc <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e076      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261c:	893b      	ldrh	r3, [r7, #8]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e021      	b.n	800266c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f93e 	bl	80028bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d107      	bne.n	800265e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e050      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f923 	bl	80028bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e035      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f82b 	bl	8002710 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ce:	d103      	bne.n	80026d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e013      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026dc:	897b      	ldrh	r3, [r7, #10]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	4906      	ldr	r1, [pc, #24]	; (800270c <I2C_RequestMemoryRead+0x1cc>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f863 	bl	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	00010002 	.word	0x00010002

08002710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002720:	e025      	b.n	800276e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d021      	beq.n	800276e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7fe ff17 	bl	800155c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0220 	orr.w	r2, r3, #32
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e023      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10d      	bne.n	8002794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4013      	ands	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	e00c      	b.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4013      	ands	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d0b6      	beq.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027cc:	e051      	b.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	d123      	bne.n	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e046      	b.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d021      	beq.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7fe fe95 	bl	800155c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d116      	bne.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e020      	b.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10c      	bne.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e00b      	b.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d18d      	bne.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c8:	e02d      	b.n	8002926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f8ce 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e02d      	b.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d021      	beq.n	8002926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e2:	f7fe fe3b 	bl	800155c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d116      	bne.n	8002926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f043 0220 	orr.w	r2, r3, #32
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e007      	b.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d1ca      	bne.n	80028ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800294a:	e02d      	b.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f88d 	bl	8002a6c <I2C_IsAcknowledgeFailed>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e02d      	b.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d021      	beq.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002964:	f7fe fdfa 	bl	800155c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d1ca      	bne.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029cc:	e042      	b.n	8002a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d119      	bne.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e029      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7fe fda4 	bl	800155c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e007      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d1b5      	bne.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	d11b      	bne.n	8002abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e264      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d075      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aea:	4ba3      	ldr	r3, [pc, #652]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4ba0      	ldr	r3, [pc, #640]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b9d      	ldr	r3, [pc, #628]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b99      	ldr	r3, [pc, #612]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x108>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d157      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e23f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x74>
 8002b32:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a90      	ldr	r2, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xb0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x98>
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8a      	ldr	r2, [pc, #552]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xb0>
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a83      	ldr	r2, [pc, #524]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a80      	ldr	r2, [pc, #512]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fcea 	bl	800155c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fce6 	bl	800155c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e204      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xc0>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fcd6 	bl	800155c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fcd2 	bl	800155c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1f0      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xe8>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be2:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d11c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_RCC_OscConfig+0x152>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e1c4      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4952      	ldr	r1, [pc, #328]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	e03a      	b.n	8002caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fc8b 	bl	800155c <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fc87 	bl	800155c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1a5      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4940      	ldr	r1, [pc, #256]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
 8002c7c:	e015      	b.n	8002caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fc6a 	bl	800155c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fc66 	bl	800155c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e184      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d030      	beq.n	8002d18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_OscConfig+0x2b4>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fc4a 	bl	800155c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fc46 	bl	800155c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e164      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x200>
 8002cea:	e015      	b.n	8002d18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_OscConfig+0x2b4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fc33 	bl	800155c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fc2f 	bl	800155c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e14d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a0 	beq.w	8002e66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d121      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fbf5 	bl	800155c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e011      	b.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470000 	.word	0x42470000
 8002d80:	42470e80 	.word	0x42470e80
 8002d84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fe fbe8 	bl	800155c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e106      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCC_OscConfig+0x4e4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
 8002dae:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a80      	ldr	r2, [pc, #512]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	e01c      	b.n	8002df6 <HAL_RCC_OscConfig+0x32a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x312>
 8002dc4:	4b7b      	ldr	r3, [pc, #492]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a7a      	ldr	r2, [pc, #488]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd0:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a77      	ldr	r2, [pc, #476]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	e00b      	b.n	8002df6 <HAL_RCC_OscConfig+0x32a>
 8002dde:	4b75      	ldr	r3, [pc, #468]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a74      	ldr	r2, [pc, #464]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	4b72      	ldr	r3, [pc, #456]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a71      	ldr	r2, [pc, #452]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fbad 	bl	800155c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fba9 	bl	800155c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0c5      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	4b65      	ldr	r3, [pc, #404]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ee      	beq.n	8002e06 <HAL_RCC_OscConfig+0x33a>
 8002e28:	e014      	b.n	8002e54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fb97 	bl	800155c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fb93 	bl	800155c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0af      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ee      	bne.n	8002e32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a55      	ldr	r2, [pc, #340]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 809b 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d05c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d141      	bne.n	8002f08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCC_OscConfig+0x4ec>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fb67 	bl	800155c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fb63 	bl	800155c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e081      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	019b      	lsls	r3, r3, #6
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	4937      	ldr	r1, [pc, #220]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <HAL_RCC_OscConfig+0x4ec>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fb3c 	bl	800155c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe fb38 	bl	800155c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e056      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
 8002f06:	e04e      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x4ec>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fb25 	bl	800155c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fb21 	bl	800155c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e03f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x44a>
 8002f34:	e037      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e032      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d028      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d11a      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d111      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	42470060 	.word	0x42470060

08002fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0cc      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d90c      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b8      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	494d      	ldr	r1, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d044      	beq.n	80030dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d119      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d003      	beq.n	800307a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e067      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4934      	ldr	r1, [pc, #208]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fa56 	bl	800155c <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fe fa52 	bl	800155c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e04f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d20c      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e032      	b.n	800316a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4916      	ldr	r1, [pc, #88]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003142:	f000 f821 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490a      	ldr	r1, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe f9b6 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023c00 	.word	0x40023c00
 8003178:	40023800 	.word	0x40023800
 800317c:	08005524 	.word	0x08005524
 8003180:	20000008 	.word	0x20000008
 8003184:	2000000c 	.word	0x2000000c

08003188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	2300      	movs	r3, #0
 800319a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a0:	4b67      	ldr	r3, [pc, #412]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d00d      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x40>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	f200 80bd 	bhi.w	800332c <HAL_RCC_GetSysClockFreq+0x1a4>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x34>
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ba:	e0b7      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b61      	ldr	r3, [pc, #388]	; (8003344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031be:	60bb      	str	r3, [r7, #8]
       break;
 80031c0:	e0b7      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c2:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e0b4      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c8:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d2:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04d      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	461a      	mov	r2, r3
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	ea02 0800 	and.w	r8, r2, r0
 80031f6:	ea03 0901 	and.w	r9, r3, r1
 80031fa:	4640      	mov	r0, r8
 80031fc:	4649      	mov	r1, r9
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	014b      	lsls	r3, r1, #5
 8003208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800320c:	0142      	lsls	r2, r0, #5
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	ebb0 0008 	subs.w	r0, r0, r8
 8003216:	eb61 0109 	sbc.w	r1, r1, r9
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003228:	0182      	lsls	r2, r0, #6
 800322a:	1a12      	subs	r2, r2, r0
 800322c:	eb63 0301 	sbc.w	r3, r3, r1
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	00d9      	lsls	r1, r3, #3
 800323a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800323e:	00d0      	lsls	r0, r2, #3
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	eb12 0208 	adds.w	r2, r2, r8
 8003248:	eb43 0309 	adc.w	r3, r3, r9
 800324c:	f04f 0000 	mov.w	r0, #0
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	0259      	lsls	r1, r3, #9
 8003256:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800325a:	0250      	lsls	r0, r2, #9
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	f7fd f808 	bl	8000280 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e04a      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	461a      	mov	r2, r3
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	ea02 0400 	and.w	r4, r2, r0
 8003292:	ea03 0501 	and.w	r5, r3, r1
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	014b      	lsls	r3, r1, #5
 80032a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032a8:	0142      	lsls	r2, r0, #5
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	1b00      	subs	r0, r0, r4
 80032b0:	eb61 0105 	sbc.w	r1, r1, r5
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	018b      	lsls	r3, r1, #6
 80032be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c2:	0182      	lsls	r2, r0, #6
 80032c4:	1a12      	subs	r2, r2, r0
 80032c6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ca:	f04f 0000 	mov.w	r0, #0
 80032ce:	f04f 0100 	mov.w	r1, #0
 80032d2:	00d9      	lsls	r1, r3, #3
 80032d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032d8:	00d0      	lsls	r0, r2, #3
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	1912      	adds	r2, r2, r4
 80032e0:	eb45 0303 	adc.w	r3, r5, r3
 80032e4:	f04f 0000 	mov.w	r0, #0
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	0299      	lsls	r1, r3, #10
 80032ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032f2:	0290      	lsls	r0, r2, #10
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	461a      	mov	r2, r3
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	f7fc ffbc 	bl	8000280 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	3301      	adds	r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	60bb      	str	r3, [r7, #8]
      break;
 800332a:	e002      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800332e:	60bb      	str	r3, [r7, #8]
      break;
 8003330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003332:	68bb      	ldr	r3, [r7, #8]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800
 8003344:	00f42400 	.word	0x00f42400
 8003348:	007a1200 	.word	0x007a1200

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_RCC_GetHCLKFreq+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000008 	.word	0x20000008

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003368:	f7ff fff0 	bl	800334c <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0a9b      	lsrs	r3, r3, #10
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	08005534 	.word	0x08005534

0800338c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003390:	f7ff ffdc 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	0b5b      	lsrs	r3, r3, #13
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08005534 	.word	0x08005534

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e041      	b.n	800344a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fe78 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 f9c0 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e044      	b.n	80034f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <HAL_TIM_Base_Start_IT+0xb0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d018      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x6c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d013      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x6c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <HAL_TIM_Base_Start_IT+0xb4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x6c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a19      	ldr	r2, [pc, #100]	; (800350c <HAL_TIM_Base_Start_IT+0xb8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x6c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_TIM_Base_Start_IT+0xbc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x6c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIM_Base_Start_IT+0xc0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d010      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	e007      	b.n	80034f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40014000 	.word	0x40014000

08003518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0202 	mvn.w	r2, #2
 8003544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8ee 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8e0 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8f1 	bl	8003750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b04      	cmp	r3, #4
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0204 	mvn.w	r2, #4
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8c4 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8b6 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8c7 	bl	8003750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d122      	bne.n	800361c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d11b      	bne.n	800361c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0208 	mvn.w	r2, #8
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f89a 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f88c 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f89d 	bl	8003750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d122      	bne.n	8003670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b10      	cmp	r3, #16
 8003636:	d11b      	bne.n	8003670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0210 	mvn.w	r2, #16
 8003640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2208      	movs	r2, #8
 8003646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f870 	bl	800373c <HAL_TIM_IC_CaptureCallback>
 800365c:	e005      	b.n	800366a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f862 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f873 	bl	8003750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0201 	mvn.w	r2, #1
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd f81e 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8e2 	bl	800388c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f838 	bl	8003764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0220 	mvn.w	r2, #32
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8ac 	bl	8003878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <TIM_Base_SetConfig+0xe4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00f      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a31      	ldr	r2, [pc, #196]	; (8003860 <TIM_Base_SetConfig+0xe8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a30      	ldr	r2, [pc, #192]	; (8003864 <TIM_Base_SetConfig+0xec>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <TIM_Base_SetConfig+0xf0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <TIM_Base_SetConfig+0xe4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01b      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d017      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <TIM_Base_SetConfig+0xe8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a21      	ldr	r2, [pc, #132]	; (8003864 <TIM_Base_SetConfig+0xec>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a20      	ldr	r2, [pc, #128]	; (8003868 <TIM_Base_SetConfig+0xf0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <TIM_Base_SetConfig+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <TIM_Base_SetConfig+0xf8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <TIM_Base_SetConfig+0xfc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <TIM_Base_SetConfig+0xe4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d103      	bne.n	8003848 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	615a      	str	r2, [r3, #20]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800
 8003868:	40000c00 	.word	0x40000c00
 800386c:	40014000 	.word	0x40014000
 8003870:	40014400 	.word	0x40014400
 8003874:	40014800 	.word	0x40014800

08003878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e03f      	b.n	8003932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fc48 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9cb 	bl	8003c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b08a      	sub	sp, #40	; 0x28
 800393e:	af02      	add	r7, sp, #8
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b20      	cmp	r3, #32
 8003958:	d17c      	bne.n	8003a54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_Transmit+0x2c>
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e075      	b.n	8003a56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_UART_Transmit+0x3e>
 8003974:	2302      	movs	r3, #2
 8003976:	e06e      	b.n	8003a56 <HAL_UART_Transmit+0x11c>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd fde5 	bl	800155c <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d108      	bne.n	80039bc <HAL_UART_Transmit+0x82>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e003      	b.n	80039c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039cc:	e02a      	b.n	8003a24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f8e2 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e036      	b.n	8003a56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3302      	adds	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e007      	b.n	8003a16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	3301      	adds	r3, #1
 8003a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1cf      	bne.n	80039ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f8b2 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e006      	b.n	8003a56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08a      	sub	sp, #40	; 0x28
 8003a62:	af02      	add	r7, sp, #8
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	f040 808c 	bne.w	8003b98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Receive+0x2e>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e084      	b.n	8003b9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Receive+0x40>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e07d      	b.n	8003b9a <HAL_UART_Receive+0x13c>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2222      	movs	r2, #34	; 0x22
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aba:	f7fd fd4f 	bl	800155c <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d108      	bne.n	8003ae8 <HAL_UART_Receive+0x8a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003af8:	e043      	b.n	8003b82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2120      	movs	r1, #32
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f84c 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e042      	b.n	8003b9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e01f      	b.n	8003b74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3c:	d007      	beq.n	8003b4e <HAL_UART_Receive+0xf0>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_UART_Receive+0xfe>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e008      	b.n	8003b6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1b6      	bne.n	8003afa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b090      	sub	sp, #64	; 0x40
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	e050      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d04c      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc2:	f7fd fccb 	bl	800155c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d241      	bcs.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf2:	637a      	str	r2, [r7, #52]	; 0x34
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	613b      	str	r3, [r7, #16]
   return(result);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c26:	623a      	str	r2, [r7, #32]
 8003c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	69f9      	ldr	r1, [r7, #28]
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00f      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d09f      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3740      	adds	r7, #64	; 0x40
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	b09f      	sub	sp, #124	; 0x7c
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	68d9      	ldr	r1, [r3, #12]
 8003c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cc4:	f021 010c 	bic.w	r1, r1, #12
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cde:	6999      	ldr	r1, [r3, #24]
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	ea40 0301 	orr.w	r3, r0, r1
 8003ce8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4bc5      	ldr	r3, [pc, #788]	; (8004004 <UART_SetConfig+0x384>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d004      	beq.n	8003cfe <UART_SetConfig+0x7e>
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4bc3      	ldr	r3, [pc, #780]	; (8004008 <UART_SetConfig+0x388>)
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d103      	bne.n	8003d06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cfe:	f7ff fb45 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 8003d02:	6778      	str	r0, [r7, #116]	; 0x74
 8003d04:	e002      	b.n	8003d0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d06:	f7ff fb2d 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8003d0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d14:	f040 80b6 	bne.w	8003e84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	f04f 0500 	mov.w	r5, #0
 8003d20:	4622      	mov	r2, r4
 8003d22:	462b      	mov	r3, r5
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	6439      	str	r1, [r7, #64]	; 0x40
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d30:	1912      	adds	r2, r2, r4
 8003d32:	eb45 0303 	adc.w	r3, r5, r3
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	00d9      	lsls	r1, r3, #3
 8003d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d44:	00d0      	lsls	r0, r2, #3
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	1911      	adds	r1, r2, r4
 8003d4c:	6639      	str	r1, [r7, #96]	; 0x60
 8003d4e:	416b      	adcs	r3, r5
 8003d50:	667b      	str	r3, [r7, #100]	; 0x64
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d60:	415b      	adcs	r3, r3
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d6c:	f7fc fa88 	bl	8000280 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4ba5      	ldr	r3, [pc, #660]	; (800400c <UART_SetConfig+0x38c>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011e      	lsls	r6, r3, #4
 8003d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d80:	461c      	mov	r4, r3
 8003d82:	f04f 0500 	mov.w	r5, #0
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
 8003d92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d96:	1912      	adds	r2, r2, r4
 8003d98:	eb45 0303 	adc.w	r3, r5, r3
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	00d9      	lsls	r1, r3, #3
 8003da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003daa:	00d0      	lsls	r0, r2, #3
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	1911      	adds	r1, r2, r4
 8003db2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003db4:	416b      	adcs	r3, r5
 8003db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dd2:	f7fc fa55 	bl	8000280 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4b8c      	ldr	r3, [pc, #560]	; (800400c <UART_SetConfig+0x38c>)
 8003ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	3332      	adds	r3, #50	; 0x32
 8003dee:	4a87      	ldr	r2, [pc, #540]	; (800400c <UART_SetConfig+0x38c>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dfc:	441e      	add	r6, r3
 8003dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e00:	4618      	mov	r0, r3
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	1894      	adds	r4, r2, r2
 8003e0c:	623c      	str	r4, [r7, #32]
 8003e0e:	415b      	adcs	r3, r3
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e16:	1812      	adds	r2, r2, r0
 8003e18:	eb41 0303 	adc.w	r3, r1, r3
 8003e1c:	f04f 0400 	mov.w	r4, #0
 8003e20:	f04f 0500 	mov.w	r5, #0
 8003e24:	00dd      	lsls	r5, r3, #3
 8003e26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e2a:	00d4      	lsls	r4, r2, #3
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	462b      	mov	r3, r5
 8003e30:	1814      	adds	r4, r2, r0
 8003e32:	653c      	str	r4, [r7, #80]	; 0x50
 8003e34:	414b      	adcs	r3, r1
 8003e36:	657b      	str	r3, [r7, #84]	; 0x54
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	61b9      	str	r1, [r7, #24]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e52:	f7fc fa15 	bl	8000280 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	; (800400c <UART_SetConfig+0x38c>)
 8003e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a67      	ldr	r2, [pc, #412]	; (800400c <UART_SetConfig+0x38c>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 0207 	and.w	r2, r3, #7
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4432      	add	r2, r6
 8003e80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e82:	e0b9      	b.n	8003ff8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e86:	461c      	mov	r4, r3
 8003e88:	f04f 0500 	mov.w	r5, #0
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	462b      	mov	r3, r5
 8003e90:	1891      	adds	r1, r2, r2
 8003e92:	6139      	str	r1, [r7, #16]
 8003e94:	415b      	adcs	r3, r3
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e9c:	1912      	adds	r2, r2, r4
 8003e9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	00d9      	lsls	r1, r3, #3
 8003eac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb0:	00d0      	lsls	r0, r2, #3
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	eb12 0804 	adds.w	r8, r2, r4
 8003eba:	eb43 0905 	adc.w	r9, r3, r5
 8003ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	008b      	lsls	r3, r1, #2
 8003ed2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ed6:	0082      	lsls	r2, r0, #2
 8003ed8:	4640      	mov	r0, r8
 8003eda:	4649      	mov	r1, r9
 8003edc:	f7fc f9d0 	bl	8000280 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4b49      	ldr	r3, [pc, #292]	; (800400c <UART_SetConfig+0x38c>)
 8003ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	011e      	lsls	r6, r3, #4
 8003eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	1894      	adds	r4, r2, r2
 8003efc:	60bc      	str	r4, [r7, #8]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f06:	1812      	adds	r2, r2, r0
 8003f08:	eb41 0303 	adc.w	r3, r1, r3
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	f04f 0500 	mov.w	r5, #0
 8003f14:	00dd      	lsls	r5, r3, #3
 8003f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f1a:	00d4      	lsls	r4, r2, #3
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	1814      	adds	r4, r2, r0
 8003f22:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f24:	414b      	adcs	r3, r1
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	008b      	lsls	r3, r1, #2
 8003f3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f40:	0082      	lsls	r2, r0, #2
 8003f42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f46:	f7fc f99b 	bl	8000280 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <UART_SetConfig+0x38c>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <UART_SetConfig+0x38c>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6e:	441e      	add	r6, r3
 8003f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f72:	4618      	mov	r0, r3
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	1894      	adds	r4, r2, r2
 8003f7e:	603c      	str	r4, [r7, #0]
 8003f80:	415b      	adcs	r3, r3
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f88:	1812      	adds	r2, r2, r0
 8003f8a:	eb41 0303 	adc.w	r3, r1, r3
 8003f8e:	f04f 0400 	mov.w	r4, #0
 8003f92:	f04f 0500 	mov.w	r5, #0
 8003f96:	00dd      	lsls	r5, r3, #3
 8003f98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f9c:	00d4      	lsls	r4, r2, #3
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	eb12 0a00 	adds.w	sl, r2, r0
 8003fa6:	eb43 0b01 	adc.w	fp, r3, r1
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	008b      	lsls	r3, r1, #2
 8003fbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fc2:	0082      	lsls	r2, r0, #2
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	f7fc f95a 	bl	8000280 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <UART_SetConfig+0x38c>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a09      	ldr	r2, [pc, #36]	; (800400c <UART_SetConfig+0x38c>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4432      	add	r2, r6
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	377c      	adds	r7, #124	; 0x7c
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40011400 	.word	0x40011400
 800400c:	51eb851f 	.word	0x51eb851f

08004010 <__errno>:
 8004010:	4b01      	ldr	r3, [pc, #4]	; (8004018 <__errno+0x8>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000014 	.word	0x20000014

0800401c <__libc_init_array>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	4d0d      	ldr	r5, [pc, #52]	; (8004054 <__libc_init_array+0x38>)
 8004020:	4c0d      	ldr	r4, [pc, #52]	; (8004058 <__libc_init_array+0x3c>)
 8004022:	1b64      	subs	r4, r4, r5
 8004024:	10a4      	asrs	r4, r4, #2
 8004026:	2600      	movs	r6, #0
 8004028:	42a6      	cmp	r6, r4
 800402a:	d109      	bne.n	8004040 <__libc_init_array+0x24>
 800402c:	4d0b      	ldr	r5, [pc, #44]	; (800405c <__libc_init_array+0x40>)
 800402e:	4c0c      	ldr	r4, [pc, #48]	; (8004060 <__libc_init_array+0x44>)
 8004030:	f001 f9be 	bl	80053b0 <_init>
 8004034:	1b64      	subs	r4, r4, r5
 8004036:	10a4      	asrs	r4, r4, #2
 8004038:	2600      	movs	r6, #0
 800403a:	42a6      	cmp	r6, r4
 800403c:	d105      	bne.n	800404a <__libc_init_array+0x2e>
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	f855 3b04 	ldr.w	r3, [r5], #4
 8004044:	4798      	blx	r3
 8004046:	3601      	adds	r6, #1
 8004048:	e7ee      	b.n	8004028 <__libc_init_array+0xc>
 800404a:	f855 3b04 	ldr.w	r3, [r5], #4
 800404e:	4798      	blx	r3
 8004050:	3601      	adds	r6, #1
 8004052:	e7f2      	b.n	800403a <__libc_init_array+0x1e>
 8004054:	080055dc 	.word	0x080055dc
 8004058:	080055dc 	.word	0x080055dc
 800405c:	080055dc 	.word	0x080055dc
 8004060:	080055e0 	.word	0x080055e0

08004064 <memset>:
 8004064:	4402      	add	r2, r0
 8004066:	4603      	mov	r3, r0
 8004068:	4293      	cmp	r3, r2
 800406a:	d100      	bne.n	800406e <memset+0xa>
 800406c:	4770      	bx	lr
 800406e:	f803 1b01 	strb.w	r1, [r3], #1
 8004072:	e7f9      	b.n	8004068 <memset+0x4>

08004074 <iprintf>:
 8004074:	b40f      	push	{r0, r1, r2, r3}
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <iprintf+0x2c>)
 8004078:	b513      	push	{r0, r1, r4, lr}
 800407a:	681c      	ldr	r4, [r3, #0]
 800407c:	b124      	cbz	r4, 8004088 <iprintf+0x14>
 800407e:	69a3      	ldr	r3, [r4, #24]
 8004080:	b913      	cbnz	r3, 8004088 <iprintf+0x14>
 8004082:	4620      	mov	r0, r4
 8004084:	f000 fa7e 	bl	8004584 <__sinit>
 8004088:	ab05      	add	r3, sp, #20
 800408a:	9a04      	ldr	r2, [sp, #16]
 800408c:	68a1      	ldr	r1, [r4, #8]
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	4620      	mov	r0, r4
 8004092:	f000 fdab 	bl	8004bec <_vfiprintf_r>
 8004096:	b002      	add	sp, #8
 8004098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800409c:	b004      	add	sp, #16
 800409e:	4770      	bx	lr
 80040a0:	20000014 	.word	0x20000014

080040a4 <_puts_r>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	460e      	mov	r6, r1
 80040a8:	4605      	mov	r5, r0
 80040aa:	b118      	cbz	r0, 80040b4 <_puts_r+0x10>
 80040ac:	6983      	ldr	r3, [r0, #24]
 80040ae:	b90b      	cbnz	r3, 80040b4 <_puts_r+0x10>
 80040b0:	f000 fa68 	bl	8004584 <__sinit>
 80040b4:	69ab      	ldr	r3, [r5, #24]
 80040b6:	68ac      	ldr	r4, [r5, #8]
 80040b8:	b913      	cbnz	r3, 80040c0 <_puts_r+0x1c>
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 fa62 	bl	8004584 <__sinit>
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <_puts_r+0xd0>)
 80040c2:	429c      	cmp	r4, r3
 80040c4:	d120      	bne.n	8004108 <_puts_r+0x64>
 80040c6:	686c      	ldr	r4, [r5, #4]
 80040c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ca:	07db      	lsls	r3, r3, #31
 80040cc:	d405      	bmi.n	80040da <_puts_r+0x36>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	0598      	lsls	r0, r3, #22
 80040d2:	d402      	bmi.n	80040da <_puts_r+0x36>
 80040d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040d6:	f000 faf3 	bl	80046c0 <__retarget_lock_acquire_recursive>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	0719      	lsls	r1, r3, #28
 80040de:	d51d      	bpl.n	800411c <_puts_r+0x78>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	b1db      	cbz	r3, 800411c <_puts_r+0x78>
 80040e4:	3e01      	subs	r6, #1
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ec:	3b01      	subs	r3, #1
 80040ee:	60a3      	str	r3, [r4, #8]
 80040f0:	bb39      	cbnz	r1, 8004142 <_puts_r+0x9e>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da38      	bge.n	8004168 <_puts_r+0xc4>
 80040f6:	4622      	mov	r2, r4
 80040f8:	210a      	movs	r1, #10
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f868 	bl	80041d0 <__swbuf_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d011      	beq.n	8004128 <_puts_r+0x84>
 8004104:	250a      	movs	r5, #10
 8004106:	e011      	b.n	800412c <_puts_r+0x88>
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <_puts_r+0xd4>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d101      	bne.n	8004112 <_puts_r+0x6e>
 800410e:	68ac      	ldr	r4, [r5, #8]
 8004110:	e7da      	b.n	80040c8 <_puts_r+0x24>
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <_puts_r+0xd8>)
 8004114:	429c      	cmp	r4, r3
 8004116:	bf08      	it	eq
 8004118:	68ec      	ldreq	r4, [r5, #12]
 800411a:	e7d5      	b.n	80040c8 <_puts_r+0x24>
 800411c:	4621      	mov	r1, r4
 800411e:	4628      	mov	r0, r5
 8004120:	f000 f8a8 	bl	8004274 <__swsetup_r>
 8004124:	2800      	cmp	r0, #0
 8004126:	d0dd      	beq.n	80040e4 <_puts_r+0x40>
 8004128:	f04f 35ff 	mov.w	r5, #4294967295
 800412c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800412e:	07da      	lsls	r2, r3, #31
 8004130:	d405      	bmi.n	800413e <_puts_r+0x9a>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	059b      	lsls	r3, r3, #22
 8004136:	d402      	bmi.n	800413e <_puts_r+0x9a>
 8004138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413a:	f000 fac2 	bl	80046c2 <__retarget_lock_release_recursive>
 800413e:	4628      	mov	r0, r5
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	2b00      	cmp	r3, #0
 8004144:	da04      	bge.n	8004150 <_puts_r+0xac>
 8004146:	69a2      	ldr	r2, [r4, #24]
 8004148:	429a      	cmp	r2, r3
 800414a:	dc06      	bgt.n	800415a <_puts_r+0xb6>
 800414c:	290a      	cmp	r1, #10
 800414e:	d004      	beq.n	800415a <_puts_r+0xb6>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	6022      	str	r2, [r4, #0]
 8004156:	7019      	strb	r1, [r3, #0]
 8004158:	e7c5      	b.n	80040e6 <_puts_r+0x42>
 800415a:	4622      	mov	r2, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f000 f837 	bl	80041d0 <__swbuf_r>
 8004162:	3001      	adds	r0, #1
 8004164:	d1bf      	bne.n	80040e6 <_puts_r+0x42>
 8004166:	e7df      	b.n	8004128 <_puts_r+0x84>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	250a      	movs	r5, #10
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	6022      	str	r2, [r4, #0]
 8004170:	701d      	strb	r5, [r3, #0]
 8004172:	e7db      	b.n	800412c <_puts_r+0x88>
 8004174:	08005560 	.word	0x08005560
 8004178:	08005580 	.word	0x08005580
 800417c:	08005540 	.word	0x08005540

08004180 <puts>:
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <puts+0xc>)
 8004182:	4601      	mov	r1, r0
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f7ff bf8d 	b.w	80040a4 <_puts_r>
 800418a:	bf00      	nop
 800418c:	20000014 	.word	0x20000014

08004190 <siprintf>:
 8004190:	b40e      	push	{r1, r2, r3}
 8004192:	b500      	push	{lr}
 8004194:	b09c      	sub	sp, #112	; 0x70
 8004196:	ab1d      	add	r3, sp, #116	; 0x74
 8004198:	9002      	str	r0, [sp, #8]
 800419a:	9006      	str	r0, [sp, #24]
 800419c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041a0:	4809      	ldr	r0, [pc, #36]	; (80041c8 <siprintf+0x38>)
 80041a2:	9107      	str	r1, [sp, #28]
 80041a4:	9104      	str	r1, [sp, #16]
 80041a6:	4909      	ldr	r1, [pc, #36]	; (80041cc <siprintf+0x3c>)
 80041a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ac:	9105      	str	r1, [sp, #20]
 80041ae:	6800      	ldr	r0, [r0, #0]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	a902      	add	r1, sp, #8
 80041b4:	f000 fbf0 	bl	8004998 <_svfiprintf_r>
 80041b8:	9b02      	ldr	r3, [sp, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	b01c      	add	sp, #112	; 0x70
 80041c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c4:	b003      	add	sp, #12
 80041c6:	4770      	bx	lr
 80041c8:	20000014 	.word	0x20000014
 80041cc:	ffff0208 	.word	0xffff0208

080041d0 <__swbuf_r>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	460e      	mov	r6, r1
 80041d4:	4614      	mov	r4, r2
 80041d6:	4605      	mov	r5, r0
 80041d8:	b118      	cbz	r0, 80041e2 <__swbuf_r+0x12>
 80041da:	6983      	ldr	r3, [r0, #24]
 80041dc:	b90b      	cbnz	r3, 80041e2 <__swbuf_r+0x12>
 80041de:	f000 f9d1 	bl	8004584 <__sinit>
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <__swbuf_r+0x98>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	d12b      	bne.n	8004240 <__swbuf_r+0x70>
 80041e8:	686c      	ldr	r4, [r5, #4]
 80041ea:	69a3      	ldr	r3, [r4, #24]
 80041ec:	60a3      	str	r3, [r4, #8]
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	071a      	lsls	r2, r3, #28
 80041f2:	d52f      	bpl.n	8004254 <__swbuf_r+0x84>
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	b36b      	cbz	r3, 8004254 <__swbuf_r+0x84>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	1ac0      	subs	r0, r0, r3
 80041fe:	6963      	ldr	r3, [r4, #20]
 8004200:	b2f6      	uxtb	r6, r6
 8004202:	4283      	cmp	r3, r0
 8004204:	4637      	mov	r7, r6
 8004206:	dc04      	bgt.n	8004212 <__swbuf_r+0x42>
 8004208:	4621      	mov	r1, r4
 800420a:	4628      	mov	r0, r5
 800420c:	f000 f926 	bl	800445c <_fflush_r>
 8004210:	bb30      	cbnz	r0, 8004260 <__swbuf_r+0x90>
 8004212:	68a3      	ldr	r3, [r4, #8]
 8004214:	3b01      	subs	r3, #1
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	6022      	str	r2, [r4, #0]
 800421e:	701e      	strb	r6, [r3, #0]
 8004220:	6963      	ldr	r3, [r4, #20]
 8004222:	3001      	adds	r0, #1
 8004224:	4283      	cmp	r3, r0
 8004226:	d004      	beq.n	8004232 <__swbuf_r+0x62>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	07db      	lsls	r3, r3, #31
 800422c:	d506      	bpl.n	800423c <__swbuf_r+0x6c>
 800422e:	2e0a      	cmp	r6, #10
 8004230:	d104      	bne.n	800423c <__swbuf_r+0x6c>
 8004232:	4621      	mov	r1, r4
 8004234:	4628      	mov	r0, r5
 8004236:	f000 f911 	bl	800445c <_fflush_r>
 800423a:	b988      	cbnz	r0, 8004260 <__swbuf_r+0x90>
 800423c:	4638      	mov	r0, r7
 800423e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <__swbuf_r+0x9c>)
 8004242:	429c      	cmp	r4, r3
 8004244:	d101      	bne.n	800424a <__swbuf_r+0x7a>
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	e7cf      	b.n	80041ea <__swbuf_r+0x1a>
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <__swbuf_r+0xa0>)
 800424c:	429c      	cmp	r4, r3
 800424e:	bf08      	it	eq
 8004250:	68ec      	ldreq	r4, [r5, #12]
 8004252:	e7ca      	b.n	80041ea <__swbuf_r+0x1a>
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	f000 f80c 	bl	8004274 <__swsetup_r>
 800425c:	2800      	cmp	r0, #0
 800425e:	d0cb      	beq.n	80041f8 <__swbuf_r+0x28>
 8004260:	f04f 37ff 	mov.w	r7, #4294967295
 8004264:	e7ea      	b.n	800423c <__swbuf_r+0x6c>
 8004266:	bf00      	nop
 8004268:	08005560 	.word	0x08005560
 800426c:	08005580 	.word	0x08005580
 8004270:	08005540 	.word	0x08005540

08004274 <__swsetup_r>:
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <__swsetup_r+0xcc>)
 8004276:	b570      	push	{r4, r5, r6, lr}
 8004278:	681d      	ldr	r5, [r3, #0]
 800427a:	4606      	mov	r6, r0
 800427c:	460c      	mov	r4, r1
 800427e:	b125      	cbz	r5, 800428a <__swsetup_r+0x16>
 8004280:	69ab      	ldr	r3, [r5, #24]
 8004282:	b913      	cbnz	r3, 800428a <__swsetup_r+0x16>
 8004284:	4628      	mov	r0, r5
 8004286:	f000 f97d 	bl	8004584 <__sinit>
 800428a:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <__swsetup_r+0xd0>)
 800428c:	429c      	cmp	r4, r3
 800428e:	d10f      	bne.n	80042b0 <__swsetup_r+0x3c>
 8004290:	686c      	ldr	r4, [r5, #4]
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004298:	0719      	lsls	r1, r3, #28
 800429a:	d42c      	bmi.n	80042f6 <__swsetup_r+0x82>
 800429c:	06dd      	lsls	r5, r3, #27
 800429e:	d411      	bmi.n	80042c4 <__swsetup_r+0x50>
 80042a0:	2309      	movs	r3, #9
 80042a2:	6033      	str	r3, [r6, #0]
 80042a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	e03e      	b.n	800432e <__swsetup_r+0xba>
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <__swsetup_r+0xd4>)
 80042b2:	429c      	cmp	r4, r3
 80042b4:	d101      	bne.n	80042ba <__swsetup_r+0x46>
 80042b6:	68ac      	ldr	r4, [r5, #8]
 80042b8:	e7eb      	b.n	8004292 <__swsetup_r+0x1e>
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <__swsetup_r+0xd8>)
 80042bc:	429c      	cmp	r4, r3
 80042be:	bf08      	it	eq
 80042c0:	68ec      	ldreq	r4, [r5, #12]
 80042c2:	e7e6      	b.n	8004292 <__swsetup_r+0x1e>
 80042c4:	0758      	lsls	r0, r3, #29
 80042c6:	d512      	bpl.n	80042ee <__swsetup_r+0x7a>
 80042c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ca:	b141      	cbz	r1, 80042de <__swsetup_r+0x6a>
 80042cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042d0:	4299      	cmp	r1, r3
 80042d2:	d002      	beq.n	80042da <__swsetup_r+0x66>
 80042d4:	4630      	mov	r0, r6
 80042d6:	f000 fa59 	bl	800478c <_free_r>
 80042da:	2300      	movs	r3, #0
 80042dc:	6363      	str	r3, [r4, #52]	; 0x34
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	2300      	movs	r3, #0
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	6923      	ldr	r3, [r4, #16]
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	b94b      	cbnz	r3, 800430e <__swsetup_r+0x9a>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d003      	beq.n	800430e <__swsetup_r+0x9a>
 8004306:	4621      	mov	r1, r4
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f9ff 	bl	800470c <__smakebuf_r>
 800430e:	89a0      	ldrh	r0, [r4, #12]
 8004310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004314:	f010 0301 	ands.w	r3, r0, #1
 8004318:	d00a      	beq.n	8004330 <__swsetup_r+0xbc>
 800431a:	2300      	movs	r3, #0
 800431c:	60a3      	str	r3, [r4, #8]
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	425b      	negs	r3, r3
 8004322:	61a3      	str	r3, [r4, #24]
 8004324:	6923      	ldr	r3, [r4, #16]
 8004326:	b943      	cbnz	r3, 800433a <__swsetup_r+0xc6>
 8004328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800432c:	d1ba      	bne.n	80042a4 <__swsetup_r+0x30>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	0781      	lsls	r1, r0, #30
 8004332:	bf58      	it	pl
 8004334:	6963      	ldrpl	r3, [r4, #20]
 8004336:	60a3      	str	r3, [r4, #8]
 8004338:	e7f4      	b.n	8004324 <__swsetup_r+0xb0>
 800433a:	2000      	movs	r0, #0
 800433c:	e7f7      	b.n	800432e <__swsetup_r+0xba>
 800433e:	bf00      	nop
 8004340:	20000014 	.word	0x20000014
 8004344:	08005560 	.word	0x08005560
 8004348:	08005580 	.word	0x08005580
 800434c:	08005540 	.word	0x08005540

08004350 <__sflush_r>:
 8004350:	898a      	ldrh	r2, [r1, #12]
 8004352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004356:	4605      	mov	r5, r0
 8004358:	0710      	lsls	r0, r2, #28
 800435a:	460c      	mov	r4, r1
 800435c:	d458      	bmi.n	8004410 <__sflush_r+0xc0>
 800435e:	684b      	ldr	r3, [r1, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	dc05      	bgt.n	8004370 <__sflush_r+0x20>
 8004364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	dc02      	bgt.n	8004370 <__sflush_r+0x20>
 800436a:	2000      	movs	r0, #0
 800436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004372:	2e00      	cmp	r6, #0
 8004374:	d0f9      	beq.n	800436a <__sflush_r+0x1a>
 8004376:	2300      	movs	r3, #0
 8004378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800437c:	682f      	ldr	r7, [r5, #0]
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	d032      	beq.n	80043e8 <__sflush_r+0x98>
 8004382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	075a      	lsls	r2, r3, #29
 8004388:	d505      	bpl.n	8004396 <__sflush_r+0x46>
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	1ac0      	subs	r0, r0, r3
 800438e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004390:	b10b      	cbz	r3, 8004396 <__sflush_r+0x46>
 8004392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004394:	1ac0      	subs	r0, r0, r3
 8004396:	2300      	movs	r3, #0
 8004398:	4602      	mov	r2, r0
 800439a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800439c:	6a21      	ldr	r1, [r4, #32]
 800439e:	4628      	mov	r0, r5
 80043a0:	47b0      	blx	r6
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	d106      	bne.n	80043b6 <__sflush_r+0x66>
 80043a8:	6829      	ldr	r1, [r5, #0]
 80043aa:	291d      	cmp	r1, #29
 80043ac:	d82c      	bhi.n	8004408 <__sflush_r+0xb8>
 80043ae:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <__sflush_r+0x108>)
 80043b0:	40ca      	lsrs	r2, r1
 80043b2:	07d6      	lsls	r6, r2, #31
 80043b4:	d528      	bpl.n	8004408 <__sflush_r+0xb8>
 80043b6:	2200      	movs	r2, #0
 80043b8:	6062      	str	r2, [r4, #4]
 80043ba:	04d9      	lsls	r1, r3, #19
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	6022      	str	r2, [r4, #0]
 80043c0:	d504      	bpl.n	80043cc <__sflush_r+0x7c>
 80043c2:	1c42      	adds	r2, r0, #1
 80043c4:	d101      	bne.n	80043ca <__sflush_r+0x7a>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	b903      	cbnz	r3, 80043cc <__sflush_r+0x7c>
 80043ca:	6560      	str	r0, [r4, #84]	; 0x54
 80043cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ce:	602f      	str	r7, [r5, #0]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d0ca      	beq.n	800436a <__sflush_r+0x1a>
 80043d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043d8:	4299      	cmp	r1, r3
 80043da:	d002      	beq.n	80043e2 <__sflush_r+0x92>
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f9d5 	bl	800478c <_free_r>
 80043e2:	2000      	movs	r0, #0
 80043e4:	6360      	str	r0, [r4, #52]	; 0x34
 80043e6:	e7c1      	b.n	800436c <__sflush_r+0x1c>
 80043e8:	6a21      	ldr	r1, [r4, #32]
 80043ea:	2301      	movs	r3, #1
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b0      	blx	r6
 80043f0:	1c41      	adds	r1, r0, #1
 80043f2:	d1c7      	bne.n	8004384 <__sflush_r+0x34>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0c4      	beq.n	8004384 <__sflush_r+0x34>
 80043fa:	2b1d      	cmp	r3, #29
 80043fc:	d001      	beq.n	8004402 <__sflush_r+0xb2>
 80043fe:	2b16      	cmp	r3, #22
 8004400:	d101      	bne.n	8004406 <__sflush_r+0xb6>
 8004402:	602f      	str	r7, [r5, #0]
 8004404:	e7b1      	b.n	800436a <__sflush_r+0x1a>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	e7ad      	b.n	800436c <__sflush_r+0x1c>
 8004410:	690f      	ldr	r7, [r1, #16]
 8004412:	2f00      	cmp	r7, #0
 8004414:	d0a9      	beq.n	800436a <__sflush_r+0x1a>
 8004416:	0793      	lsls	r3, r2, #30
 8004418:	680e      	ldr	r6, [r1, #0]
 800441a:	bf08      	it	eq
 800441c:	694b      	ldreq	r3, [r1, #20]
 800441e:	600f      	str	r7, [r1, #0]
 8004420:	bf18      	it	ne
 8004422:	2300      	movne	r3, #0
 8004424:	eba6 0807 	sub.w	r8, r6, r7
 8004428:	608b      	str	r3, [r1, #8]
 800442a:	f1b8 0f00 	cmp.w	r8, #0
 800442e:	dd9c      	ble.n	800436a <__sflush_r+0x1a>
 8004430:	6a21      	ldr	r1, [r4, #32]
 8004432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004434:	4643      	mov	r3, r8
 8004436:	463a      	mov	r2, r7
 8004438:	4628      	mov	r0, r5
 800443a:	47b0      	blx	r6
 800443c:	2800      	cmp	r0, #0
 800443e:	dc06      	bgt.n	800444e <__sflush_r+0xfe>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	e78e      	b.n	800436c <__sflush_r+0x1c>
 800444e:	4407      	add	r7, r0
 8004450:	eba8 0800 	sub.w	r8, r8, r0
 8004454:	e7e9      	b.n	800442a <__sflush_r+0xda>
 8004456:	bf00      	nop
 8004458:	20400001 	.word	0x20400001

0800445c <_fflush_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	690b      	ldr	r3, [r1, #16]
 8004460:	4605      	mov	r5, r0
 8004462:	460c      	mov	r4, r1
 8004464:	b913      	cbnz	r3, 800446c <_fflush_r+0x10>
 8004466:	2500      	movs	r5, #0
 8004468:	4628      	mov	r0, r5
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	b118      	cbz	r0, 8004476 <_fflush_r+0x1a>
 800446e:	6983      	ldr	r3, [r0, #24]
 8004470:	b90b      	cbnz	r3, 8004476 <_fflush_r+0x1a>
 8004472:	f000 f887 	bl	8004584 <__sinit>
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <_fflush_r+0x6c>)
 8004478:	429c      	cmp	r4, r3
 800447a:	d11b      	bne.n	80044b4 <_fflush_r+0x58>
 800447c:	686c      	ldr	r4, [r5, #4]
 800447e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ef      	beq.n	8004466 <_fflush_r+0xa>
 8004486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004488:	07d0      	lsls	r0, r2, #31
 800448a:	d404      	bmi.n	8004496 <_fflush_r+0x3a>
 800448c:	0599      	lsls	r1, r3, #22
 800448e:	d402      	bmi.n	8004496 <_fflush_r+0x3a>
 8004490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004492:	f000 f915 	bl	80046c0 <__retarget_lock_acquire_recursive>
 8004496:	4628      	mov	r0, r5
 8004498:	4621      	mov	r1, r4
 800449a:	f7ff ff59 	bl	8004350 <__sflush_r>
 800449e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044a0:	07da      	lsls	r2, r3, #31
 80044a2:	4605      	mov	r5, r0
 80044a4:	d4e0      	bmi.n	8004468 <_fflush_r+0xc>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	059b      	lsls	r3, r3, #22
 80044aa:	d4dd      	bmi.n	8004468 <_fflush_r+0xc>
 80044ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ae:	f000 f908 	bl	80046c2 <__retarget_lock_release_recursive>
 80044b2:	e7d9      	b.n	8004468 <_fflush_r+0xc>
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_fflush_r+0x70>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <_fflush_r+0x62>
 80044ba:	68ac      	ldr	r4, [r5, #8]
 80044bc:	e7df      	b.n	800447e <_fflush_r+0x22>
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <_fflush_r+0x74>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68ec      	ldreq	r4, [r5, #12]
 80044c6:	e7da      	b.n	800447e <_fflush_r+0x22>
 80044c8:	08005560 	.word	0x08005560
 80044cc:	08005580 	.word	0x08005580
 80044d0:	08005540 	.word	0x08005540

080044d4 <std>:
 80044d4:	2300      	movs	r3, #0
 80044d6:	b510      	push	{r4, lr}
 80044d8:	4604      	mov	r4, r0
 80044da:	e9c0 3300 	strd	r3, r3, [r0]
 80044de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044e2:	6083      	str	r3, [r0, #8]
 80044e4:	8181      	strh	r1, [r0, #12]
 80044e6:	6643      	str	r3, [r0, #100]	; 0x64
 80044e8:	81c2      	strh	r2, [r0, #14]
 80044ea:	6183      	str	r3, [r0, #24]
 80044ec:	4619      	mov	r1, r3
 80044ee:	2208      	movs	r2, #8
 80044f0:	305c      	adds	r0, #92	; 0x5c
 80044f2:	f7ff fdb7 	bl	8004064 <memset>
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <std+0x38>)
 80044f8:	6263      	str	r3, [r4, #36]	; 0x24
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std+0x3c>)
 80044fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <std+0x40>)
 8004500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <std+0x44>)
 8004504:	6224      	str	r4, [r4, #32]
 8004506:	6323      	str	r3, [r4, #48]	; 0x30
 8004508:	bd10      	pop	{r4, pc}
 800450a:	bf00      	nop
 800450c:	08005195 	.word	0x08005195
 8004510:	080051b7 	.word	0x080051b7
 8004514:	080051ef 	.word	0x080051ef
 8004518:	08005213 	.word	0x08005213

0800451c <_cleanup_r>:
 800451c:	4901      	ldr	r1, [pc, #4]	; (8004524 <_cleanup_r+0x8>)
 800451e:	f000 b8af 	b.w	8004680 <_fwalk_reent>
 8004522:	bf00      	nop
 8004524:	0800445d 	.word	0x0800445d

08004528 <__sfmoreglue>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	1e4a      	subs	r2, r1, #1
 800452c:	2568      	movs	r5, #104	; 0x68
 800452e:	4355      	muls	r5, r2
 8004530:	460e      	mov	r6, r1
 8004532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004536:	f000 f979 	bl	800482c <_malloc_r>
 800453a:	4604      	mov	r4, r0
 800453c:	b140      	cbz	r0, 8004550 <__sfmoreglue+0x28>
 800453e:	2100      	movs	r1, #0
 8004540:	e9c0 1600 	strd	r1, r6, [r0]
 8004544:	300c      	adds	r0, #12
 8004546:	60a0      	str	r0, [r4, #8]
 8004548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800454c:	f7ff fd8a 	bl	8004064 <memset>
 8004550:	4620      	mov	r0, r4
 8004552:	bd70      	pop	{r4, r5, r6, pc}

08004554 <__sfp_lock_acquire>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__sfp_lock_acquire+0x8>)
 8004556:	f000 b8b3 	b.w	80046c0 <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20000270 	.word	0x20000270

08004560 <__sfp_lock_release>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__sfp_lock_release+0x8>)
 8004562:	f000 b8ae 	b.w	80046c2 <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20000270 	.word	0x20000270

0800456c <__sinit_lock_acquire>:
 800456c:	4801      	ldr	r0, [pc, #4]	; (8004574 <__sinit_lock_acquire+0x8>)
 800456e:	f000 b8a7 	b.w	80046c0 <__retarget_lock_acquire_recursive>
 8004572:	bf00      	nop
 8004574:	2000026b 	.word	0x2000026b

08004578 <__sinit_lock_release>:
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <__sinit_lock_release+0x8>)
 800457a:	f000 b8a2 	b.w	80046c2 <__retarget_lock_release_recursive>
 800457e:	bf00      	nop
 8004580:	2000026b 	.word	0x2000026b

08004584 <__sinit>:
 8004584:	b510      	push	{r4, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	f7ff fff0 	bl	800456c <__sinit_lock_acquire>
 800458c:	69a3      	ldr	r3, [r4, #24]
 800458e:	b11b      	cbz	r3, 8004598 <__sinit+0x14>
 8004590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004594:	f7ff bff0 	b.w	8004578 <__sinit_lock_release>
 8004598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800459c:	6523      	str	r3, [r4, #80]	; 0x50
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <__sinit+0x68>)
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <__sinit+0x6c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80045a6:	42a3      	cmp	r3, r4
 80045a8:	bf04      	itt	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	61a3      	streq	r3, [r4, #24]
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 f820 	bl	80045f4 <__sfp>
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 f81c 	bl	80045f4 <__sfp>
 80045bc:	60a0      	str	r0, [r4, #8]
 80045be:	4620      	mov	r0, r4
 80045c0:	f000 f818 	bl	80045f4 <__sfp>
 80045c4:	2200      	movs	r2, #0
 80045c6:	60e0      	str	r0, [r4, #12]
 80045c8:	2104      	movs	r1, #4
 80045ca:	6860      	ldr	r0, [r4, #4]
 80045cc:	f7ff ff82 	bl	80044d4 <std>
 80045d0:	68a0      	ldr	r0, [r4, #8]
 80045d2:	2201      	movs	r2, #1
 80045d4:	2109      	movs	r1, #9
 80045d6:	f7ff ff7d 	bl	80044d4 <std>
 80045da:	68e0      	ldr	r0, [r4, #12]
 80045dc:	2202      	movs	r2, #2
 80045de:	2112      	movs	r1, #18
 80045e0:	f7ff ff78 	bl	80044d4 <std>
 80045e4:	2301      	movs	r3, #1
 80045e6:	61a3      	str	r3, [r4, #24]
 80045e8:	e7d2      	b.n	8004590 <__sinit+0xc>
 80045ea:	bf00      	nop
 80045ec:	0800553c 	.word	0x0800553c
 80045f0:	0800451d 	.word	0x0800451d

080045f4 <__sfp>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	4607      	mov	r7, r0
 80045f8:	f7ff ffac 	bl	8004554 <__sfp_lock_acquire>
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <__sfp+0x84>)
 80045fe:	681e      	ldr	r6, [r3, #0]
 8004600:	69b3      	ldr	r3, [r6, #24]
 8004602:	b913      	cbnz	r3, 800460a <__sfp+0x16>
 8004604:	4630      	mov	r0, r6
 8004606:	f7ff ffbd 	bl	8004584 <__sinit>
 800460a:	3648      	adds	r6, #72	; 0x48
 800460c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004610:	3b01      	subs	r3, #1
 8004612:	d503      	bpl.n	800461c <__sfp+0x28>
 8004614:	6833      	ldr	r3, [r6, #0]
 8004616:	b30b      	cbz	r3, 800465c <__sfp+0x68>
 8004618:	6836      	ldr	r6, [r6, #0]
 800461a:	e7f7      	b.n	800460c <__sfp+0x18>
 800461c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004620:	b9d5      	cbnz	r5, 8004658 <__sfp+0x64>
 8004622:	4b16      	ldr	r3, [pc, #88]	; (800467c <__sfp+0x88>)
 8004624:	60e3      	str	r3, [r4, #12]
 8004626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800462a:	6665      	str	r5, [r4, #100]	; 0x64
 800462c:	f000 f847 	bl	80046be <__retarget_lock_init_recursive>
 8004630:	f7ff ff96 	bl	8004560 <__sfp_lock_release>
 8004634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800463c:	6025      	str	r5, [r4, #0]
 800463e:	61a5      	str	r5, [r4, #24]
 8004640:	2208      	movs	r2, #8
 8004642:	4629      	mov	r1, r5
 8004644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004648:	f7ff fd0c 	bl	8004064 <memset>
 800464c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004654:	4620      	mov	r0, r4
 8004656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004658:	3468      	adds	r4, #104	; 0x68
 800465a:	e7d9      	b.n	8004610 <__sfp+0x1c>
 800465c:	2104      	movs	r1, #4
 800465e:	4638      	mov	r0, r7
 8004660:	f7ff ff62 	bl	8004528 <__sfmoreglue>
 8004664:	4604      	mov	r4, r0
 8004666:	6030      	str	r0, [r6, #0]
 8004668:	2800      	cmp	r0, #0
 800466a:	d1d5      	bne.n	8004618 <__sfp+0x24>
 800466c:	f7ff ff78 	bl	8004560 <__sfp_lock_release>
 8004670:	230c      	movs	r3, #12
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	e7ee      	b.n	8004654 <__sfp+0x60>
 8004676:	bf00      	nop
 8004678:	0800553c 	.word	0x0800553c
 800467c:	ffff0001 	.word	0xffff0001

08004680 <_fwalk_reent>:
 8004680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004684:	4606      	mov	r6, r0
 8004686:	4688      	mov	r8, r1
 8004688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800468c:	2700      	movs	r7, #0
 800468e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004692:	f1b9 0901 	subs.w	r9, r9, #1
 8004696:	d505      	bpl.n	80046a4 <_fwalk_reent+0x24>
 8004698:	6824      	ldr	r4, [r4, #0]
 800469a:	2c00      	cmp	r4, #0
 800469c:	d1f7      	bne.n	800468e <_fwalk_reent+0xe>
 800469e:	4638      	mov	r0, r7
 80046a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046a4:	89ab      	ldrh	r3, [r5, #12]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d907      	bls.n	80046ba <_fwalk_reent+0x3a>
 80046aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046ae:	3301      	adds	r3, #1
 80046b0:	d003      	beq.n	80046ba <_fwalk_reent+0x3a>
 80046b2:	4629      	mov	r1, r5
 80046b4:	4630      	mov	r0, r6
 80046b6:	47c0      	blx	r8
 80046b8:	4307      	orrs	r7, r0
 80046ba:	3568      	adds	r5, #104	; 0x68
 80046bc:	e7e9      	b.n	8004692 <_fwalk_reent+0x12>

080046be <__retarget_lock_init_recursive>:
 80046be:	4770      	bx	lr

080046c0 <__retarget_lock_acquire_recursive>:
 80046c0:	4770      	bx	lr

080046c2 <__retarget_lock_release_recursive>:
 80046c2:	4770      	bx	lr

080046c4 <__swhatbuf_r>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	460e      	mov	r6, r1
 80046c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046cc:	2900      	cmp	r1, #0
 80046ce:	b096      	sub	sp, #88	; 0x58
 80046d0:	4614      	mov	r4, r2
 80046d2:	461d      	mov	r5, r3
 80046d4:	da07      	bge.n	80046e6 <__swhatbuf_r+0x22>
 80046d6:	2300      	movs	r3, #0
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	89b3      	ldrh	r3, [r6, #12]
 80046dc:	061a      	lsls	r2, r3, #24
 80046de:	d410      	bmi.n	8004702 <__swhatbuf_r+0x3e>
 80046e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e4:	e00e      	b.n	8004704 <__swhatbuf_r+0x40>
 80046e6:	466a      	mov	r2, sp
 80046e8:	f000 fdba 	bl	8005260 <_fstat_r>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	dbf2      	blt.n	80046d6 <__swhatbuf_r+0x12>
 80046f0:	9a01      	ldr	r2, [sp, #4]
 80046f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046fa:	425a      	negs	r2, r3
 80046fc:	415a      	adcs	r2, r3
 80046fe:	602a      	str	r2, [r5, #0]
 8004700:	e7ee      	b.n	80046e0 <__swhatbuf_r+0x1c>
 8004702:	2340      	movs	r3, #64	; 0x40
 8004704:	2000      	movs	r0, #0
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	b016      	add	sp, #88	; 0x58
 800470a:	bd70      	pop	{r4, r5, r6, pc}

0800470c <__smakebuf_r>:
 800470c:	898b      	ldrh	r3, [r1, #12]
 800470e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004710:	079d      	lsls	r5, r3, #30
 8004712:	4606      	mov	r6, r0
 8004714:	460c      	mov	r4, r1
 8004716:	d507      	bpl.n	8004728 <__smakebuf_r+0x1c>
 8004718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	6123      	str	r3, [r4, #16]
 8004720:	2301      	movs	r3, #1
 8004722:	6163      	str	r3, [r4, #20]
 8004724:	b002      	add	sp, #8
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	ab01      	add	r3, sp, #4
 800472a:	466a      	mov	r2, sp
 800472c:	f7ff ffca 	bl	80046c4 <__swhatbuf_r>
 8004730:	9900      	ldr	r1, [sp, #0]
 8004732:	4605      	mov	r5, r0
 8004734:	4630      	mov	r0, r6
 8004736:	f000 f879 	bl	800482c <_malloc_r>
 800473a:	b948      	cbnz	r0, 8004750 <__smakebuf_r+0x44>
 800473c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004740:	059a      	lsls	r2, r3, #22
 8004742:	d4ef      	bmi.n	8004724 <__smakebuf_r+0x18>
 8004744:	f023 0303 	bic.w	r3, r3, #3
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	e7e3      	b.n	8004718 <__smakebuf_r+0xc>
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <__smakebuf_r+0x7c>)
 8004752:	62b3      	str	r3, [r6, #40]	; 0x28
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	6020      	str	r0, [r4, #0]
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	9b00      	ldr	r3, [sp, #0]
 8004760:	6163      	str	r3, [r4, #20]
 8004762:	9b01      	ldr	r3, [sp, #4]
 8004764:	6120      	str	r0, [r4, #16]
 8004766:	b15b      	cbz	r3, 8004780 <__smakebuf_r+0x74>
 8004768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800476c:	4630      	mov	r0, r6
 800476e:	f000 fd89 	bl	8005284 <_isatty_r>
 8004772:	b128      	cbz	r0, 8004780 <__smakebuf_r+0x74>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	89a0      	ldrh	r0, [r4, #12]
 8004782:	4305      	orrs	r5, r0
 8004784:	81a5      	strh	r5, [r4, #12]
 8004786:	e7cd      	b.n	8004724 <__smakebuf_r+0x18>
 8004788:	0800451d 	.word	0x0800451d

0800478c <_free_r>:
 800478c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800478e:	2900      	cmp	r1, #0
 8004790:	d048      	beq.n	8004824 <_free_r+0x98>
 8004792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004796:	9001      	str	r0, [sp, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f1a1 0404 	sub.w	r4, r1, #4
 800479e:	bfb8      	it	lt
 80047a0:	18e4      	addlt	r4, r4, r3
 80047a2:	f000 fdb9 	bl	8005318 <__malloc_lock>
 80047a6:	4a20      	ldr	r2, [pc, #128]	; (8004828 <_free_r+0x9c>)
 80047a8:	9801      	ldr	r0, [sp, #4]
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	4615      	mov	r5, r2
 80047ae:	b933      	cbnz	r3, 80047be <_free_r+0x32>
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	6014      	str	r4, [r2, #0]
 80047b4:	b003      	add	sp, #12
 80047b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047ba:	f000 bdb3 	b.w	8005324 <__malloc_unlock>
 80047be:	42a3      	cmp	r3, r4
 80047c0:	d90b      	bls.n	80047da <_free_r+0x4e>
 80047c2:	6821      	ldr	r1, [r4, #0]
 80047c4:	1862      	adds	r2, r4, r1
 80047c6:	4293      	cmp	r3, r2
 80047c8:	bf04      	itt	eq
 80047ca:	681a      	ldreq	r2, [r3, #0]
 80047cc:	685b      	ldreq	r3, [r3, #4]
 80047ce:	6063      	str	r3, [r4, #4]
 80047d0:	bf04      	itt	eq
 80047d2:	1852      	addeq	r2, r2, r1
 80047d4:	6022      	streq	r2, [r4, #0]
 80047d6:	602c      	str	r4, [r5, #0]
 80047d8:	e7ec      	b.n	80047b4 <_free_r+0x28>
 80047da:	461a      	mov	r2, r3
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b10b      	cbz	r3, 80047e4 <_free_r+0x58>
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	d9fa      	bls.n	80047da <_free_r+0x4e>
 80047e4:	6811      	ldr	r1, [r2, #0]
 80047e6:	1855      	adds	r5, r2, r1
 80047e8:	42a5      	cmp	r5, r4
 80047ea:	d10b      	bne.n	8004804 <_free_r+0x78>
 80047ec:	6824      	ldr	r4, [r4, #0]
 80047ee:	4421      	add	r1, r4
 80047f0:	1854      	adds	r4, r2, r1
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	6011      	str	r1, [r2, #0]
 80047f6:	d1dd      	bne.n	80047b4 <_free_r+0x28>
 80047f8:	681c      	ldr	r4, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	6053      	str	r3, [r2, #4]
 80047fe:	4421      	add	r1, r4
 8004800:	6011      	str	r1, [r2, #0]
 8004802:	e7d7      	b.n	80047b4 <_free_r+0x28>
 8004804:	d902      	bls.n	800480c <_free_r+0x80>
 8004806:	230c      	movs	r3, #12
 8004808:	6003      	str	r3, [r0, #0]
 800480a:	e7d3      	b.n	80047b4 <_free_r+0x28>
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	1961      	adds	r1, r4, r5
 8004810:	428b      	cmp	r3, r1
 8004812:	bf04      	itt	eq
 8004814:	6819      	ldreq	r1, [r3, #0]
 8004816:	685b      	ldreq	r3, [r3, #4]
 8004818:	6063      	str	r3, [r4, #4]
 800481a:	bf04      	itt	eq
 800481c:	1949      	addeq	r1, r1, r5
 800481e:	6021      	streq	r1, [r4, #0]
 8004820:	6054      	str	r4, [r2, #4]
 8004822:	e7c7      	b.n	80047b4 <_free_r+0x28>
 8004824:	b003      	add	sp, #12
 8004826:	bd30      	pop	{r4, r5, pc}
 8004828:	200000b0 	.word	0x200000b0

0800482c <_malloc_r>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	1ccd      	adds	r5, r1, #3
 8004830:	f025 0503 	bic.w	r5, r5, #3
 8004834:	3508      	adds	r5, #8
 8004836:	2d0c      	cmp	r5, #12
 8004838:	bf38      	it	cc
 800483a:	250c      	movcc	r5, #12
 800483c:	2d00      	cmp	r5, #0
 800483e:	4606      	mov	r6, r0
 8004840:	db01      	blt.n	8004846 <_malloc_r+0x1a>
 8004842:	42a9      	cmp	r1, r5
 8004844:	d903      	bls.n	800484e <_malloc_r+0x22>
 8004846:	230c      	movs	r3, #12
 8004848:	6033      	str	r3, [r6, #0]
 800484a:	2000      	movs	r0, #0
 800484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484e:	f000 fd63 	bl	8005318 <__malloc_lock>
 8004852:	4921      	ldr	r1, [pc, #132]	; (80048d8 <_malloc_r+0xac>)
 8004854:	680a      	ldr	r2, [r1, #0]
 8004856:	4614      	mov	r4, r2
 8004858:	b99c      	cbnz	r4, 8004882 <_malloc_r+0x56>
 800485a:	4f20      	ldr	r7, [pc, #128]	; (80048dc <_malloc_r+0xb0>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	b923      	cbnz	r3, 800486a <_malloc_r+0x3e>
 8004860:	4621      	mov	r1, r4
 8004862:	4630      	mov	r0, r6
 8004864:	f000 fc86 	bl	8005174 <_sbrk_r>
 8004868:	6038      	str	r0, [r7, #0]
 800486a:	4629      	mov	r1, r5
 800486c:	4630      	mov	r0, r6
 800486e:	f000 fc81 	bl	8005174 <_sbrk_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	d123      	bne.n	80048be <_malloc_r+0x92>
 8004876:	230c      	movs	r3, #12
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	4630      	mov	r0, r6
 800487c:	f000 fd52 	bl	8005324 <__malloc_unlock>
 8004880:	e7e3      	b.n	800484a <_malloc_r+0x1e>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	1b5b      	subs	r3, r3, r5
 8004886:	d417      	bmi.n	80048b8 <_malloc_r+0x8c>
 8004888:	2b0b      	cmp	r3, #11
 800488a:	d903      	bls.n	8004894 <_malloc_r+0x68>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	441c      	add	r4, r3
 8004890:	6025      	str	r5, [r4, #0]
 8004892:	e004      	b.n	800489e <_malloc_r+0x72>
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	42a2      	cmp	r2, r4
 8004898:	bf0c      	ite	eq
 800489a:	600b      	streq	r3, [r1, #0]
 800489c:	6053      	strne	r3, [r2, #4]
 800489e:	4630      	mov	r0, r6
 80048a0:	f000 fd40 	bl	8005324 <__malloc_unlock>
 80048a4:	f104 000b 	add.w	r0, r4, #11
 80048a8:	1d23      	adds	r3, r4, #4
 80048aa:	f020 0007 	bic.w	r0, r0, #7
 80048ae:	1ac2      	subs	r2, r0, r3
 80048b0:	d0cc      	beq.n	800484c <_malloc_r+0x20>
 80048b2:	1a1b      	subs	r3, r3, r0
 80048b4:	50a3      	str	r3, [r4, r2]
 80048b6:	e7c9      	b.n	800484c <_malloc_r+0x20>
 80048b8:	4622      	mov	r2, r4
 80048ba:	6864      	ldr	r4, [r4, #4]
 80048bc:	e7cc      	b.n	8004858 <_malloc_r+0x2c>
 80048be:	1cc4      	adds	r4, r0, #3
 80048c0:	f024 0403 	bic.w	r4, r4, #3
 80048c4:	42a0      	cmp	r0, r4
 80048c6:	d0e3      	beq.n	8004890 <_malloc_r+0x64>
 80048c8:	1a21      	subs	r1, r4, r0
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 fc52 	bl	8005174 <_sbrk_r>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d1dd      	bne.n	8004890 <_malloc_r+0x64>
 80048d4:	e7cf      	b.n	8004876 <_malloc_r+0x4a>
 80048d6:	bf00      	nop
 80048d8:	200000b0 	.word	0x200000b0
 80048dc:	200000b4 	.word	0x200000b4

080048e0 <__ssputs_r>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	688e      	ldr	r6, [r1, #8]
 80048e6:	429e      	cmp	r6, r3
 80048e8:	4682      	mov	sl, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	4690      	mov	r8, r2
 80048ee:	461f      	mov	r7, r3
 80048f0:	d838      	bhi.n	8004964 <__ssputs_r+0x84>
 80048f2:	898a      	ldrh	r2, [r1, #12]
 80048f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048f8:	d032      	beq.n	8004960 <__ssputs_r+0x80>
 80048fa:	6825      	ldr	r5, [r4, #0]
 80048fc:	6909      	ldr	r1, [r1, #16]
 80048fe:	eba5 0901 	sub.w	r9, r5, r1
 8004902:	6965      	ldr	r5, [r4, #20]
 8004904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800490c:	3301      	adds	r3, #1
 800490e:	444b      	add	r3, r9
 8004910:	106d      	asrs	r5, r5, #1
 8004912:	429d      	cmp	r5, r3
 8004914:	bf38      	it	cc
 8004916:	461d      	movcc	r5, r3
 8004918:	0553      	lsls	r3, r2, #21
 800491a:	d531      	bpl.n	8004980 <__ssputs_r+0xa0>
 800491c:	4629      	mov	r1, r5
 800491e:	f7ff ff85 	bl	800482c <_malloc_r>
 8004922:	4606      	mov	r6, r0
 8004924:	b950      	cbnz	r0, 800493c <__ssputs_r+0x5c>
 8004926:	230c      	movs	r3, #12
 8004928:	f8ca 3000 	str.w	r3, [sl]
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493c:	6921      	ldr	r1, [r4, #16]
 800493e:	464a      	mov	r2, r9
 8004940:	f000 fcc2 	bl	80052c8 <memcpy>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	6126      	str	r6, [r4, #16]
 8004952:	6165      	str	r5, [r4, #20]
 8004954:	444e      	add	r6, r9
 8004956:	eba5 0509 	sub.w	r5, r5, r9
 800495a:	6026      	str	r6, [r4, #0]
 800495c:	60a5      	str	r5, [r4, #8]
 800495e:	463e      	mov	r6, r7
 8004960:	42be      	cmp	r6, r7
 8004962:	d900      	bls.n	8004966 <__ssputs_r+0x86>
 8004964:	463e      	mov	r6, r7
 8004966:	4632      	mov	r2, r6
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	4641      	mov	r1, r8
 800496c:	f000 fcba 	bl	80052e4 <memmove>
 8004970:	68a3      	ldr	r3, [r4, #8]
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	4432      	add	r2, r6
 8004978:	60a3      	str	r3, [r4, #8]
 800497a:	6022      	str	r2, [r4, #0]
 800497c:	2000      	movs	r0, #0
 800497e:	e7db      	b.n	8004938 <__ssputs_r+0x58>
 8004980:	462a      	mov	r2, r5
 8004982:	f000 fcd5 	bl	8005330 <_realloc_r>
 8004986:	4606      	mov	r6, r0
 8004988:	2800      	cmp	r0, #0
 800498a:	d1e1      	bne.n	8004950 <__ssputs_r+0x70>
 800498c:	6921      	ldr	r1, [r4, #16]
 800498e:	4650      	mov	r0, sl
 8004990:	f7ff fefc 	bl	800478c <_free_r>
 8004994:	e7c7      	b.n	8004926 <__ssputs_r+0x46>
	...

08004998 <_svfiprintf_r>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	4698      	mov	r8, r3
 800499e:	898b      	ldrh	r3, [r1, #12]
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	b09d      	sub	sp, #116	; 0x74
 80049a4:	4607      	mov	r7, r0
 80049a6:	460d      	mov	r5, r1
 80049a8:	4614      	mov	r4, r2
 80049aa:	d50e      	bpl.n	80049ca <_svfiprintf_r+0x32>
 80049ac:	690b      	ldr	r3, [r1, #16]
 80049ae:	b963      	cbnz	r3, 80049ca <_svfiprintf_r+0x32>
 80049b0:	2140      	movs	r1, #64	; 0x40
 80049b2:	f7ff ff3b 	bl	800482c <_malloc_r>
 80049b6:	6028      	str	r0, [r5, #0]
 80049b8:	6128      	str	r0, [r5, #16]
 80049ba:	b920      	cbnz	r0, 80049c6 <_svfiprintf_r+0x2e>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	e0d1      	b.n	8004b6a <_svfiprintf_r+0x1d2>
 80049c6:	2340      	movs	r3, #64	; 0x40
 80049c8:	616b      	str	r3, [r5, #20]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9309      	str	r3, [sp, #36]	; 0x24
 80049ce:	2320      	movs	r3, #32
 80049d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d8:	2330      	movs	r3, #48	; 0x30
 80049da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b84 <_svfiprintf_r+0x1ec>
 80049de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049e2:	f04f 0901 	mov.w	r9, #1
 80049e6:	4623      	mov	r3, r4
 80049e8:	469a      	mov	sl, r3
 80049ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ee:	b10a      	cbz	r2, 80049f4 <_svfiprintf_r+0x5c>
 80049f0:	2a25      	cmp	r2, #37	; 0x25
 80049f2:	d1f9      	bne.n	80049e8 <_svfiprintf_r+0x50>
 80049f4:	ebba 0b04 	subs.w	fp, sl, r4
 80049f8:	d00b      	beq.n	8004a12 <_svfiprintf_r+0x7a>
 80049fa:	465b      	mov	r3, fp
 80049fc:	4622      	mov	r2, r4
 80049fe:	4629      	mov	r1, r5
 8004a00:	4638      	mov	r0, r7
 8004a02:	f7ff ff6d 	bl	80048e0 <__ssputs_r>
 8004a06:	3001      	adds	r0, #1
 8004a08:	f000 80aa 	beq.w	8004b60 <_svfiprintf_r+0x1c8>
 8004a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a0e:	445a      	add	r2, fp
 8004a10:	9209      	str	r2, [sp, #36]	; 0x24
 8004a12:	f89a 3000 	ldrb.w	r3, [sl]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 80a2 	beq.w	8004b60 <_svfiprintf_r+0x1c8>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a26:	f10a 0a01 	add.w	sl, sl, #1
 8004a2a:	9304      	str	r3, [sp, #16]
 8004a2c:	9307      	str	r3, [sp, #28]
 8004a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a32:	931a      	str	r3, [sp, #104]	; 0x68
 8004a34:	4654      	mov	r4, sl
 8004a36:	2205      	movs	r2, #5
 8004a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3c:	4851      	ldr	r0, [pc, #324]	; (8004b84 <_svfiprintf_r+0x1ec>)
 8004a3e:	f7fb fbcf 	bl	80001e0 <memchr>
 8004a42:	9a04      	ldr	r2, [sp, #16]
 8004a44:	b9d8      	cbnz	r0, 8004a7e <_svfiprintf_r+0xe6>
 8004a46:	06d0      	lsls	r0, r2, #27
 8004a48:	bf44      	itt	mi
 8004a4a:	2320      	movmi	r3, #32
 8004a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a50:	0711      	lsls	r1, r2, #28
 8004a52:	bf44      	itt	mi
 8004a54:	232b      	movmi	r3, #43	; 0x2b
 8004a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a60:	d015      	beq.n	8004a8e <_svfiprintf_r+0xf6>
 8004a62:	9a07      	ldr	r2, [sp, #28]
 8004a64:	4654      	mov	r4, sl
 8004a66:	2000      	movs	r0, #0
 8004a68:	f04f 0c0a 	mov.w	ip, #10
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a72:	3b30      	subs	r3, #48	; 0x30
 8004a74:	2b09      	cmp	r3, #9
 8004a76:	d94e      	bls.n	8004b16 <_svfiprintf_r+0x17e>
 8004a78:	b1b0      	cbz	r0, 8004aa8 <_svfiprintf_r+0x110>
 8004a7a:	9207      	str	r2, [sp, #28]
 8004a7c:	e014      	b.n	8004aa8 <_svfiprintf_r+0x110>
 8004a7e:	eba0 0308 	sub.w	r3, r0, r8
 8004a82:	fa09 f303 	lsl.w	r3, r9, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	46a2      	mov	sl, r4
 8004a8c:	e7d2      	b.n	8004a34 <_svfiprintf_r+0x9c>
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	1d19      	adds	r1, r3, #4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	9103      	str	r1, [sp, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfbb      	ittet	lt
 8004a9a:	425b      	neglt	r3, r3
 8004a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa0:	9307      	strge	r3, [sp, #28]
 8004aa2:	9307      	strlt	r3, [sp, #28]
 8004aa4:	bfb8      	it	lt
 8004aa6:	9204      	strlt	r2, [sp, #16]
 8004aa8:	7823      	ldrb	r3, [r4, #0]
 8004aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8004aac:	d10c      	bne.n	8004ac8 <_svfiprintf_r+0x130>
 8004aae:	7863      	ldrb	r3, [r4, #1]
 8004ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab2:	d135      	bne.n	8004b20 <_svfiprintf_r+0x188>
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	9203      	str	r2, [sp, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bfb8      	it	lt
 8004ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ac4:	3402      	adds	r4, #2
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b94 <_svfiprintf_r+0x1fc>
 8004acc:	7821      	ldrb	r1, [r4, #0]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	f7fb fb85 	bl	80001e0 <memchr>
 8004ad6:	b140      	cbz	r0, 8004aea <_svfiprintf_r+0x152>
 8004ad8:	2340      	movs	r3, #64	; 0x40
 8004ada:	eba0 000a 	sub.w	r0, r0, sl
 8004ade:	fa03 f000 	lsl.w	r0, r3, r0
 8004ae2:	9b04      	ldr	r3, [sp, #16]
 8004ae4:	4303      	orrs	r3, r0
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aee:	4826      	ldr	r0, [pc, #152]	; (8004b88 <_svfiprintf_r+0x1f0>)
 8004af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004af4:	2206      	movs	r2, #6
 8004af6:	f7fb fb73 	bl	80001e0 <memchr>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d038      	beq.n	8004b70 <_svfiprintf_r+0x1d8>
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <_svfiprintf_r+0x1f4>)
 8004b00:	bb1b      	cbnz	r3, 8004b4a <_svfiprintf_r+0x1b2>
 8004b02:	9b03      	ldr	r3, [sp, #12]
 8004b04:	3307      	adds	r3, #7
 8004b06:	f023 0307 	bic.w	r3, r3, #7
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b10:	4433      	add	r3, r6
 8004b12:	9309      	str	r3, [sp, #36]	; 0x24
 8004b14:	e767      	b.n	80049e6 <_svfiprintf_r+0x4e>
 8004b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	e7a5      	b.n	8004a6c <_svfiprintf_r+0xd4>
 8004b20:	2300      	movs	r3, #0
 8004b22:	3401      	adds	r4, #1
 8004b24:	9305      	str	r3, [sp, #20]
 8004b26:	4619      	mov	r1, r3
 8004b28:	f04f 0c0a 	mov.w	ip, #10
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b32:	3a30      	subs	r2, #48	; 0x30
 8004b34:	2a09      	cmp	r2, #9
 8004b36:	d903      	bls.n	8004b40 <_svfiprintf_r+0x1a8>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0c5      	beq.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3c:	9105      	str	r1, [sp, #20]
 8004b3e:	e7c3      	b.n	8004ac8 <_svfiprintf_r+0x130>
 8004b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b44:	4604      	mov	r4, r0
 8004b46:	2301      	movs	r3, #1
 8004b48:	e7f0      	b.n	8004b2c <_svfiprintf_r+0x194>
 8004b4a:	ab03      	add	r3, sp, #12
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	462a      	mov	r2, r5
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <_svfiprintf_r+0x1f8>)
 8004b52:	a904      	add	r1, sp, #16
 8004b54:	4638      	mov	r0, r7
 8004b56:	f3af 8000 	nop.w
 8004b5a:	1c42      	adds	r2, r0, #1
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	d1d6      	bne.n	8004b0e <_svfiprintf_r+0x176>
 8004b60:	89ab      	ldrh	r3, [r5, #12]
 8004b62:	065b      	lsls	r3, r3, #25
 8004b64:	f53f af2c 	bmi.w	80049c0 <_svfiprintf_r+0x28>
 8004b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b6a:	b01d      	add	sp, #116	; 0x74
 8004b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b70:	ab03      	add	r3, sp, #12
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	462a      	mov	r2, r5
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <_svfiprintf_r+0x1f8>)
 8004b78:	a904      	add	r1, sp, #16
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f000 f9d4 	bl	8004f28 <_printf_i>
 8004b80:	e7eb      	b.n	8004b5a <_svfiprintf_r+0x1c2>
 8004b82:	bf00      	nop
 8004b84:	080055a0 	.word	0x080055a0
 8004b88:	080055aa 	.word	0x080055aa
 8004b8c:	00000000 	.word	0x00000000
 8004b90:	080048e1 	.word	0x080048e1
 8004b94:	080055a6 	.word	0x080055a6

08004b98 <__sfputc_r>:
 8004b98:	6893      	ldr	r3, [r2, #8]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	b410      	push	{r4}
 8004ba0:	6093      	str	r3, [r2, #8]
 8004ba2:	da08      	bge.n	8004bb6 <__sfputc_r+0x1e>
 8004ba4:	6994      	ldr	r4, [r2, #24]
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	db01      	blt.n	8004bae <__sfputc_r+0x16>
 8004baa:	290a      	cmp	r1, #10
 8004bac:	d103      	bne.n	8004bb6 <__sfputc_r+0x1e>
 8004bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb2:	f7ff bb0d 	b.w	80041d0 <__swbuf_r>
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	1c58      	adds	r0, r3, #1
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	7019      	strb	r1, [r3, #0]
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <__sfputs_r>:
 8004bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc8:	4606      	mov	r6, r0
 8004bca:	460f      	mov	r7, r1
 8004bcc:	4614      	mov	r4, r2
 8004bce:	18d5      	adds	r5, r2, r3
 8004bd0:	42ac      	cmp	r4, r5
 8004bd2:	d101      	bne.n	8004bd8 <__sfputs_r+0x12>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e007      	b.n	8004be8 <__sfputs_r+0x22>
 8004bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bdc:	463a      	mov	r2, r7
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7ff ffda 	bl	8004b98 <__sfputc_r>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d1f3      	bne.n	8004bd0 <__sfputs_r+0xa>
 8004be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bec <_vfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	b09d      	sub	sp, #116	; 0x74
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	b118      	cbz	r0, 8004c04 <_vfiprintf_r+0x18>
 8004bfc:	6983      	ldr	r3, [r0, #24]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <_vfiprintf_r+0x18>
 8004c00:	f7ff fcc0 	bl	8004584 <__sinit>
 8004c04:	4b89      	ldr	r3, [pc, #548]	; (8004e2c <_vfiprintf_r+0x240>)
 8004c06:	429d      	cmp	r5, r3
 8004c08:	d11b      	bne.n	8004c42 <_vfiprintf_r+0x56>
 8004c0a:	6875      	ldr	r5, [r6, #4]
 8004c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c0e:	07d9      	lsls	r1, r3, #31
 8004c10:	d405      	bmi.n	8004c1e <_vfiprintf_r+0x32>
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	059a      	lsls	r2, r3, #22
 8004c16:	d402      	bmi.n	8004c1e <_vfiprintf_r+0x32>
 8004c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c1a:	f7ff fd51 	bl	80046c0 <__retarget_lock_acquire_recursive>
 8004c1e:	89ab      	ldrh	r3, [r5, #12]
 8004c20:	071b      	lsls	r3, r3, #28
 8004c22:	d501      	bpl.n	8004c28 <_vfiprintf_r+0x3c>
 8004c24:	692b      	ldr	r3, [r5, #16]
 8004c26:	b9eb      	cbnz	r3, 8004c64 <_vfiprintf_r+0x78>
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7ff fb22 	bl	8004274 <__swsetup_r>
 8004c30:	b1c0      	cbz	r0, 8004c64 <_vfiprintf_r+0x78>
 8004c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c34:	07dc      	lsls	r4, r3, #31
 8004c36:	d50e      	bpl.n	8004c56 <_vfiprintf_r+0x6a>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	b01d      	add	sp, #116	; 0x74
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c42:	4b7b      	ldr	r3, [pc, #492]	; (8004e30 <_vfiprintf_r+0x244>)
 8004c44:	429d      	cmp	r5, r3
 8004c46:	d101      	bne.n	8004c4c <_vfiprintf_r+0x60>
 8004c48:	68b5      	ldr	r5, [r6, #8]
 8004c4a:	e7df      	b.n	8004c0c <_vfiprintf_r+0x20>
 8004c4c:	4b79      	ldr	r3, [pc, #484]	; (8004e34 <_vfiprintf_r+0x248>)
 8004c4e:	429d      	cmp	r5, r3
 8004c50:	bf08      	it	eq
 8004c52:	68f5      	ldreq	r5, [r6, #12]
 8004c54:	e7da      	b.n	8004c0c <_vfiprintf_r+0x20>
 8004c56:	89ab      	ldrh	r3, [r5, #12]
 8004c58:	0598      	lsls	r0, r3, #22
 8004c5a:	d4ed      	bmi.n	8004c38 <_vfiprintf_r+0x4c>
 8004c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c5e:	f7ff fd30 	bl	80046c2 <__retarget_lock_release_recursive>
 8004c62:	e7e9      	b.n	8004c38 <_vfiprintf_r+0x4c>
 8004c64:	2300      	movs	r3, #0
 8004c66:	9309      	str	r3, [sp, #36]	; 0x24
 8004c68:	2320      	movs	r3, #32
 8004c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c72:	2330      	movs	r3, #48	; 0x30
 8004c74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e38 <_vfiprintf_r+0x24c>
 8004c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c7c:	f04f 0901 	mov.w	r9, #1
 8004c80:	4623      	mov	r3, r4
 8004c82:	469a      	mov	sl, r3
 8004c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c88:	b10a      	cbz	r2, 8004c8e <_vfiprintf_r+0xa2>
 8004c8a:	2a25      	cmp	r2, #37	; 0x25
 8004c8c:	d1f9      	bne.n	8004c82 <_vfiprintf_r+0x96>
 8004c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c92:	d00b      	beq.n	8004cac <_vfiprintf_r+0xc0>
 8004c94:	465b      	mov	r3, fp
 8004c96:	4622      	mov	r2, r4
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7ff ff93 	bl	8004bc6 <__sfputs_r>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f000 80aa 	beq.w	8004dfa <_vfiprintf_r+0x20e>
 8004ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca8:	445a      	add	r2, fp
 8004caa:	9209      	str	r2, [sp, #36]	; 0x24
 8004cac:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a2 	beq.w	8004dfa <_vfiprintf_r+0x20e>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cc0:	f10a 0a01 	add.w	sl, sl, #1
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	9307      	str	r3, [sp, #28]
 8004cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8004cce:	4654      	mov	r4, sl
 8004cd0:	2205      	movs	r2, #5
 8004cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd6:	4858      	ldr	r0, [pc, #352]	; (8004e38 <_vfiprintf_r+0x24c>)
 8004cd8:	f7fb fa82 	bl	80001e0 <memchr>
 8004cdc:	9a04      	ldr	r2, [sp, #16]
 8004cde:	b9d8      	cbnz	r0, 8004d18 <_vfiprintf_r+0x12c>
 8004ce0:	06d1      	lsls	r1, r2, #27
 8004ce2:	bf44      	itt	mi
 8004ce4:	2320      	movmi	r3, #32
 8004ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cea:	0713      	lsls	r3, r2, #28
 8004cec:	bf44      	itt	mi
 8004cee:	232b      	movmi	r3, #43	; 0x2b
 8004cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfa:	d015      	beq.n	8004d28 <_vfiprintf_r+0x13c>
 8004cfc:	9a07      	ldr	r2, [sp, #28]
 8004cfe:	4654      	mov	r4, sl
 8004d00:	2000      	movs	r0, #0
 8004d02:	f04f 0c0a 	mov.w	ip, #10
 8004d06:	4621      	mov	r1, r4
 8004d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d0c:	3b30      	subs	r3, #48	; 0x30
 8004d0e:	2b09      	cmp	r3, #9
 8004d10:	d94e      	bls.n	8004db0 <_vfiprintf_r+0x1c4>
 8004d12:	b1b0      	cbz	r0, 8004d42 <_vfiprintf_r+0x156>
 8004d14:	9207      	str	r2, [sp, #28]
 8004d16:	e014      	b.n	8004d42 <_vfiprintf_r+0x156>
 8004d18:	eba0 0308 	sub.w	r3, r0, r8
 8004d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d20:	4313      	orrs	r3, r2
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	46a2      	mov	sl, r4
 8004d26:	e7d2      	b.n	8004cce <_vfiprintf_r+0xe2>
 8004d28:	9b03      	ldr	r3, [sp, #12]
 8004d2a:	1d19      	adds	r1, r3, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	9103      	str	r1, [sp, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bfbb      	ittet	lt
 8004d34:	425b      	neglt	r3, r3
 8004d36:	f042 0202 	orrlt.w	r2, r2, #2
 8004d3a:	9307      	strge	r3, [sp, #28]
 8004d3c:	9307      	strlt	r3, [sp, #28]
 8004d3e:	bfb8      	it	lt
 8004d40:	9204      	strlt	r2, [sp, #16]
 8004d42:	7823      	ldrb	r3, [r4, #0]
 8004d44:	2b2e      	cmp	r3, #46	; 0x2e
 8004d46:	d10c      	bne.n	8004d62 <_vfiprintf_r+0x176>
 8004d48:	7863      	ldrb	r3, [r4, #1]
 8004d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d4c:	d135      	bne.n	8004dba <_vfiprintf_r+0x1ce>
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	1d1a      	adds	r2, r3, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	9203      	str	r2, [sp, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfb8      	it	lt
 8004d5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d5e:	3402      	adds	r4, #2
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e48 <_vfiprintf_r+0x25c>
 8004d66:	7821      	ldrb	r1, [r4, #0]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7fb fa38 	bl	80001e0 <memchr>
 8004d70:	b140      	cbz	r0, 8004d84 <_vfiprintf_r+0x198>
 8004d72:	2340      	movs	r3, #64	; 0x40
 8004d74:	eba0 000a 	sub.w	r0, r0, sl
 8004d78:	fa03 f000 	lsl.w	r0, r3, r0
 8004d7c:	9b04      	ldr	r3, [sp, #16]
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	3401      	adds	r4, #1
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d88:	482c      	ldr	r0, [pc, #176]	; (8004e3c <_vfiprintf_r+0x250>)
 8004d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d8e:	2206      	movs	r2, #6
 8004d90:	f7fb fa26 	bl	80001e0 <memchr>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d03f      	beq.n	8004e18 <_vfiprintf_r+0x22c>
 8004d98:	4b29      	ldr	r3, [pc, #164]	; (8004e40 <_vfiprintf_r+0x254>)
 8004d9a:	bb1b      	cbnz	r3, 8004de4 <_vfiprintf_r+0x1f8>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	3307      	adds	r3, #7
 8004da0:	f023 0307 	bic.w	r3, r3, #7
 8004da4:	3308      	adds	r3, #8
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004daa:	443b      	add	r3, r7
 8004dac:	9309      	str	r3, [sp, #36]	; 0x24
 8004dae:	e767      	b.n	8004c80 <_vfiprintf_r+0x94>
 8004db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004db4:	460c      	mov	r4, r1
 8004db6:	2001      	movs	r0, #1
 8004db8:	e7a5      	b.n	8004d06 <_vfiprintf_r+0x11a>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	3401      	adds	r4, #1
 8004dbe:	9305      	str	r3, [sp, #20]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f04f 0c0a 	mov.w	ip, #10
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dcc:	3a30      	subs	r2, #48	; 0x30
 8004dce:	2a09      	cmp	r2, #9
 8004dd0:	d903      	bls.n	8004dda <_vfiprintf_r+0x1ee>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0c5      	beq.n	8004d62 <_vfiprintf_r+0x176>
 8004dd6:	9105      	str	r1, [sp, #20]
 8004dd8:	e7c3      	b.n	8004d62 <_vfiprintf_r+0x176>
 8004dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dde:	4604      	mov	r4, r0
 8004de0:	2301      	movs	r3, #1
 8004de2:	e7f0      	b.n	8004dc6 <_vfiprintf_r+0x1da>
 8004de4:	ab03      	add	r3, sp, #12
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	462a      	mov	r2, r5
 8004dea:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <_vfiprintf_r+0x258>)
 8004dec:	a904      	add	r1, sp, #16
 8004dee:	4630      	mov	r0, r6
 8004df0:	f3af 8000 	nop.w
 8004df4:	4607      	mov	r7, r0
 8004df6:	1c78      	adds	r0, r7, #1
 8004df8:	d1d6      	bne.n	8004da8 <_vfiprintf_r+0x1bc>
 8004dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dfc:	07d9      	lsls	r1, r3, #31
 8004dfe:	d405      	bmi.n	8004e0c <_vfiprintf_r+0x220>
 8004e00:	89ab      	ldrh	r3, [r5, #12]
 8004e02:	059a      	lsls	r2, r3, #22
 8004e04:	d402      	bmi.n	8004e0c <_vfiprintf_r+0x220>
 8004e06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e08:	f7ff fc5b 	bl	80046c2 <__retarget_lock_release_recursive>
 8004e0c:	89ab      	ldrh	r3, [r5, #12]
 8004e0e:	065b      	lsls	r3, r3, #25
 8004e10:	f53f af12 	bmi.w	8004c38 <_vfiprintf_r+0x4c>
 8004e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e16:	e711      	b.n	8004c3c <_vfiprintf_r+0x50>
 8004e18:	ab03      	add	r3, sp, #12
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <_vfiprintf_r+0x258>)
 8004e20:	a904      	add	r1, sp, #16
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 f880 	bl	8004f28 <_printf_i>
 8004e28:	e7e4      	b.n	8004df4 <_vfiprintf_r+0x208>
 8004e2a:	bf00      	nop
 8004e2c:	08005560 	.word	0x08005560
 8004e30:	08005580 	.word	0x08005580
 8004e34:	08005540 	.word	0x08005540
 8004e38:	080055a0 	.word	0x080055a0
 8004e3c:	080055aa 	.word	0x080055aa
 8004e40:	00000000 	.word	0x00000000
 8004e44:	08004bc7 	.word	0x08004bc7
 8004e48:	080055a6 	.word	0x080055a6

08004e4c <_printf_common>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	4616      	mov	r6, r2
 8004e52:	4699      	mov	r9, r3
 8004e54:	688a      	ldr	r2, [r1, #8]
 8004e56:	690b      	ldr	r3, [r1, #16]
 8004e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	bfb8      	it	lt
 8004e60:	4613      	movlt	r3, r2
 8004e62:	6033      	str	r3, [r6, #0]
 8004e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e68:	4607      	mov	r7, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	b10a      	cbz	r2, 8004e72 <_printf_common+0x26>
 8004e6e:	3301      	adds	r3, #1
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	0699      	lsls	r1, r3, #26
 8004e76:	bf42      	ittt	mi
 8004e78:	6833      	ldrmi	r3, [r6, #0]
 8004e7a:	3302      	addmi	r3, #2
 8004e7c:	6033      	strmi	r3, [r6, #0]
 8004e7e:	6825      	ldr	r5, [r4, #0]
 8004e80:	f015 0506 	ands.w	r5, r5, #6
 8004e84:	d106      	bne.n	8004e94 <_printf_common+0x48>
 8004e86:	f104 0a19 	add.w	sl, r4, #25
 8004e8a:	68e3      	ldr	r3, [r4, #12]
 8004e8c:	6832      	ldr	r2, [r6, #0]
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	42ab      	cmp	r3, r5
 8004e92:	dc26      	bgt.n	8004ee2 <_printf_common+0x96>
 8004e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e98:	1e13      	subs	r3, r2, #0
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	bf18      	it	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	0692      	lsls	r2, r2, #26
 8004ea2:	d42b      	bmi.n	8004efc <_printf_common+0xb0>
 8004ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	4638      	mov	r0, r7
 8004eac:	47c0      	blx	r8
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d01e      	beq.n	8004ef0 <_printf_common+0xa4>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	68e5      	ldr	r5, [r4, #12]
 8004eb6:	6832      	ldr	r2, [r6, #0]
 8004eb8:	f003 0306 	and.w	r3, r3, #6
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	bf08      	it	eq
 8004ec0:	1aad      	subeq	r5, r5, r2
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	bf0c      	ite	eq
 8004ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ecc:	2500      	movne	r5, #0
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	bfc4      	itt	gt
 8004ed2:	1a9b      	subgt	r3, r3, r2
 8004ed4:	18ed      	addgt	r5, r5, r3
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	341a      	adds	r4, #26
 8004eda:	42b5      	cmp	r5, r6
 8004edc:	d11a      	bne.n	8004f14 <_printf_common+0xc8>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e008      	b.n	8004ef4 <_printf_common+0xa8>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4652      	mov	r2, sl
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	4638      	mov	r0, r7
 8004eea:	47c0      	blx	r8
 8004eec:	3001      	adds	r0, #1
 8004eee:	d103      	bne.n	8004ef8 <_printf_common+0xac>
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef8:	3501      	adds	r5, #1
 8004efa:	e7c6      	b.n	8004e8a <_printf_common+0x3e>
 8004efc:	18e1      	adds	r1, r4, r3
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	2030      	movs	r0, #48	; 0x30
 8004f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f06:	4422      	add	r2, r4
 8004f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f10:	3302      	adds	r3, #2
 8004f12:	e7c7      	b.n	8004ea4 <_printf_common+0x58>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4622      	mov	r2, r4
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d0e6      	beq.n	8004ef0 <_printf_common+0xa4>
 8004f22:	3601      	adds	r6, #1
 8004f24:	e7d9      	b.n	8004eda <_printf_common+0x8e>
	...

08004f28 <_printf_i>:
 8004f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	4691      	mov	r9, r2
 8004f30:	7e27      	ldrb	r7, [r4, #24]
 8004f32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f34:	2f78      	cmp	r7, #120	; 0x78
 8004f36:	4680      	mov	r8, r0
 8004f38:	469a      	mov	sl, r3
 8004f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f3e:	d807      	bhi.n	8004f50 <_printf_i+0x28>
 8004f40:	2f62      	cmp	r7, #98	; 0x62
 8004f42:	d80a      	bhi.n	8004f5a <_printf_i+0x32>
 8004f44:	2f00      	cmp	r7, #0
 8004f46:	f000 80d8 	beq.w	80050fa <_printf_i+0x1d2>
 8004f4a:	2f58      	cmp	r7, #88	; 0x58
 8004f4c:	f000 80a3 	beq.w	8005096 <_printf_i+0x16e>
 8004f50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f58:	e03a      	b.n	8004fd0 <_printf_i+0xa8>
 8004f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f5e:	2b15      	cmp	r3, #21
 8004f60:	d8f6      	bhi.n	8004f50 <_printf_i+0x28>
 8004f62:	a001      	add	r0, pc, #4	; (adr r0, 8004f68 <_printf_i+0x40>)
 8004f64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f68:	08004fc1 	.word	0x08004fc1
 8004f6c:	08004fd5 	.word	0x08004fd5
 8004f70:	08004f51 	.word	0x08004f51
 8004f74:	08004f51 	.word	0x08004f51
 8004f78:	08004f51 	.word	0x08004f51
 8004f7c:	08004f51 	.word	0x08004f51
 8004f80:	08004fd5 	.word	0x08004fd5
 8004f84:	08004f51 	.word	0x08004f51
 8004f88:	08004f51 	.word	0x08004f51
 8004f8c:	08004f51 	.word	0x08004f51
 8004f90:	08004f51 	.word	0x08004f51
 8004f94:	080050e1 	.word	0x080050e1
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	080050c3 	.word	0x080050c3
 8004fa0:	08004f51 	.word	0x08004f51
 8004fa4:	08004f51 	.word	0x08004f51
 8004fa8:	08005103 	.word	0x08005103
 8004fac:	08004f51 	.word	0x08004f51
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08004f51 	.word	0x08004f51
 8004fb8:	08004f51 	.word	0x08004f51
 8004fbc:	080050cb 	.word	0x080050cb
 8004fc0:	680b      	ldr	r3, [r1, #0]
 8004fc2:	1d1a      	adds	r2, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	600a      	str	r2, [r1, #0]
 8004fc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0a3      	b.n	800511c <_printf_i+0x1f4>
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	6808      	ldr	r0, [r1, #0]
 8004fd8:	062e      	lsls	r6, r5, #24
 8004fda:	f100 0304 	add.w	r3, r0, #4
 8004fde:	d50a      	bpl.n	8004ff6 <_printf_i+0xce>
 8004fe0:	6805      	ldr	r5, [r0, #0]
 8004fe2:	600b      	str	r3, [r1, #0]
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	da03      	bge.n	8004ff0 <_printf_i+0xc8>
 8004fe8:	232d      	movs	r3, #45	; 0x2d
 8004fea:	426d      	negs	r5, r5
 8004fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff0:	485e      	ldr	r0, [pc, #376]	; (800516c <_printf_i+0x244>)
 8004ff2:	230a      	movs	r3, #10
 8004ff4:	e019      	b.n	800502a <_printf_i+0x102>
 8004ff6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ffa:	6805      	ldr	r5, [r0, #0]
 8004ffc:	600b      	str	r3, [r1, #0]
 8004ffe:	bf18      	it	ne
 8005000:	b22d      	sxthne	r5, r5
 8005002:	e7ef      	b.n	8004fe4 <_printf_i+0xbc>
 8005004:	680b      	ldr	r3, [r1, #0]
 8005006:	6825      	ldr	r5, [r4, #0]
 8005008:	1d18      	adds	r0, r3, #4
 800500a:	6008      	str	r0, [r1, #0]
 800500c:	0628      	lsls	r0, r5, #24
 800500e:	d501      	bpl.n	8005014 <_printf_i+0xec>
 8005010:	681d      	ldr	r5, [r3, #0]
 8005012:	e002      	b.n	800501a <_printf_i+0xf2>
 8005014:	0669      	lsls	r1, r5, #25
 8005016:	d5fb      	bpl.n	8005010 <_printf_i+0xe8>
 8005018:	881d      	ldrh	r5, [r3, #0]
 800501a:	4854      	ldr	r0, [pc, #336]	; (800516c <_printf_i+0x244>)
 800501c:	2f6f      	cmp	r7, #111	; 0x6f
 800501e:	bf0c      	ite	eq
 8005020:	2308      	moveq	r3, #8
 8005022:	230a      	movne	r3, #10
 8005024:	2100      	movs	r1, #0
 8005026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800502a:	6866      	ldr	r6, [r4, #4]
 800502c:	60a6      	str	r6, [r4, #8]
 800502e:	2e00      	cmp	r6, #0
 8005030:	bfa2      	ittt	ge
 8005032:	6821      	ldrge	r1, [r4, #0]
 8005034:	f021 0104 	bicge.w	r1, r1, #4
 8005038:	6021      	strge	r1, [r4, #0]
 800503a:	b90d      	cbnz	r5, 8005040 <_printf_i+0x118>
 800503c:	2e00      	cmp	r6, #0
 800503e:	d04d      	beq.n	80050dc <_printf_i+0x1b4>
 8005040:	4616      	mov	r6, r2
 8005042:	fbb5 f1f3 	udiv	r1, r5, r3
 8005046:	fb03 5711 	mls	r7, r3, r1, r5
 800504a:	5dc7      	ldrb	r7, [r0, r7]
 800504c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005050:	462f      	mov	r7, r5
 8005052:	42bb      	cmp	r3, r7
 8005054:	460d      	mov	r5, r1
 8005056:	d9f4      	bls.n	8005042 <_printf_i+0x11a>
 8005058:	2b08      	cmp	r3, #8
 800505a:	d10b      	bne.n	8005074 <_printf_i+0x14c>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	07df      	lsls	r7, r3, #31
 8005060:	d508      	bpl.n	8005074 <_printf_i+0x14c>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	6861      	ldr	r1, [r4, #4]
 8005066:	4299      	cmp	r1, r3
 8005068:	bfde      	ittt	le
 800506a:	2330      	movle	r3, #48	; 0x30
 800506c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005074:	1b92      	subs	r2, r2, r6
 8005076:	6122      	str	r2, [r4, #16]
 8005078:	f8cd a000 	str.w	sl, [sp]
 800507c:	464b      	mov	r3, r9
 800507e:	aa03      	add	r2, sp, #12
 8005080:	4621      	mov	r1, r4
 8005082:	4640      	mov	r0, r8
 8005084:	f7ff fee2 	bl	8004e4c <_printf_common>
 8005088:	3001      	adds	r0, #1
 800508a:	d14c      	bne.n	8005126 <_printf_i+0x1fe>
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	b004      	add	sp, #16
 8005092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005096:	4835      	ldr	r0, [pc, #212]	; (800516c <_printf_i+0x244>)
 8005098:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	680e      	ldr	r6, [r1, #0]
 80050a0:	061f      	lsls	r7, r3, #24
 80050a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80050a6:	600e      	str	r6, [r1, #0]
 80050a8:	d514      	bpl.n	80050d4 <_printf_i+0x1ac>
 80050aa:	07d9      	lsls	r1, r3, #31
 80050ac:	bf44      	itt	mi
 80050ae:	f043 0320 	orrmi.w	r3, r3, #32
 80050b2:	6023      	strmi	r3, [r4, #0]
 80050b4:	b91d      	cbnz	r5, 80050be <_printf_i+0x196>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f023 0320 	bic.w	r3, r3, #32
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	2310      	movs	r3, #16
 80050c0:	e7b0      	b.n	8005024 <_printf_i+0xfc>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	2378      	movs	r3, #120	; 0x78
 80050cc:	4828      	ldr	r0, [pc, #160]	; (8005170 <_printf_i+0x248>)
 80050ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050d2:	e7e3      	b.n	800509c <_printf_i+0x174>
 80050d4:	065e      	lsls	r6, r3, #25
 80050d6:	bf48      	it	mi
 80050d8:	b2ad      	uxthmi	r5, r5
 80050da:	e7e6      	b.n	80050aa <_printf_i+0x182>
 80050dc:	4616      	mov	r6, r2
 80050de:	e7bb      	b.n	8005058 <_printf_i+0x130>
 80050e0:	680b      	ldr	r3, [r1, #0]
 80050e2:	6826      	ldr	r6, [r4, #0]
 80050e4:	6960      	ldr	r0, [r4, #20]
 80050e6:	1d1d      	adds	r5, r3, #4
 80050e8:	600d      	str	r5, [r1, #0]
 80050ea:	0635      	lsls	r5, r6, #24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0x1cc>
 80050f0:	6018      	str	r0, [r3, #0]
 80050f2:	e002      	b.n	80050fa <_printf_i+0x1d2>
 80050f4:	0671      	lsls	r1, r6, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0x1c8>
 80050f8:	8018      	strh	r0, [r3, #0]
 80050fa:	2300      	movs	r3, #0
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	4616      	mov	r6, r2
 8005100:	e7ba      	b.n	8005078 <_printf_i+0x150>
 8005102:	680b      	ldr	r3, [r1, #0]
 8005104:	1d1a      	adds	r2, r3, #4
 8005106:	600a      	str	r2, [r1, #0]
 8005108:	681e      	ldr	r6, [r3, #0]
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	2100      	movs	r1, #0
 800510e:	4630      	mov	r0, r6
 8005110:	f7fb f866 	bl	80001e0 <memchr>
 8005114:	b108      	cbz	r0, 800511a <_printf_i+0x1f2>
 8005116:	1b80      	subs	r0, r0, r6
 8005118:	6060      	str	r0, [r4, #4]
 800511a:	6863      	ldr	r3, [r4, #4]
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	2300      	movs	r3, #0
 8005120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005124:	e7a8      	b.n	8005078 <_printf_i+0x150>
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	4632      	mov	r2, r6
 800512a:	4649      	mov	r1, r9
 800512c:	4640      	mov	r0, r8
 800512e:	47d0      	blx	sl
 8005130:	3001      	adds	r0, #1
 8005132:	d0ab      	beq.n	800508c <_printf_i+0x164>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	079b      	lsls	r3, r3, #30
 8005138:	d413      	bmi.n	8005162 <_printf_i+0x23a>
 800513a:	68e0      	ldr	r0, [r4, #12]
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	4298      	cmp	r0, r3
 8005140:	bfb8      	it	lt
 8005142:	4618      	movlt	r0, r3
 8005144:	e7a4      	b.n	8005090 <_printf_i+0x168>
 8005146:	2301      	movs	r3, #1
 8005148:	4632      	mov	r2, r6
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	47d0      	blx	sl
 8005150:	3001      	adds	r0, #1
 8005152:	d09b      	beq.n	800508c <_printf_i+0x164>
 8005154:	3501      	adds	r5, #1
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	9903      	ldr	r1, [sp, #12]
 800515a:	1a5b      	subs	r3, r3, r1
 800515c:	42ab      	cmp	r3, r5
 800515e:	dcf2      	bgt.n	8005146 <_printf_i+0x21e>
 8005160:	e7eb      	b.n	800513a <_printf_i+0x212>
 8005162:	2500      	movs	r5, #0
 8005164:	f104 0619 	add.w	r6, r4, #25
 8005168:	e7f5      	b.n	8005156 <_printf_i+0x22e>
 800516a:	bf00      	nop
 800516c:	080055b1 	.word	0x080055b1
 8005170:	080055c2 	.word	0x080055c2

08005174 <_sbrk_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d06      	ldr	r5, [pc, #24]	; (8005190 <_sbrk_r+0x1c>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc f914 	bl	80013ac <_sbrk>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_sbrk_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_sbrk_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000274 	.word	0x20000274

08005194 <__sread>:
 8005194:	b510      	push	{r4, lr}
 8005196:	460c      	mov	r4, r1
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	f000 f8ee 	bl	800537c <_read_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	bfab      	itete	ge
 80051a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051a6:	89a3      	ldrhlt	r3, [r4, #12]
 80051a8:	181b      	addge	r3, r3, r0
 80051aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051ae:	bfac      	ite	ge
 80051b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80051b2:	81a3      	strhlt	r3, [r4, #12]
 80051b4:	bd10      	pop	{r4, pc}

080051b6 <__swrite>:
 80051b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ba:	461f      	mov	r7, r3
 80051bc:	898b      	ldrh	r3, [r1, #12]
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	4605      	mov	r5, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	4616      	mov	r6, r2
 80051c6:	d505      	bpl.n	80051d4 <__swrite+0x1e>
 80051c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051cc:	2302      	movs	r3, #2
 80051ce:	2200      	movs	r2, #0
 80051d0:	f000 f868 	bl	80052a4 <_lseek_r>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	4632      	mov	r2, r6
 80051e2:	463b      	mov	r3, r7
 80051e4:	4628      	mov	r0, r5
 80051e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ea:	f000 b817 	b.w	800521c <_write_r>

080051ee <__sseek>:
 80051ee:	b510      	push	{r4, lr}
 80051f0:	460c      	mov	r4, r1
 80051f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f6:	f000 f855 	bl	80052a4 <_lseek_r>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	bf15      	itete	ne
 8005200:	6560      	strne	r0, [r4, #84]	; 0x54
 8005202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800520a:	81a3      	strheq	r3, [r4, #12]
 800520c:	bf18      	it	ne
 800520e:	81a3      	strhne	r3, [r4, #12]
 8005210:	bd10      	pop	{r4, pc}

08005212 <__sclose>:
 8005212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005216:	f000 b813 	b.w	8005240 <_close_r>
	...

0800521c <_write_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d07      	ldr	r5, [pc, #28]	; (800523c <_write_r+0x20>)
 8005220:	4604      	mov	r4, r0
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	2200      	movs	r2, #0
 8005228:	602a      	str	r2, [r5, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f7fc f86d 	bl	800130a <_write>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_write_r+0x1e>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_write_r+0x1e>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	20000274 	.word	0x20000274

08005240 <_close_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d06      	ldr	r5, [pc, #24]	; (800525c <_close_r+0x1c>)
 8005244:	2300      	movs	r3, #0
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	f7fc f879 	bl	8001342 <_close>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_close_r+0x1a>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_close_r+0x1a>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000274 	.word	0x20000274

08005260 <_fstat_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d07      	ldr	r5, [pc, #28]	; (8005280 <_fstat_r+0x20>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	602b      	str	r3, [r5, #0]
 800526e:	f7fc f874 	bl	800135a <_fstat>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	d102      	bne.n	800527c <_fstat_r+0x1c>
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	b103      	cbz	r3, 800527c <_fstat_r+0x1c>
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	20000274 	.word	0x20000274

08005284 <_isatty_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d06      	ldr	r5, [pc, #24]	; (80052a0 <_isatty_r+0x1c>)
 8005288:	2300      	movs	r3, #0
 800528a:	4604      	mov	r4, r0
 800528c:	4608      	mov	r0, r1
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	f7fc f873 	bl	800137a <_isatty>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_isatty_r+0x1a>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_isatty_r+0x1a>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20000274 	.word	0x20000274

080052a4 <_lseek_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d07      	ldr	r5, [pc, #28]	; (80052c4 <_lseek_r+0x20>)
 80052a8:	4604      	mov	r4, r0
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	2200      	movs	r2, #0
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f7fc f86c 	bl	8001390 <_lseek>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_lseek_r+0x1e>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_lseek_r+0x1e>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000274 	.word	0x20000274

080052c8 <memcpy>:
 80052c8:	440a      	add	r2, r1
 80052ca:	4291      	cmp	r1, r2
 80052cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d0:	d100      	bne.n	80052d4 <memcpy+0xc>
 80052d2:	4770      	bx	lr
 80052d4:	b510      	push	{r4, lr}
 80052d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052de:	4291      	cmp	r1, r2
 80052e0:	d1f9      	bne.n	80052d6 <memcpy+0xe>
 80052e2:	bd10      	pop	{r4, pc}

080052e4 <memmove>:
 80052e4:	4288      	cmp	r0, r1
 80052e6:	b510      	push	{r4, lr}
 80052e8:	eb01 0402 	add.w	r4, r1, r2
 80052ec:	d902      	bls.n	80052f4 <memmove+0x10>
 80052ee:	4284      	cmp	r4, r0
 80052f0:	4623      	mov	r3, r4
 80052f2:	d807      	bhi.n	8005304 <memmove+0x20>
 80052f4:	1e43      	subs	r3, r0, #1
 80052f6:	42a1      	cmp	r1, r4
 80052f8:	d008      	beq.n	800530c <memmove+0x28>
 80052fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005302:	e7f8      	b.n	80052f6 <memmove+0x12>
 8005304:	4402      	add	r2, r0
 8005306:	4601      	mov	r1, r0
 8005308:	428a      	cmp	r2, r1
 800530a:	d100      	bne.n	800530e <memmove+0x2a>
 800530c:	bd10      	pop	{r4, pc}
 800530e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005316:	e7f7      	b.n	8005308 <memmove+0x24>

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_lock+0x8>)
 800531a:	f7ff b9d1 	b.w	80046c0 <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	2000026c 	.word	0x2000026c

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__malloc_unlock+0x8>)
 8005326:	f7ff b9cc 	b.w	80046c2 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	2000026c 	.word	0x2000026c

08005330 <_realloc_r>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	4607      	mov	r7, r0
 8005334:	4614      	mov	r4, r2
 8005336:	460e      	mov	r6, r1
 8005338:	b921      	cbnz	r1, 8005344 <_realloc_r+0x14>
 800533a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800533e:	4611      	mov	r1, r2
 8005340:	f7ff ba74 	b.w	800482c <_malloc_r>
 8005344:	b922      	cbnz	r2, 8005350 <_realloc_r+0x20>
 8005346:	f7ff fa21 	bl	800478c <_free_r>
 800534a:	4625      	mov	r5, r4
 800534c:	4628      	mov	r0, r5
 800534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005350:	f000 f826 	bl	80053a0 <_malloc_usable_size_r>
 8005354:	42a0      	cmp	r0, r4
 8005356:	d20f      	bcs.n	8005378 <_realloc_r+0x48>
 8005358:	4621      	mov	r1, r4
 800535a:	4638      	mov	r0, r7
 800535c:	f7ff fa66 	bl	800482c <_malloc_r>
 8005360:	4605      	mov	r5, r0
 8005362:	2800      	cmp	r0, #0
 8005364:	d0f2      	beq.n	800534c <_realloc_r+0x1c>
 8005366:	4631      	mov	r1, r6
 8005368:	4622      	mov	r2, r4
 800536a:	f7ff ffad 	bl	80052c8 <memcpy>
 800536e:	4631      	mov	r1, r6
 8005370:	4638      	mov	r0, r7
 8005372:	f7ff fa0b 	bl	800478c <_free_r>
 8005376:	e7e9      	b.n	800534c <_realloc_r+0x1c>
 8005378:	4635      	mov	r5, r6
 800537a:	e7e7      	b.n	800534c <_realloc_r+0x1c>

0800537c <_read_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	; (800539c <_read_r+0x20>)
 8005380:	4604      	mov	r4, r0
 8005382:	4608      	mov	r0, r1
 8005384:	4611      	mov	r1, r2
 8005386:	2200      	movs	r2, #0
 8005388:	602a      	str	r2, [r5, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f7fb ffa0 	bl	80012d0 <_read>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_read_r+0x1e>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_read_r+0x1e>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	20000274 	.word	0x20000274

080053a0 <_malloc_usable_size_r>:
 80053a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a4:	1f18      	subs	r0, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bfbc      	itt	lt
 80053aa:	580b      	ldrlt	r3, [r1, r0]
 80053ac:	18c0      	addlt	r0, r0, r3
 80053ae:	4770      	bx	lr

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr
